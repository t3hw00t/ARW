{
  "version": 1,
  "features": [
    {
      "id": "model_steward",
      "name": "Model Steward",
      "owner": "platform",
      "tier": "Core kernel",
      "deps": [
        "event_spine",
        "guardrail_gateway"
      ],
      "description": "Manage local models with safe HTTP download, resume, checksum verification, CAS storage, quotas, live progress, metrics, and concurrency controls.",
      "scope": {
        "surface": "backend",
        "audience": "admin",
        "layer": "core",
        "maturity": "complete"
      },
      "ssot": [
        {
          "path": "apps/arw-server/src/models.rs"
        },
        {
          "path": "apps/arw-server/src/api/models.rs"
        },
        {
          "path": "apps/arw-server/src/util.rs"
        },
        {
          "path": "crates/arw-topics/src/lib.rs"
        }
      ],
      "http": [
        {
          "method": "GET",
          "path": "/admin/models/summary"
        },
        {
          "method": "POST",
          "path": "/admin/models/download"
        },
        {
          "method": "POST",
          "path": "/admin/models/download/cancel"
        },
        {
          "method": "POST",
          "path": "/admin/models/cas_gc"
        },
        {
          "method": "GET",
          "path": "/admin/models/concurrency"
        },
        {
          "method": "POST",
          "path": "/admin/models/concurrency"
        },
        {
          "method": "GET",
          "path": "/admin/models/jobs"
        },
        {
          "method": "GET",
          "path": "/state/models_metrics"
        },
        {
          "method": "GET",
          "path": "/state/models_hashes"
        },
        {
          "method": "GET",
          "path": "/state/models"
        }
      ],
      "read_models": [
        "models",
        "models_metrics"
      ],
      "topics": [
        "models.download.progress",
        "models.changed",
        "models.manifest.written",
        "models.cas.gc",
        "models.refreshed",
        "state.read.model.patch"
      ],
      "env": [
        "ARW_MODELS_MAX_MB",
        "ARW_MODELS_DISK_RESERVE_MB",
        "ARW_MODELS_MAX_CONC",
        "ARW_MODELS_MAX_CONC_HARD",
        "ARW_MODELS_QUOTA_MB"
      ],
      "docs": [
        {
          "path": "docs/architecture/artifacts_provenance.md"
        }
      ]
    },
    {
      "id": "event_spine",
      "name": "Event Spine",
      "owner": "platform",
      "tier": "Core kernel",
      "description": "Unified in-process bus + SSE stream; maintains compact read-models and publishes JSON Patch deltas for low-latency UIs.",
      "scope": {
        "surface": "backend",
        "audience": "dev",
        "layer": "connectivity",
        "maturity": "complete"
      },
      "ssot": [
        {
          "path": "apps/arw-server/src/main.rs"
        },
        {
          "path": "apps/arw-server/src/api/events.rs"
        },
        {
          "path": "apps/arw-server/src/read_models.rs"
        },
        {
          "path": "crates/arw-topics/src/lib.rs"
        }
      ],
      "http": [
        {
          "method": "GET",
          "path": "/events"
        }
      ],
      "read_models": [
        "models",
        "models_metrics",
        "episodes",
        "projects",
        "route_stats",
        "snappy"
      ],
      "topics": [
        "state.read.model.patch"
      ],
      "env": [],
      "docs": [
        {
          "path": "docs/architecture/sse_patch_contract.md"
        }
      ]
    },
    {
      "id": "snappy_governor",
      "name": "Snappy Governor",
      "owner": "platform",
      "tier": "Core kernel",
      "deps": [
        "event_spine"
      ],
      "description": "Latency budgets and route observability; publishes budgets vs. measured p95 and breach notices.",
      "scope": {
        "surface": "backend",
        "audience": "dev",
        "layer": "core",
        "maturity": "complete"
      },
      "ssot": [
        {
          "path": "apps/arw-server/src/api/metrics.rs"
        },
        {
          "path": "apps/arw-server/src/metrics.rs"
        }
      ],
      "http": [
        {
          "method": "GET",
          "path": "/metrics"
        },
        {
          "method": "GET",
          "path": "/state/route_stats"
        }
      ],
      "read_models": [
        "route_stats",
        "snappy"
      ],
      "topics": [
        "snappy.notice",
        "snappy.detail",
        "state.read.model.patch"
      ],
      "env": [
        "ARW_SNAPPY_I2F_P95_MS",
        "ARW_SNAPPY_FIRST_PARTIAL_P95_MS",
        "ARW_SNAPPY_FULL_RESULT_P95_MS",
        "ARW_SNAPPY_PUBLISH_MS"
      ],
      "docs": [
        {
          "path": "docs/architecture/runtime_layout.md"
        },
        {
          "path": "docs/architecture/performance.md"
        }
      ]
    },
    {
      "id": "tool_forge",
      "name": "Tool Forge",
      "owner": "platform",
      "tier": "Core kernel",
      "deps": [
        "event_spine"
      ],
      "description": "Tool registry with schema introspection and an Action Cache (in-memory TTL + CAS) with singleflight.",
      "scope": {
        "surface": "backend",
        "audience": "admin",
        "layer": "core",
        "maturity": "complete"
      },
      "ssot": [
        {
          "path": "apps/arw-server/src/tools.rs"
        },
        {
          "path": "apps/arw-server/src/api/tools.rs"
        }
      ],
      "http": [
        {
          "method": "GET",
          "path": "/admin/tools"
        },
        {
          "method": "POST",
          "path": "/admin/tools/run"
        },
        {
          "method": "GET",
          "path": "/admin/tools/cache_stats"
        },
        {
          "method": "GET",
          "path": "/state/models_metrics"
        }
      ],
      "read_models": [],
      "topics": [
        "task.completed"
      ],
      "env": [
        "ARW_TOOLS_CACHE_CAP",
        "ARW_TOOLS_CACHE_TTL_SECS",
        "ARW_POLICY_VERSION",
        "ARW_SECRETS_VERSION"
      ],
      "docs": [
        {
          "path": "docs/architecture/cache_policy.md"
        },
        {
          "path": "docs/architecture/caching_layers.md"
        }
      ]
    },
    {
      "id": "screenshot_pipeline",
      "name": "Screenshot Capture Pipeline",
      "owner": "platform",
      "tier": "Opt-in pack",
      "deps": [
        "tool_forge",
        "policy_leases",
        "event_spine"
      ],
      "description": "Screen/window/region capture with annotate/blur, gallery, Save to project, and optional OCR for agents and operators.",
      "scope": {
        "surface": "runtime",
        "audience": "admin",
        "layer": "auxiliary",
        "maturity": "complete"
      },
      "ssot": [
        {
          "path": "apps/arw-server/src/tools.rs"
        },
        {
          "path": "apps/arw-server/src/tools/projects.rs"
        },
        {
          "path": "apps/arw-launcher/src-tauri/ui/common.js"
        },
        {
          "path": "docs/guide/screenshots.md"
        }
      ],
      "http": [
        {
          "method": "POST",
          "path": "/admin/tools/run"
        }
      ],
      "read_models": [],
      "topics": [
        "screenshots.captured"
      ],
      "env": [],
      "docs": [
        {
          "path": "docs/architecture/screenshot_capture_pipeline.md"
        },
        {
          "path": "docs/guide/screenshots.md"
        }
      ]
    },
    {
      "id": "chat_workbench",
      "name": "Chat Workbench",
      "owner": "platform",
      "tier": "Opt-in pack",
      "deps": [
        "event_spine"
      ],
      "description": "Debug chat UI surface with synthetic replies or llama/OpenAI backends; planner hints, optional self-consistency and verifier (gated).",
      "scope": {
        "surface": "backend",
        "audience": "admin",
        "layer": "auxiliary",
        "maturity": "complete"
      },
      "ssot": [
        {
          "path": "apps/arw-server/src/context_loop.rs"
        },
        {
          "path": "apps/arw-server/src/api/context.rs"
        }
      ],
      "http": [
        {
          "method": "GET",
          "path": "/admin/chat"
        },
        {
          "method": "POST",
          "path": "/admin/chat/send"
        },
        {
          "method": "POST",
          "path": "/admin/chat/clear"
        },
        {
          "method": "GET",
          "path": "/admin/chat/status"
        }
      ],
      "read_models": [],
      "topics": [
        "chat.message",
        "chat.planner",
        "chat.probe"
      ],
      "env": [
        "ARW_LLAMA_URL",
        "ARW_LLAMA_N_PREDICT",
        "ARW_LLAMA_TOP_P",
        "ARW_LLAMA_TOP_K",
        "ARW_LLAMA_MIN_P",
        "ARW_LLAMA_REPEAT_PENALTY",
        "ARW_LLAMA_STOP",
        "ARW_OPENAI_API_KEY",
        "ARW_OPENAI_BASE_URL",
        "ARW_OPENAI_MODEL",
        "ARW_OPENAI_MAX_TOKENS",
        "ARW_OPENAI_TOP_P",
        "ARW_OPENAI_FREQUENCY_PENALTY",
        "ARW_OPENAI_PRESENCE_PENALTY",
        "ARW_OPENAI_STOP",
        "ARW_CHAT_DEFAULT_TEMPERATURE",
        "ARW_CHAT_DEFAULT_VOTE_K"
      ]
    },
    {
      "id": "memory_lanes",
      "name": "Memory Lanes",
      "owner": "platform",
      "tier": "Core kernel",
      "deps": [
        "event_spine"
      ],
      "description": "Local-first memory with lanes (ephemeral/episodic/semantic/procedural) plus admin helpers to inspect and apply items.",
      "scope": {
        "surface": "backend",
        "audience": "admin",
        "layer": "core",
        "maturity": "complete"
      },
      "ssot": [
        {
          "path": "apps/arw-server/src/api/memory.rs"
        }
      ],
      "http": [
        {
          "method": "GET",
          "path": "/admin/memory"
        },
        {
          "method": "POST",
          "path": "/admin/memory/apply"
        }
      ],
      "read_models": [],
      "topics": [
        "memory.applied"
      ],
      "env": [
        "ARW_MEM_LIMIT"
      ]
    },
    {
      "id": "project_hub",
      "name": "Project Hub Primitives",
      "owner": "platform",
      "tier": "Core kernel",
      "deps": [
        "event_spine"
      ],
      "description": "Projects tree/creation/notes and safe file IO (atomic write, SHA precondition), with audit/events.",
      "scope": {
        "surface": "backend",
        "audience": "admin",
        "layer": "core",
        "maturity": "complete"
      },
      "ssot": [
        {
          "path": "apps/arw-server/src/api/projects.rs"
        },
        {
          "path": "apps/arw-server/src/util.rs"
        }
      ],
      "http": [
        {
          "method": "GET",
          "path": "/state/projects"
        },
        {
          "method": "POST",
          "path": "/projects"
        },
        {
          "method": "GET",
          "path": "/state/projects/{proj}/tree"
        },
        {
          "method": "GET",
          "path": "/state/projects/{proj}/notes"
        },
        {
          "method": "PUT",
          "path": "/projects/{proj}/notes"
        },
        {
          "method": "GET",
          "path": "/state/projects/{proj}/file"
        },
        {
          "method": "PUT",
          "path": "/projects/{proj}/file"
        },
        {
          "method": "PATCH",
          "path": "/projects/{proj}/file"
        },
        {
          "method": "POST",
          "path": "/projects/{proj}/import"
        },
        {
          "method": "POST",
          "path": "/projects/{proj}/snapshot"
        },
        {
          "method": "GET",
          "path": "/projects/{proj}/snapshots"
        },
        {
          "method": "POST",
          "path": "/projects/{proj}/snapshots/{snapshot}/restore"
        }
      ],
      "read_models": [],
      "topics": [
        "projects.created",
        "projects.file.written",
        "projects.snapshot.created",
        "projects.snapshot.restored"
      ],
      "env": [
        "ARW_PROJECTS_DIR",
        "ARW_PROJECT_MAX_FILE_MB"
      ]
    },
    {
      "id": "feedback_loop",
      "name": "Feedback Loop",
      "owner": "platform",
      "tier": "Core kernel",
      "deps": [
        "event_spine"
      ],
      "description": "Near-live suggestions and policy with persisted state, supporting guidance to improve runs.",
      "scope": {
        "surface": "backend",
        "audience": "admin",
        "layer": "helpers",
        "maturity": "complete"
      },
      "ssot": [
        {
          "path": "apps/arw-server/src/feedback.rs"
        },
        {
          "path": "apps/arw-server/src/api/feedback.rs"
        }
      ],
      "http": [
        {
          "method": "GET",
          "path": "/admin/feedback/suggestions"
        },
        {
          "method": "GET",
          "path": "/admin/feedback/updates"
        },
        {
          "method": "GET",
          "path": "/admin/feedback/policy"
        }
      ],
      "read_models": [],
      "topics": [
        "feedback.suggested",
        "feedback.applied"
      ],
      "env": []
    },
    {
      "id": "identity_tenancy",
      "name": "Identity & Tenancy",
      "owner": "platform",
      "tier": "Core kernel",
      "deps": [
        "policy_leases"
      ],
      "description": "Layered principals align policies, storage, and audit scopes to User, Project, and AgentInstance boundaries.",
      "scope": {
        "surface": "workspace",
        "audience": "operators",
        "layer": "governance",
        "maturity": "beta"
      },
      "ssot": [
        {
          "path": "apps/arw-server/src/capsule_guard.rs"
        },
        {
          "path": "crates/arw-core/src/gating.rs"
        }
      ],
      "http": [
        {
          "method": "GET",
          "path": "/state/policy"
        },
        {
          "method": "GET",
          "path": "/state/identity"
        }
      ],
      "read_models": [],
      "topics": [
        "policy.decision",
        "policy.capsule.applied",
        "policy.capsule.failed"
      ],
      "env": [
        "ARW_SECURITY_POSTURE",
        "ARW_TENANTS_FILE"
      ],
      "docs": [
        {
          "path": "docs/architecture/identity_tenancy.md"
        },
        {
          "path": "docs/guide/policy_permissions.md"
        },
        {
          "path": "docs/architecture/capability_consent_ledger.md"
        }
      ],
      "notes": [
        "Principals cascade AgentInstance -> Project -> User to scope storage, caches, and audit trails.",
        "Capsule guard adopts gating capsules and publishes applied/failure telemetry for auditability."
      ]
    },
    {
      "id": "federated_clustering",
      "name": "Federated Clustering",
      "owner": "platform",
      "tier": "Core kernel",
      "deps": [
        "identity_tenancy"
      ],
      "description": "Shared node registry and adverts for optional multi-node deployments.",
      "scope": {
        "surface": "runtime",
        "audience": "operators",
        "layer": "infrastructure",
        "maturity": "preview"
      },
      "ssot": [
        {
          "path": "apps/arw-server/src/cluster.rs"
        },
        {
          "path": "apps/arw-server/src/api/state.rs"
        }
      ],
      "http": [
        {
          "method": "GET",
          "path": "/state/cluster"
        }
      ],
      "read_models": [
        "cluster_nodes"
      ],
      "topics": [
        "cluster.node.advertise",
        "cluster.node.changed"
      ],
      "env": [],
      "docs": [
        {
          "path": "docs/architecture/cluster_federation.md"
        }
      ],
      "notes": [
        "Home node keeps authoritative policy, budgets, and leases; workers advertise capabilities and stream results back.",
        "Optional broker aids NAT traversal while capsules and egress guards enforce federation policy."
      ]
    },
    {
      "id": "experiment_deck",
      "name": "Experiment Deck",
      "owner": "platform",
      "tier": "Opt-in pack",
      "deps": [
        "event_spine"
      ],
      "description": "Define variants, run A/B on goldens, publish results and winner; apply hints.",
      "scope": {
        "surface": "backend",
        "audience": "admin",
        "layer": "core",
        "maturity": "complete"
      },
      "ssot": [
        {
          "path": "apps/arw-server/src/experiments.rs"
        },
        {
          "path": "apps/arw-server/src/api/experiments.rs"
        }
      ],
      "http": [
        {
          "method": "POST",
          "path": "/admin/experiments/start"
        },
        {
          "method": "GET",
          "path": "/admin/experiments/list"
        },
        {
          "method": "GET",
          "path": "/admin/experiments/winners"
        },
        {
          "method": "GET",
          "path": "/admin/experiments/scoreboard"
        },
        {
          "method": "POST",
          "path": "/admin/experiments/run"
        },
        {
          "method": "POST",
          "path": "/admin/experiments/activate"
        }
      ],
      "read_models": [],
      "topics": [
        "experiment.result",
        "experiment.winner"
      ],
      "env": []
    },
    {
      "id": "self_card",
      "name": "Self Card + Forecasts",
      "owner": "platform",
      "tier": "Core kernel",
      "deps": [
        "event_spine"
      ],
      "description": "Per-agent identity and competence, with periodic aggregates for forecasts and resource curves.",
      "scope": {
        "surface": "backend",
        "audience": "admin",
        "layer": "helpers",
        "maturity": "complete"
      },
      "ssot": [
        {
          "path": "apps/arw-server/src/api/state.rs"
        },
        {
          "path": "apps/arw-server/src/self_model.rs"
        },
        {
          "path": "apps/arw-server/src/api/self_model.rs"
        }
      ],
      "http": [
        {
          "method": "GET",
          "path": "/state/self"
        },
        {
          "method": "GET",
          "path": "/state/self/:agent"
        },
        {
          "method": "POST",
          "path": "/admin/self_model/propose"
        },
        {
          "method": "POST",
          "path": "/admin/self_model/apply"
        }
      ],
      "read_models": [],
      "topics": [
        "self.model.proposed",
        "self.model.updated"
      ],
      "env": [],
      "docs": [
        {
          "path": "docs/architecture/self_model.md"
        }
      ]
    },
    {
      "id": "project_map",
      "name": "Project Map (World Model)",
      "owner": "platform",
      "tier": "Core kernel",
      "deps": [
        "event_spine"
      ],
      "description": "Observations folded into beliefs/intents/actions and stitched episodes for a scoped project world model.",
      "scope": {
        "surface": "backend",
        "audience": "admin",
        "layer": "connectivity",
        "maturity": "complete"
      },
      "ssot": [
        {
          "path": "apps/arw-server/src/api/state.rs"
        },
        {
          "path": "apps/arw-server/src/state_observer.rs"
        },
        {
          "path": "apps/arw-server/src/world.rs"
        }
      ],
      "http": [
        {
          "method": "GET",
          "path": "/state/observations"
        },
        {
          "method": "GET",
          "path": "/state/beliefs"
        },
        {
          "method": "GET",
          "path": "/state/intents"
        },
        {
          "method": "GET",
          "path": "/state/actions"
        },
        {
          "method": "GET",
          "path": "/state/episodes"
        }
      ],
      "read_models": [],
      "topics": [
        "world.updated"
      ],
      "env": [],
      "docs": [
        {
          "path": "docs/architecture/object_graph.md"
        }
      ]
    },
    {
      "id": "guardrail_gateway",
      "name": "Guardrail Gateway (Policy + Egress)",
      "owner": "platform",
      "tier": "Remote collaborator pack",
      "deps": [
        "event_spine"
      ],
      "description": "Ingress/egress policy gating with previews and append-only egress ledger. Full proxy/DNS guard is planned.",
      "scope": {
        "surface": "backend",
        "audience": "admin",
        "layer": "connectivity",
        "maturity": "partial"
      },
      "ssot": [
        {
          "path": "apps/arw-server/src/egress_proxy.rs"
        },
        {
          "path": "crates/arw-topics/src/lib.rs"
        },
        {
          "path": "docs/architecture/egress_firewall.md"
        }
      ],
      "http": [
        {
          "method": "POST",
          "path": "/policy/guardrails/apply"
        }
      ],
      "read_models": [],
      "topics": [
        "egress.preview",
        "egress.ledger.appended",
        "policy.guardrails.applied"
      ],
      "env": [
        "ARW_EGRESS_LEDGER_ENABLE",
        "ARW_NET_POSTURE"
      ]
    },
    {
      "id": "asimov_capsule_guard",
      "name": "Asimov Capsule Guard",
      "owner": "platform",
      "tier": "Future pack",
      "deps": [
        "guardrail_gateway",
        "policy_leases",
        "event_spine"
      ],
      "description": "Always-enforced capsule propagation that refreshes leases, scopes reversible denies, and instruments adoption across the runtime.",
      "scope": {
        "surface": "backend",
        "audience": "admin",
        "layer": "security",
        "maturity": "alpha"
      },
      "ssot": [
        {
          "path": "crates/arw-core/src/gating.rs"
        },
        {
          "path": "crates/arw-core/src/rpu.rs"
        },
        {
          "path": "apps/arw-server/src/security.rs"
        },
        {
          "path": "docs/architecture/asimov_capsule_guard.md"
        }
      ],
      "http": [
        {
          "method": "ANY",
          "path": "/admin/* (X-ARW-Capsule)"
        }
      ],
      "read_models": [],
      "topics": [
        "policy.decision",
        "rpu.trust.changed"
      ],
      "env": [
        "ARW_TRUST_CAPSULES",
        "ARW_GATING_DENY"
      ],
      "docs": [
        {
          "path": "docs/architecture/asimov_capsule_guard.md"
        }
      ]
    },
    {
      "id": "orchestrator_plane",
      "name": "Orchestrator Plane",
      "owner": "platform",
      "tier": "Remote collaborator pack",
      "deps": [
        "event_spine"
      ],
      "description": "Local queue for tasks with optional NATS bridge and background worker(s) for offloads.",
      "scope": {
        "surface": "backend",
        "audience": "dev",
        "layer": "connectivity",
        "maturity": "complete"
      },
      "ssot": [
        {
          "path": "apps/arw-server/src/worker.rs"
        },
        {
          "path": "apps/arw-connector/src/main.rs"
        },
        {
          "path": "apps/arw-server/src/api/orchestrator.rs"
        }
      ],
      "http": [
        {
          "method": "GET",
          "path": "/orchestrator/mini_agents"
        },
        {
          "method": "POST",
          "path": "/orchestrator/mini_agents/start_training"
        },
        {
          "method": "POST",
          "path": "/orchestrator/runtimes/{id}/restore"
        },
        {
          "method": "GET",
          "path": "/state/orchestrator/jobs"
        }
      ],
      "read_models": [],
      "topics": [
        "task.completed",
        "runtime.restore.requested",
        "runtime.restore.completed"
      ],
      "env": [
        "ARW_NATS_URL",
        "ARW_NODE_ID",
        "ARW_NATS_OUT"
      ],
    "docs": [
      {
        "path": "docs/architecture/agent_orchestrator.md"
      }
    ]
    },
    {
      "id": "autonomy_lane_controls",
      "name": "Autonomy Lane Controls",
      "owner": "platform",
      "tier": "Remote collaborator pack",
      "deps": [
        "project_hub",
        "event_spine"
      ],
      "description": "Pause/resume lanes, flush queues, capture snapshots, and manage budgets for trusted autonomy runs.",
      "scope": {
        "surface": "backend",
        "audience": "operators",
        "layer": "governance",
        "maturity": "beta"
      },
      "ssot": [
        {
          "path": "apps/arw-server/src/api/autonomy.rs"
        },
        {
          "path": "apps/arw-server/src/api/projects.rs"
        },
        {
          "path": "scripts/autonomy_rollback.sh"
        }
      ],
      "http": [
        {
          "method": "POST",
          "path": "/admin/autonomy/{lane}/pause"
        },
        {
          "method": "POST",
          "path": "/admin/autonomy/{lane}/resume"
        },
        {
          "method": "DELETE",
          "path": "/admin/autonomy/{lane}/jobs"
        },
        {
          "method": "POST",
          "path": "/admin/autonomy/{lane}/budgets"
        },
        {
          "method": "POST",
          "path": "/projects/{proj}/snapshot"
        },
        {
          "method": "GET",
          "path": "/projects/{proj}/snapshots"
        },
        {
          "method": "POST",
          "path": "/projects/{proj}/snapshots/{snapshot}/restore"
        }
      ],
      "read_models": [],
      "topics": [
        "autonomy.run.paused",
        "autonomy.run.resumed",
        "autonomy.interrupt",
        "autonomy.budget.updated",
        "projects.snapshot.restored"
      ],
      "env": [
        "ARW_PROJECTS_DIR",
        "ARW_PROJECT_MAX_FILE_MB"
      ],
      "docs": [
        {
          "path": "docs/spec/autonomy_lane.md"
        },
        {
          "path": "docs/ops/trials/autonomy_rollback_playbook.md"
        }
      ]
    },
    {
      "id": "interface_registry",
      "name": "Interface Registry & Specs",
      "owner": "platform",
      "tier": "Core kernel",
      "description": "Descriptors and generated OpenAPI/AsyncAPI/MCP schemas with drift checks and deprecation headers.",
      "scope": {
        "surface": "dev",
        "audience": "dev",
        "layer": "auxiliary",
        "maturity": "complete"
      },
      "ssot": [
        {
          "path": "interfaces/index.yaml"
        },
        {
          "path": "apps/arw-server/src/main.rs"
        },
        {
          "path": "apps/arw-server/src/api/spec.rs"
        }
      ],
      "http": [
        {
          "method": "GET",
          "path": "/spec/openapi.yaml"
        },
        {
          "method": "GET",
          "path": "/spec/asyncapi.yaml"
        },
        {
          "method": "GET",
          "path": "/spec/mcp-tools.json"
        }
      ],
      "read_models": [],
      "topics": [],
      "env": []
    },
    {
      "id": "triad_kernel",
      "name": "Triad Kernel & Unified API",
      "owner": "platform",
      "tier": "Core kernel",
      "deps": [
        "event_spine"
      ],
      "description": "Journal-backed actions/events/state plane with SSE replay, contributions ledger, and discoverable metadata for the new server.",
      "scope": {
        "surface": "backend",
        "audience": "dev",
        "layer": "core",
        "maturity": "beta"
      },
      "ssot": [
        {
          "path": "apps/arw-server/src/main.rs"
        },
        {
          "path": "apps/arw-server/src/api/actions.rs"
        },
        {
          "path": "apps/arw-server/src/api/events.rs"
        },
        {
          "path": "apps/arw-server/src/api/state.rs"
        },
        {
          "path": "crates/arw-kernel/src/lib.rs"
        }
      ],
      "http": [
        {
          "method": "POST",
          "path": "/actions"
        },
        {
          "method": "GET",
          "path": "/actions/:id"
        },
        {
          "method": "POST",
          "path": "/actions/:id/state"
        },
        {
          "method": "GET",
          "path": "/events"
        },
        {
          "method": "GET",
          "path": "/state/episodes"
        },
        {
          "method": "GET",
          "path": "/state/actions"
        },
        {
          "method": "GET",
          "path": "/state/contributions"
        },
        {
          "method": "GET",
          "path": "/state/route_stats"
        },
        {
          "method": "GET",
          "path": "/healthz"
        },
        {
          "method": "GET",
          "path": "/about"
        }
      ],
      "read_models": [],
      "topics": [
        "actions.submitted",
        "actions.running",
        "actions.completed",
        "actions.failed"
      ],
      "env": [
        "ARW_ACTIONS_QUEUE_MAX",
        "ARW_STATE_DIR",
        "ARW_PORT",
        "ARW_BIND",
        "ARW_PERF_PRESET",
        "ARW_HTTP_MAX_CONC"
      ]
    },
    {
      "id": "policy_leases",
      "name": "Policy & Lease Facade",
      "owner": "platform",
      "tier": "Core kernel",
      "deps": [
        "triad_kernel"
      ],
      "description": "ABAC facade with hot reloadable policies, lease issuance, and decision telemetry for capability-gated actions.",
      "scope": {
        "surface": "backend",
        "audience": "admin",
        "layer": "security",
        "maturity": "beta"
      },
      "ssot": [
        {
          "path": "apps/arw-server/src/api/policy.rs"
        },
        {
          "path": "apps/arw-server/src/api/leases.rs"
        },
        {
          "path": "crates/arw-policy/src/lib.rs"
        }
      ],
      "http": [
        {
          "method": "GET",
          "path": "/state/policy"
        },
        {
          "method": "POST",
          "path": "/policy/reload"
        },
        {
          "method": "POST",
          "path": "/policy/simulate"
        },
        {
          "method": "POST",
          "path": "/leases"
        },
        {
          "method": "GET",
          "path": "/state/leases"
        }
      ],
      "read_models": [],
      "topics": [
        "policy.decision",
        "policy.reloaded"
      ],
      "env": [
        "ARW_POLICY_FILE",
        "ARW_SECURITY_POSTURE"
      ],
      "docs": [
        {
          "path": "docs/GATING_KEYS.md"
        },
        {
          "path": "docs/guide/policy_permissions.md"
        },
        {
          "path": "crates/arw-core/src/gating.rs"
        }
      ]
    },
    {
      "id": "egress_sentinel",
      "name": "Egress Sentinel",
      "owner": "platform",
      "tier": "Core kernel",
      "deps": [
        "policy_leases"
      ],
      "description": "Preview-first egress guard with allowlists, IP/DNS defenses, ledger logging, and runtime posture controls.",
      "scope": {
        "surface": "backend",
        "audience": "admin",
        "layer": "security",
        "maturity": "beta"
      },
      "ssot": [
        {
          "path": "apps/arw-server/src/api/egress.rs"
        },
        {
          "path": "apps/arw-server/src/api/egress_settings.rs"
        },
        {
          "path": "apps/arw-server/src/egress_proxy.rs"
        }
      ],
      "http": [
        {
          "method": "POST",
          "path": "/egress/preview"
        },
        {
          "method": "POST",
          "path": "/egress/settings"
        },
        {
          "method": "GET",
          "path": "/state/egress"
        },
        {
          "method": "GET",
          "path": "/state/egress/settings"
        }
      ],
      "read_models": [],
      "topics": [
        "egress.ledger.appended",
        "egress.settings.updated"
      ],
      "env": [
        "ARW_NET_POSTURE",
        "ARW_SECURITY_POSTURE",
        "ARW_NET_ALLOWLIST",
        "ARW_EGRESS_BLOCK_IP_LITERALS",
        "ARW_DNS_GUARD_ENABLE",
        "ARW_EGRESS_PROXY_ENABLE",
        "ARW_EGRESS_PROXY_PORT",
        "ARW_EGRESS_LEDGER_ENABLE"
      ],
      "docs": [
        {
          "path": "docs/architecture/egress_firewall.md"
        },
        {
          "path": "docs/guide/network_posture.md"
        }
      ]
    },
    {
      "id": "working_set_builder",
      "name": "Working Set Builder",
      "owner": "platform",
      "tier": "Core kernel",
      "deps": [
        "triad_kernel"
      ],
      "description": "Hybrid retrieval with coverage loops, streaming diagnostics, and on-demand rehydrate for just-in-time context (stable pointers include `memory` ids and `file` heads).",
      "scope": {
        "surface": "backend",
        "audience": "builder",
        "layer": "intelligence",
        "maturity": "beta"
      },
      "ssot": [
        {
          "path": "apps/arw-server/src/api/context.rs"
        },
    {
      "path": "apps/arw-server/src/working_set/mod.rs"
    },
    {
      "path": "apps/arw-server/src/working_set/builder.rs"
    },
    {
      "path": "apps/arw-server/src/working_set/spec.rs"
    },
    {
      "path": "apps/arw-server/src/working_set/models.rs"
    },
        {
          "path": "apps/arw-server/src/coverage.rs"
        }
      ],
      "http": [
        {
          "method": "POST",
          "path": "/context/assemble"
        },
        {
          "method": "POST",
          "path": "/context/rehydrate"
        }
      ],
      "read_models": [],
      "topics": [
        "working_set.started",
        "working_set.seed",
        "working_set.expanded",
        "working_set.expand_query",
        "working_set.selected",
        "working_set.completed",
        "working_set.iteration.summary",
        "working_set.error"
      ],
      "env": [
        "ARW_CONTEXT_LANES_DEFAULT",
        "ARW_CONTEXT_K",
        "ARW_CONTEXT_EXPAND_PER_SEED",
        "ARW_CONTEXT_DIVERSITY_LAMBDA",
        "ARW_CONTEXT_MIN_SCORE",
        "ARW_CONTEXT_LANE_BONUS",
        "ARW_CONTEXT_EXPAND_QUERY",
        "ARW_CONTEXT_EXPAND_QUERY_TOP_K",
        "ARW_CONTEXT_SCORER",
        "ARW_CONTEXT_COVERAGE_MAX_ITERS",
        "ARW_CONTEXT_STREAM_DEFAULT"
      ],
      "docs": [
        {
          "path": "docs/architecture/context_working_set.md"
        }
      ]
    },
    {
      "id": "memory_atlas",
      "name": "Memory Atlas",
      "owner": "platform",
      "tier": "Core kernel",
      "deps": [
        "triad_kernel"
      ],
      "description": "Memory overlay service backed by the canonical MAL store with hybrid retrieval, explainable packing, and stable pointers (`ptr.kind: \"memory\"`).",
      "scope": {
        "surface": "backend",
        "audience": "builder",
        "layer": "intelligence",
        "maturity": "beta"
      },
      "ssot": [
        {
          "path": "apps/arw-server/src/api/actions.rs"
        },
        {
          "path": "apps/arw-server/src/read_models.rs"
        },
    {
      "path": "apps/arw-server/src/memory_service.rs"
    },
    {
      "path": "apps/arw-server/src/working_set/mod.rs"
    },
    {
      "path": "apps/arw-server/src/working_set/builder.rs"
    },
    {
      "path": "apps/arw-server/src/working_set/spec.rs"
    },
        {
          "path": "apps/arw-server/src/api/memory.rs"
        }
      ],
      "http": [
        {
          "method": "POST",
          "path": "/actions (memory.upsert)"
        },
        {
          "method": "POST",
          "path": "/actions (memory.search)"
        },
        {
          "method": "POST",
          "path": "/actions (memory.pack)"
        },
        {
          "method": "GET",
          "path": "/state/memory"
        },
        {
          "method": "GET",
          "path": "/state/memory/recent"
        }
      ],
      "read_models": [
        "memory"
      ],
      "topics": [
        "memory.item.upserted",
        "memory.item.expired",
        "memory.pack.journaled"
      ],
      "env": [],
      "docs": [
        {
          "path": "docs/architecture/memory_abstraction.md"
        },
        {
          "path": "docs/architecture/memory_lifecycle.md"
        },
        {
          "path": "docs/architecture/memory_overlay_service.md"
        }
      ]
    },
    {
      "id": "config_plane",
      "name": "Config Plane",
      "owner": "platform",
      "tier": "Core kernel",
      "deps": [
        "triad_kernel"
      ],
      "description": "Schema-aware config snapshots, diffable patches, and validation helpers for runtime tuning.",
      "scope": {
        "surface": "backend",
        "audience": "admin",
        "layer": "core",
        "maturity": "beta"
      },
      "ssot": [
        {
          "path": "apps/arw-server/src/api/config.rs"
        }
      ],
      "http": [
        {
          "method": "GET",
          "path": "/state/config"
        },
        {
          "method": "GET",
          "path": "/state/config/snapshots"
        },
        {
          "method": "GET",
          "path": "/state/config/snapshots/:id"
        },
        {
          "method": "POST",
          "path": "/patch/apply"
        },
        {
          "method": "POST",
          "path": "/patch/apply (dry_run=true)"
        },
        {
          "method": "POST",
          "path": "/patch/revert"
        },
        {
          "method": "POST",
          "path": "/patch/validate"
        },
        {
          "method": "GET",
          "path": "/state/schema_map"
        },
        {
          "method": "POST",
          "path": "/patch/infer_schema"
        }
      ],
      "read_models": [],
      "topics": [
        "config.patch.applied",
        "logic.unit.reverted"
      ],
      "env": [
        "ARW_SCHEMA_MAP"
      ],
      "docs": [
        {
          "path": "docs/architecture/config_patch_engine.md"
        },
        {
          "path": "configs/schema_map.json"
        }
      ]
    },
    {
      "id": "runtime_supervisor",
      "name": "Managed Runtime Supervisor",
      "owner": "platform",
      "tier": "Core kernel",
      "deps": [
        "model_steward",
        "config_plane",
        "policy_leases",
        "egress_sentinel"
      ],
      "description": "Policy-aligned lifecycle manager for local text, audio, and vision runtimes with accelerator profiles, health telemetry, and failover orchestration.",
      "scope": {
        "surface": "backend",
        "audience": "operators",
        "layer": "infrastructure",
        "maturity": "preview"
      },
      "ssot": [
        {
          "path": "docs/architecture/managed_runtime_supervisor.md"
        }
      ],
      "http": [
        {
          "method": "GET",
          "path": "/state/runtime_matrix"
        },
        {
          "method": "POST",
          "path": "/orchestrator/runtimes/{id}/restore"
        }
      ],
      "read_models": [
        "runtime_matrix"
      ],
      "topics": [
        "runtime.state.changed",
        "runtime.claim.request",
        "runtime.claim.acquired",
        "runtime.claim.released",
        "runtime.health",
        "runtime.restore.requested",
        "runtime.restore.completed"
      ],
      "env": [],
      "docs": [
        {
          "path": "docs/architecture/multimodal_runtime_plan.md"
        },
        {
          "path": "docs/architecture/managed_llamacpp_runtime.md"
        },
        {
          "path": "docs/guide/vision_runtime.md"
        }
      ],
      "notes": [
        "Promotes the runtime matrix scaffolding to a full supervisor with adapters for llama.cpp, ONNX Runtime, and vLLM.",
        "Process adapter + manifest loader available today (see configs/runtime/runtimes.toml, with auto_start flags to boot or stop runtimes on reload); additional adapters land behind preview gates.",
        "Bundles hardware-aware profiles and accessibility-first controls into Launcher and server surfaces.",
        "Vision bundles (configs/runtime/bundles.vision.json) ship ahead of audio so consent overlays, provenance hooks, and restart budgets land before microphone tooling."
      ]
    },
    {
      "id": "logic_units_library",
      "name": "Logic Units Library",
      "owner": "platform",
      "tier": "Opt-in pack",
      "deps": [
        "config_plane"
      ],
      "description": "Declarative strategy packs with install/apply/revert flows, schema validation, and audit trails.",
      "scope": {
        "surface": "backend",
        "audience": "admin",
        "layer": "core",
        "maturity": "beta"
      },
      "ssot": [
        {
          "path": "apps/arw-server/src/api/logic_units.rs"
        },
        {
          "path": "apps/arw-server/src/api/config.rs"
        },
        {
          "path": "spec/schemas/logic_unit_manifest.json"
        }
      ],
      "http": [
        {
          "method": "GET",
          "path": "/logic-units"
        },
        {
          "method": "GET",
          "path": "/state/logic_units"
        },
        {
          "method": "POST",
          "path": "/logic-units/install"
        },
        {
          "method": "POST",
          "path": "/logic-units/apply"
        },
        {
          "method": "POST",
          "path": "/logic-units/revert"
        }
      ],
      "read_models": [],
      "topics": [
        "logic.unit.installed",
        "logic.unit.applied",
        "logic.unit.reverted",
        "config.patch.applied"
      ],
      "env": [
        "ARW_SCHEMA_MAP"
      ]
    },
    {
      "id": "connectors_registry",
      "name": "Connectors Registry",
      "owner": "platform",
      "tier": "Remote collaborator pack",
      "deps": [
        "policy_leases",
        "egress_sentinel"
      ],
      "description": "Connector manifests with scoped tokens, audit-friendly storage, and events for cloud/local integrations.",
      "scope": {
        "surface": "backend",
        "audience": "admin",
        "layer": "connectivity",
        "maturity": "beta"
      },
      "ssot": [
        {
          "path": "apps/arw-server/src/api/connectors.rs"
        }
      ],
      "http": [
        {
          "method": "GET",
          "path": "/state/connectors"
        },
        {
          "method": "POST",
          "path": "/connectors/register"
        },
        {
          "method": "POST",
          "path": "/connectors/token"
        }
      ],
      "read_models": [],
      "topics": [
        "connectors.registered",
        "connectors.token.updated"
      ],
      "env": [
        "ARW_STATE_DIR"
      ]
    },
    {
      "id": "wasi_tool_host",
      "name": "WASI Tool Host",
      "owner": "platform",
      "tier": "Future pack",
      "deps": [
        "egress_sentinel"
      ],
      "description": "Embeddable WASI host with http.fetch, connector token injection, and policy-aware allowlists for future plugins.",
      "scope": {
        "surface": "runtime",
        "audience": "dev",
        "layer": "core",
        "maturity": "alpha"
      },
      "ssot": [
        {
          "path": "crates/arw-wasi/src/lib.rs"
        },
        {
          "path": "apps/arw-server/src/main.rs"
        }
      ],
      "http": [],
      "read_models": [],
      "topics": [
        "egress.ledger.appended"
      ],
      "env": [
        "ARW_HTTP_TIMEOUT_SECS",
        "ARW_EGRESS_PROXY_ENABLE",
        "ARW_EGRESS_PROXY_PORT",
        "ARW_NET_ALLOWLIST",
        "ARW_EGRESS_BLOCK_IP_LITERALS",
        "ARW_DNS_GUARD_ENABLE",
        "ARW_STATE_DIR"
      ]
    }
  ]
}
