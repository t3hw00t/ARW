{
  "version": 1,
  "components": [
    {
      "id": "agent_orchestrator",
      "feature_id": "orchestrator_plane",
      "name": "Agent Orchestrator",
      "owner": "platform",
      "category": "Runtime",
      "description": "Manages mini-agent training episodes, evaluates them via the triad, and promotes configurations into Logic Units under policy guardrails.",
      "scope": {
        "surface": "runtime",
        "audience": "developers",
        "layer": "orchestration",
        "maturity": "plan"
      },
      "depends": [
        "memory_abstraction_layer"
      ],
      "signals": [
        "orchestrator.job.created",
        "orchestrator.job.progress",
        "orchestrator.job.completed",
        "task.completed"
      ],
      "interfaces": {
        "http": [
          "GET /orchestrator/mini_agents",
          "POST /orchestrator/mini_agents/start_training",
          "GET /state/orchestrator/jobs",
          "/orchestrator/mini_agents",
          "/orchestrator/mini_agents/start_training",
          "/state/orchestrator/jobs"
        ]
      },
      "notes": [
        "Training stays lease-gated and reproducible via corr_id snapshots with budget tracking.",
        "Future phases add curriculum learning, self-play, and confidence-aware routing."
      ],
      "docs": [
        {
          "path": "docs/architecture/agent_orchestrator.md"
        }
      ]
    },
    {
      "id": "appsec_harness",
      "name": "AppSec Harness",
      "owner": "platform",
      "category": "Security & Policy",
      "description": "Security harness with seeded LLM threat tests, runtime filters, and reporting that surface violations as policy decisions.",
      "scope": {
        "surface": "runtime",
        "audience": "operators",
        "layer": "assurance",
        "maturity": "plan"
      },
      "depends": [
        "policy_gating_core",
        "asimov_capsule_guard"
      ],
      "signals": [
        "policy.decision"
      ],
      "docs": [
        {
          "path": "docs/architecture/appsec_harness.md"
        }
      ],
      "notes": [
        "Checklists and seeded prompts exercise prompt-injection, insecure outputs, SSRF, and leakage cases.",
        "Runtime guards block before memory or action pipelines and roll results into per-episode reports."
      ]
    },
    {
      "id": "artifacts_provenance_cas",
      "feature_id": "model_steward",
      "name": "Artifacts Provenance & Model CAS",
      "owner": "platform",
      "category": "Runtime",
      "description": "Tracks artifacts as typed nodes with provenance edges tying inputs, policies, and tools to outputs while storing models in CAS for deduplicated reuse.",
      "scope": {
        "surface": "runtime",
        "audience": "operators",
        "layer": "data plane",
        "maturity": "plan"
      },
      "depends": [
        "versioning_migration_backbone"
      ],
      "signals": [
        "models.manifest.written",
        "models.cas.gc"
      ],
      "notes": [
        "Reserved provenance events and bundle export endpoints document lineage for audit.",
        "Downloads honor preflight checks and quotas before admission."
      ],
      "docs": [
        {
          "path": "docs/architecture/artifacts_provenance.md"
        }
      ]
    },
    {
      "id": "asimov_capsule_guard",
      "feature_id": "asimov_capsule_guard",
      "name": "Asimov Capsule Guard",
      "owner": "platform",
      "category": "Security & Policy",
      "description": "Planned capsule lifecycle that refreshes reversible denies at runtime boundaries and emits telemetry for active guardrails.",
      "scope": {
        "surface": "runtime",
        "audience": "operators",
        "layer": "guardrails",
        "maturity": "plan"
      },
      "depends": [
        "policy_gating_core",
        "egress_firewall_ledger"
      ],
      "interfaces": {
        "env": [
          "ARW_TRUST_CAPSULES",
          "ARW_GATING_DENY"
        ],
        "topics": [
          "policy.capsule.*"
        ],
        "http": []
      },
      "notes": [
        "Extends gating capsules with leases so protections renew without restarts.",
        "Instruments admin middleware, tool execution, and egress to refresh capsules proactively."
      ],
      "signals": [],
      "docs": [
        {
          "path": "docs/architecture/asimov_capsule_guard.md"
        }
      ]
    },
    {
      "id": "cache_policy_action_cache",
      "feature_id": "tool_forge",
      "name": "Cache Policy & Action Cache",
      "owner": "platform",
      "category": "Runtime",
      "description": "Declarative cache manifest covering action cache keys, LLM reuse, semantic caching, and SSE delta persistence for predictable behavior across layers.",
      "scope": {
        "surface": "runtime",
        "audience": "developers",
        "layer": "data plane",
        "maturity": "plan"
      },
      "depends": [
        "runtime_layout_control_plane"
      ],
      "signals": [
        "tool.cache",
        "models.changed"
      ],
      "interfaces": {
        "http": [
          "GET /admin/tools/cache_stats",
          "GET /state/models_metrics"
        ],
        "env": [
          "ARW_TOOLS_CACHE_CAP",
          "ARW_TOOLS_CACHE_TTL_SECS",
          "ARW_TOOLS_CACHE_*",
          "ARW_MODELS_METRICS_*"
        ]
      },
      "notes": [
        "CAS-backed action cache pairs with W-TinyLFU fronts and digest-addressed blobs.",
        "Future RocksDB tiers and resumable SSE streams extend coverage."
      ],
      "docs": [
        {
          "path": "docs/architecture/cache_policy.md"
        },
        {
          "path": "docs/architecture/caching_layers.md"
        }
      ]
    },
    {
      "id": "capability_consent_ledger",
      "name": "Capability & Consent Ledger",
      "owner": "platform",
      "category": "Governance",
      "description": "Issues auditable, time-bound capability leases so the UI can explain why sensitive actions were allowed or denied.",
      "scope": {
        "surface": "runtime",
        "audience": "operators",
        "layer": "governance",
        "maturity": "plan"
      },
      "depends": [
        "policy_gating_core"
      ],
      "signals": [
        "policy.decision",
        "policy.reloaded"
      ],
      "docs": [
        {
          "path": "docs/architecture/capability_consent_ledger.md"
        }
      ],
      "notes": [
        "Grants modeled as leases with TTLs feed a planned `/state/policy` read-model showing active permissions.",
        "Denials and escalations record provenance alongside lease issuance."
      ]
    },
    {
      "id": "compliance_mode",
      "name": "Compliance Mode",
      "owner": "platform",
      "category": "Governance",
      "description": "Workspace toggle that enforces approvals, extended retention, and provenance snapshots for regulated contexts.",
      "scope": {
        "surface": "workspace",
        "audience": "operators",
        "layer": "governance",
        "maturity": "plan"
      },
      "depends": [
        "versioning_migration_backbone",
        "replay_observability_stack"
      ],
      "docs": [
        {
          "path": "docs/architecture/compliance_mode.md"
        }
      ],
      "notes": [
        "Requires approvals for risky actions and surfaces active obligations in the UI.",
        "Retains episode artifacts with provenance links for extended audit windows."
      ],
      "signals": []
    },
    {
      "id": "config_patch_engine",
      "feature_id": "config_plane",
      "name": "Config Plane & Patch Engine",
      "owner": "platform",
      "category": "Configuration",
      "description": "Atomic config patching workflow with dry-run, apply, and revert endpoints validated against schema maps before committing changes.",
      "scope": {
        "surface": "admin",
        "audience": "operators",
        "layer": "configuration",
        "maturity": "plan"
      },
      "depends": [
        "versioning_migration_backbone"
      ],
      "signals": [
        "logic.unit.applied",
        "logic.unit.reverted",
        "config.patch.applied"
      ],
      "interfaces": {
        "http": [
          "POST /patch/dry-run",
          "POST /patch/apply",
          "POST /patch/revert"
        ],
        "env": [
          "ARW_SCHEMA_MAP"
        ]
      },
      "notes": [
        "Validates config deltas against versioned JSON Schemas before widening permissions.",
        "Emits audited events so permission changes stay rollback-ready."
      ],
      "docs": [
        {
          "path": "docs/architecture/config_patch_engine.md"
        },
        {
          "path": "configs/schema_map.json"
        }
      ]
    },
    {
      "id": "context_working_set",
      "feature_id": "working_set_builder",
      "name": "Context Working Set",
      "owner": "platform",
      "category": "Runtime",
      "description": "Layered retrieval pipeline that assembles working, episodic, semantic, procedural, world, and artifact memories on demand with budgets and diversity guards.",
      "scope": {
        "surface": "runtime",
        "audience": "developers",
        "layer": "context",
        "maturity": "plan"
      },
      "depends": [
        "memory_abstraction_layer"
      ],
      "signals": [
        "working_set.started",
        "working_set.seed",
        "working_set.expanded",
        "working_set.expand_query",
        "working_set.selected",
        "working_set.completed",
        "working_set.iteration.summary",
        "working_set.error"
      ],
      "interfaces": {
        "http": [
          "POST /context/assemble",
          "POST /context/rehydrate"
        ],
        "env": [
          "ARW_CONTEXT_K",
          "ARW_CONTEXT_EXPAND_PER_SEED",
          "ARW_CONTEXT_DIVERSITY_LAMBDA",
          "ARW_CONTEXT_MIN_SCORE"
        ]
      },
      "notes": [
        "Information-gain gates and abstain/escalate rules prevent over-stuffing prompts.",
        "Telemetry highlights thin coverage or low diversity for planners and dashboards."
      ],
      "docs": [
        {
          "path": "docs/architecture/context_working_set.md"
        }
      ]
    },
    {
      "id": "data_governance_privacy",
      "name": "Data Governance & Privacy",
      "owner": "platform",
      "category": "Governance",
      "description": "Classification-driven handling that propagates tags across policies, memories, caches, and exports to enforce lifecycle controls.",
      "scope": {
        "surface": "workspace",
        "audience": "operators",
        "layer": "governance",
        "maturity": "plan"
      },
      "depends": [
        "policy_gating_core",
        "memory_abstraction_layer"
      ],
      "signals": [
        "memory.item.upserted",
        "memory.item.expired",
        "memory.link.put"
      ],
      "docs": [
        {
          "path": "docs/architecture/data_governance.md"
        }
      ],
      "notes": [
        "Redact/forget flows and classification-aware allowlists govern caches, snapshots, and egress.",
        "Per-episode classification summaries feed audit and export reports."
      ]
    },
    {
      "id": "durability_offline",
      "name": "Durability & Offline Resilience",
      "owner": "platform",
      "category": "Runtime",
      "description": "Event journal plus periodic snapshots, idempotent tool actions, and conflict-aware merges keep work replayable even offline.",
      "scope": {
        "surface": "runtime",
        "audience": "operators",
        "layer": "infrastructure",
        "maturity": "plan"
      },
      "depends": [
        "versioning_migration_backbone"
      ],
      "docs": [
        {
          "path": "docs/architecture/durability.md"
        }
      ],
      "notes": [
        "Local journaling and reconciliation guard against data loss during offline sessions.",
        "Three-way merges prefer explicit resolution with last-writer-wins limited to low-risk state."
      ]
    },
    {
      "id": "egress_firewall_ledger",
      "feature_id": "egress_sentinel",
      "name": "Egress Firewall & Ledger",
      "owner": "platform",
      "category": "Security & Policy",
      "description": "Loopback proxy, DNS guard, filesystem scoping, and leased sensor access enforce explicit network scopes with auditable previews and decisions.",
      "scope": {
        "surface": "runtime",
        "audience": "operators",
        "layer": "guardrails",
        "maturity": "plan"
      },
      "signals": [
        "egress.preview",
        "egress.ledger.appended",
        "egress.settings.updated"
      ],
      "interfaces": {
        "http": [
          "POST /egress/preview",
          "GET /state/egress/settings",
          "POST /egress/settings"
        ],
        "env": [
          "ARW_NET_POSTURE",
          "ARW_EGRESS_PROXY_ENABLE",
          "ARW_DNS_GUARD_ENABLE"
        ]
      },
      "notes": [
        "Proxy tags traffic with correlation metadata and records previews plus decisions for audit.",
        "Default posture keeps outbound access public-only until leases expand scope."
      ],
      "docs": [
        {
          "path": "docs/architecture/egress_firewall.md"
        },
        {
          "path": "docs/guide/network_posture.md"
        }
      ]
    },
    {
      "id": "experiment_orchestrator",
      "name": "Experiment Orchestrator",
      "owner": "platform",
      "category": "Runtime",
      "description": "Provides first-class A/B/n and shadow experiments with assignment rules, per-variant budgets, and live deltas published to state views.",
      "scope": {
        "surface": "runtime",
        "audience": "operators",
        "layer": "orchestration",
        "maturity": "plan"
      },
      "depends": [
        "sse_json_patch_contract",
        "versioning_migration_backbone"
      ],
      "signals": [
        "experiment.started",
        "experiment.variant.chosen",
        "experiment.result",
        "experiment.completed",
        "experiment.activated"
      ],
      "interfaces": {
        "http": [
          "/state/experiments"
        ]
      },
      "docs": [
        {
          "path": "docs/architecture/experiment_orchestrator.md"
        }
      ],
      "notes": [
        "Budget-aware admission keeps trials auditable and contained.",
        "Logic Units Library surfaces inline performance deltas for operators."
      ]
    },
    {
      "id": "federated_clustering",
      "name": "Federated Clustering",
      "owner": "platform",
      "category": "Runtime",
      "description": "Home node with optional worker/broker roles share compute, filtered world diffs, and manifests while preserving single-node fast paths.",
      "scope": {
        "surface": "runtime",
        "audience": "operators",
        "layer": "infrastructure",
        "maturity": "plan"
      },
      "depends": [
        "identity_tenancy",
        "egress_firewall_ledger"
      ],
      "signals": [
        "cluster.node.advertise",
        "cluster.node.changed",
        "world.diff.rejected"
      ],
      "docs": [
        {
          "path": "docs/architecture/cluster_federation.md"
        }
      ],
      "notes": [
        "Invite-only federation with signed manifests and node identifiers for deterministic replay.",
        "Egress leases and budget guards meter contributions across nodes."
      ]
    },
    {
      "id": "identity_tenancy",
      "name": "Identity & Tenancy",
      "owner": "platform",
      "category": "Governance",
      "description": "Layered principals for User, Project, and AgentInstance scope capabilities, storage, caches, and logs to the narrowest owner.",
      "scope": {
        "surface": "workspace",
        "audience": "operators",
        "layer": "governance",
        "maturity": "beta"
      },
      "signals": [
        "policy.decision"
      ],
      "docs": [
        {
          "path": "docs/architecture/identity_tenancy.md"
        }
      ],
      "notes": [
        "Default action scope flows from AgentInstance up to Project to User only when necessary.",
        "Namespaced storage paths (`user://`, `project://`, `agent://`) align data placement with tenancy boundaries."
      ]
    },
    {
      "id": "lightweight_mitigations",
      "name": "Lightweight Mitigations",
      "owner": "platform",
      "category": "Security & Policy",
      "description": "Planned bundle of pragmatic safeguards: memory quarantine, project isolation, manifest pinning, hardened browsing, DNS guard, and accelerator hygiene.",
      "scope": {
        "surface": "runtime",
        "audience": "operators",
        "layer": "assurance",
        "maturity": "plan"
      },
      "depends": [
        "appsec_harness",
        "egress_firewall_ledger"
      ],
      "signals": [
        "memory.quarantined",
        "world.diff.queued",
        "world.diff.rejected"
      ],
      "docs": [
        {
          "path": "docs/architecture/lightweight_mitigations.md"
        }
      ],
      "notes": [
        "Security postures (Relaxed/Standard/Strict) gate risky automation and highlight review queues.",
        "Instrumented events cover quarantine, manifests, secrets hygiene, and network anomalies."
      ]
    },
    {
      "id": "memory_abstraction_layer",
      "feature_id": "memory_atlas",
      "name": "Memory Abstraction Layer & Memory Atlas",
      "owner": "platform",
      "category": "Runtime",
      "description": "Memory overlay service on top of the MAL schema that exposes `memory.*` actions, hybrid recall, and explainable context packs for every agent.",
      "scope": {
        "surface": "runtime",
        "audience": "developers",
        "layer": "data plane",
        "maturity": "plan"
      },
      "signals": [
        "memory.item.upserted",
        "memory.item.expired",
        "memory.pack.journaled"
      ],
      "interfaces": {
        "http": [
          "POST /actions (memory.upsert)",
          "POST /actions (memory.search)",
          "POST /actions (memory.pack)",
          "GET /state/memory",
          "GET /state/memory/recent"
        ],
        "storage": [
          "memory_items",
          "memory_vec",
          "memory_vec_map",
          "memory_keywords"
        ]
      },
      "notes": [
        "Lane-specific budgets, TTLs, and lifecycle policies keep the corpus explainable and auditable.",
        "Overlay actions now flow entirely through `/actions`; legacy `/memory/*` REST shims have been removed.",
        "Retrieval journaling captures scores/diversity decisions for working-set diagnostics."
      ],
      "docs": [
        {
          "path": "docs/architecture/memory_abstraction.md"
        },
        {
          "path": "docs/architecture/memory_lifecycle.md"
        },
        {
          "path": "docs/architecture/memory_overlay_service.md"
        }
      ]
    },
    {
      "id": "policy_gating_core",
      "feature_id": "policy_leases",
      "name": "Policy & Gating Core",
      "owner": "platform",
      "category": "Security & Policy",
      "description": "Central gating service with named keys, deny contracts, and capsule adoption so sensitive operations stay lease-gated and auditable across the runtime.",
      "scope": {
        "surface": "runtime",
        "audience": "operators",
        "layer": "guardrails",
        "maturity": "beta"
      },
      "signals": [
        "policy.decision",
        "policy.reloaded"
      ],
      "interfaces": {
        "config": [
          "configs/gating.toml",
          "ARW_GATING_DENY"
        ]
      },
      "storage": [
        "policy deny sets",
        "capsule leases"
      ],
      "notes": [
        "Merges boot denies, runtime contracts, and propagated capsules into a single guardrail surface.",
        "Ingress middleware validates admin tokens and optional capsules before routing requests."
      ],
      "docs": [
        {
          "path": "docs/GATING_KEYS.md"
        },
        {
          "path": "docs/guide/policy_permissions.md"
        },
        {
          "path": "crates/arw-core/src/gating.rs"
        }
      ]
    },
    {
      "id": "replay_observability_stack",
      "name": "Replay & Observability Stack",
      "owner": "platform",
      "category": "Runtime",
      "description": "Replay bundles pin models, tools, policies, and inputs so reruns compare outputs while telemetry aligns traces, metrics, and logs per corr_id.",
      "scope": {
        "surface": "runtime",
        "audience": "operators",
        "layer": "assurance",
        "maturity": "plan"
      },
      "depends": [
        "versioning_migration_backbone",
        "artifacts_provenance_cas"
      ],
      "signals": [
        "actions.completed",
        "probe.metrics"
      ],
      "docs": [
        {
          "path": "docs/architecture/replay_time_travel.md"
        },
        {
          "path": "docs/architecture/observability_otel.md"
        }
      ],
      "notes": [
        "Episode spans map to OpenTelemetry traces while respecting data governance redaction defaults.",
        "Policy denials and tool actions remain explainable across audits and migrations."
      ]
    },
    {
      "id": "runtime_layout_control_plane",
      "feature_id": "snappy_governor",
      "name": "Runtime Layout & Control Plane Priority",
      "owner": "platform",
      "category": "Runtime",
      "description": "Separates interactive control plane work from background tasks, prioritizing low-latency streaming of earliest useful work.",
      "scope": {
        "surface": "runtime",
        "audience": "developers",
        "layer": "infrastructure",
        "maturity": "beta"
      },
      "signals": [
        "snappy.notice",
        "snappy.detail"
      ],
      "notes": [
        "SSE with JSON Patch keeps updates under 150\u2013250\u202fms cadence while background work yields within loops.",
        "Systemd weights and queue separation preserve responsiveness for interactive workloads."
      ],
      "docs": [
        {
          "path": "docs/architecture/runtime_layout.md"
        },
        {
          "path": "docs/architecture/performance.md"
        }
      ]
    },
    {
      "id": "sse_json_patch_contract",
      "feature_id": "event_spine",
      "name": "SSE + JSON Patch Streaming Contract",
      "owner": "platform",
      "category": "Runtime",
      "description": "Defines the incremental streaming protocol that delivers RFC\u202f6902 patches over SSE with resume semantics and canonical topics.",
      "scope": {
        "surface": "runtime",
        "audience": "developers",
        "layer": "data plane",
        "maturity": "beta"
      },
      "depends": [
        "runtime_layout_control_plane"
      ],
      "signals": [
        "state.read.model.patch"
      ],
      "interfaces": {
        "http": [
          "GET /events"
        ],
        "query": [
          "?replay=",
          "Last-Event-ID"
        ]
      },
      "notes": [
        "Encourages clients to apply patches locally and rely on canonical topic constants shared across surfaces.",
        "Startup handshake provides resume hints so UI reconnects without fetching full snapshots."
      ],
      "docs": [
        {
          "path": "docs/architecture/sse_patch_contract.md"
        }
      ]
    },
    {
      "id": "scheduler_governor",
      "name": "Scheduler & Governor",
      "owner": "platform",
      "category": "Runtime",
      "description": "Runtime governor enforces fair queues, preemption, and kill-switches per device or project so workloads degrade gracefully.",
      "scope": {
        "surface": "runtime",
        "audience": "operators",
        "layer": "infrastructure",
        "maturity": "plan"
      },
      "depends": [
        "runtime_layout_control_plane",
        "capability_consent_ledger"
      ],
      "signals": [
        "governor.changed",
        "actions.running",
        "actions.completed",
        "actions.failed"
      ],
      "docs": [
        {
          "path": "docs/architecture/scheduler_governor.md"
        },
        {
          "path": "docs/architecture/scheduling_backpressure.md"
        }
      ],
      "notes": [
        "Honors GPU/sandbox caps and capability leases before admitting work.",
        "Publishes throughput and health data via `/state/runtime_matrix` for scheduling hints."
      ]
    },
    {
      "id": "self_model",
      "feature_id": "self_card",
      "name": "Self-Model (Metacognition)",
      "owner": "platform",
      "category": "Runtime",
      "description": "Scoped self-model capturing identity, capabilities, competence, calibration, and resource curves to drive transparent planning and abstain/escalate behavior.",
      "scope": {
        "surface": "runtime",
        "audience": "operators",
        "layer": "orchestration",
        "maturity": "plan"
      },
      "depends": [
        "sse_json_patch_contract",
        "policy_gating_core"
      ],
      "signals": [
        "self.model.proposed",
        "self.model.updated"
      ],
      "interfaces": {
        "http": [
          "GET /state/self",
          "GET /state/self/:agent",
          "POST /admin/self_model/propose",
          "POST /admin/self_model/apply"
        ]
      },
      "storage": [
        "<state>/self/{agent}.json"
      ],
      "notes": [
        "Keeps evaluation metrics (calibration, risk\u2013coverage, competence) tied to agent decisions.",
        "Proposals require human approval for scope changes and cite provenance for replay."
      ],
      "docs": [
        {
          "path": "docs/architecture/self_model.md"
        }
      ]
    },
    {
      "id": "supply_chain_trust",
      "name": "Supply-Chain Trust",
      "owner": "platform",
      "category": "Security & Policy",
      "description": "Signed artifacts, manifests, and SBOMs feed sandboxed execution with provenance tracking to anchor plugin and model integrity.",
      "scope": {
        "surface": "build",
        "audience": "operators",
        "layer": "assurance",
        "maturity": "plan"
      },
      "docs": [
        {
          "path": "docs/architecture/supply_chain_trust.md"
        },
        {
          "path": "docs/developer/ci.md"
        }
      ],
      "notes": [
        "Trust stores for issuers/keys back verification workflows.",
        "Desktop clients map OS-level capability prompts to ARW policies to avoid privilege escalation."
      ],
      "signals": []
    },
    {
      "id": "ui_screenshot_tools",
      "feature_id": "screenshot_pipeline",
      "name": "UI Screenshot Tools",
      "owner": "platform",
      "category": "UX",
      "description": "Capture, annotate, and OCR tools return screenshot metadata, enforce io:screenshot/io:ocr leases, and publish gallery events for UI workflows.",
      "scope": {
        "surface": "runtime",
        "audience": "operators",
        "layer": "experience",
        "maturity": "beta"
      },
      "depends": [
        "policy_gating_core"
      ],
      "signals": [
        "screenshots.captured"
      ],
      "interfaces": {
        "tools": [
          "ui.screenshot.capture",
          "ui.screenshot.annotate_burn",
          "ui.screenshot.ocr"
        ],
        "storage": [
          ".arw/screenshots/YYYY/MM/DD/"
        ]
      },
      "notes": [
        "Launcher integrations trigger captures and render previews with annotate/OCR quick actions.",
        "Lease gating keeps capture and OCR auditable with Activity lane telemetry."
      ],
      "docs": [
        {
          "path": "docs/architecture/screenshot_capture_pipeline.md"
        },
        {
          "path": "docs/guide/screenshots.md"
        }
      ]
    },
    {
      "id": "unified_object_graph",
      "feature_id": "project_map",
      "name": "Unified Object Graph & Event Stream",
      "owner": "platform",
      "category": "Runtime",
      "description": "Shared object graph and SSE event stream keep Project Hub, Chat, Training Park, and manager views consistent across inventories and live updates.",
      "scope": {
        "surface": "ui",
        "audience": "operators",
        "layer": "data plane",
        "maturity": "beta"
      },
      "depends": [
        "sse_json_patch_contract",
        "runtime_layout_control_plane"
      ],
      "signals": [
        "episodes.*",
        "tools.*",
        "policy.*",
        "models.*"
      ],
      "notes": [
        "`GET /events` streams with corr_id stitching keep timelines authoritative.",
        "Manager views edit global inventories while projects and agents reference them via scoped belief graphs."
      ],
      "docs": [
        {
          "path": "docs/architecture/object_graph.md"
        }
      ]
    },
    {
      "id": "versioning_migration_backbone",
      "name": "Versioning & Migration Backbone",
      "owner": "platform",
      "category": "Runtime",
      "description": "Add-only versioning for prompts, recipes, policies, flows, and tool schemas so operational changes remain traceable and reversible.",
      "scope": {
        "surface": "runtime",
        "audience": "operators",
        "layer": "configuration",
        "maturity": "beta"
      },
      "signals": [
        "logic.unit.installed",
        "logic.unit.applied",
        "logic.unit.reverted"
      ],
      "docs": [
        {
          "path": "docs/architecture/versioning_migration.md"
        }
      ],
      "notes": [
        "Episodes capture effective configs (model hash, tool versions, policies, seeds) for deterministic replay.",
        "Migrations stay additive with published deprecation windows to avoid breaking deployed logic units."
      ]
    }
  ]
}
