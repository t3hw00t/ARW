{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Agents Running Wild (ARW)","text":"<p>ARW is a lightweight, local agent service and CLI. It focuses on beauty, harmony, and safe performance: clean lines, subtle interactions, and responsive behavior.</p> <p>What you can expect - Simple, local-first service with a small, friendly UI. - Tools registered via a macro and discovered at runtime. - Clear packaging and portable state for easy sharing.</p> <p>Start with Quickstart to run the service, then explore the features and deployment notes. You can also build and run the Desktop Launcher for an integrated tray + windows UI. When you\u2019re ready to dive deeper, the Developer section explains the workspace and CI.</p> <p>Tip: If you\u2019re just trying ARW, the default paths are portable. You can switch between portable and system mode with a single environment variable.</p>"},{"location":"API_AND_SCHEMA/","title":"API and Schema","text":"<p>Agents running wild \u2014 API, Schema &amp; Structured Function Calls Updated: 2025-09-06.</p> <p>GOALS</p> <p>Single source of truth for operations (tools), HTTP/WS APIs, MCP tools and docs.</p> <p>JSON Schema 2020-12 for all inputs/outputs/errors.</p> <p>Auto-generation of OpenAPI 3.1 (HTTP), AsyncAPI 2.x (events), MCP tool catalogs.</p> <p>Backward-compatible evolution, RFC 7807 error taxonomy, doc-tests.</p> <p>FOUNDATIONS</p> <p>JSON Schema 2020-12; OpenAPI 3.1; AsyncAPI 2.x.</p> <p>RFC 7807 Problem Details errors.</p> <p>W3C Trace Context + OpenTelemetry.</p> <p>UI cross\u2011reference - In the Debug UI (<code>/debug</code>, set <code>ARW_DEBUG=1</code>), the Tools panel exercises example tools and shows emitted <code>Tool.Ran</code> events. - Click the small \u201c?\u201d next to Tools for a tip and a link back to this page.</p> <p>DIRECTORIES /spec/</p> <p>openapi.yaml</p> <p>asyncapi.yaml</p> <p>mcp-tools.json</p> <p>schemas/ (per operation &amp; model, generated)</p> <p>OPERATIONS</p> <p>OperationId = \"@\" (e.g., memory.probe@1.0.0) <p>Each operation declares: Input, Output, Error types; capabilities; stability (stable/experimental/deprecated).</p> <p>DECLARATION STYLE (Rust)</p> <p>New endpoints (introspection &amp; feedback) - <code>GET /introspect/stats</code>: returns event totals and per\u2011route metrics (hits, errors, EWMA, last/max ms). - <code>POST /feedback/signal</code>: record a signal <code>{ kind, target, confidence, severity, note }</code>. - <code>POST /feedback/analyze</code>: produce suggestions from signals and stats. - <code>POST /feedback/apply</code>: apply a suggestion <code>{ id }</code> (updates hints/profile/memory limit conservatively). - <code>GET /feedback/state</code>: feedback state (signals, suggestions, auto_apply). - <code>POST /feedback/auto</code>: toggle <code>auto_apply</code>. - <code>POST /feedback/reset</code>: clear signals &amp; suggestions.</p> <p>Security notes - Sensitive endpoints are gated; see Developer Security Notes.</p>"},{"location":"API_AND_SCHEMA/#arw_tool-macro-derives-schemas-tool-impl-registry-entry-mcp-metadata","title":"[arw_tool] macro derives Schemas, Tool impl, registry entry, MCP metadata.","text":"<p>Validate input \u2192 policy check \u2192 invoke \u2192 emit events \u2192 return.</p> <p>HTTP &amp; WS SURFACE</p> <p>GET /introspect/tools</p> <p>GET /introspect/schemas/{tool_id}</p> <p>POST /tools/{tool_id}:invoke</p> <p>GET /probe?task_id=...&amp;step=...</p> <p>WS /events</p> <p>GET /spec/openapi.yaml</p> <p>GET /spec/asyncapi.yaml</p> <p>GET /spec/mcp-tools.json</p> <p>CONNECTIONS (new)</p> <p>GET /connectors \u2014 list available connector types/providers</p> <p>POST /connectors/register \u2014 add/register a custom connector (policy-gated)</p> <p>GET /connections \u2014 list connections in the registry</p> <p>POST /connections \u2014 create a connection (disabled by default, optional dry-run)</p> <p>GET /connections/{id}</p> <p>PATCH /connections/{id} \u2014 update tuning (rate limit, retry, QoS, notes)</p> <p>POST /connections/{id}/toggle \u2014 enable/disable</p> <p>POST /connections/{id}/test \u2014 active health check + trace</p> <p>POST /connections/{id}/set-policy \u2014 bind a policy id</p> <p>POST /connections/{id}/bind-secret \u2014 bind auth/secret reference</p> <p>DELETE /connections/{id}</p> <p>GET /links \u2014 list active links (connection \u2194 service bindings)</p> <p>POST /links \u2014 create a link (policy checked), optional auto-enable</p> <p>DELETE /links/{id}</p> <p>EVENTS (AsyncAPI)</p> <p>Versioned event types; include time, task_id, span_id, severity.</p> <p>Connections: ConnectionAdded, ConnectionUpdated, ConnectionRemoved, ConnectionPolicyChanged, ConnectionSecretBound</p> <p>Links: LinkUp, LinkDown, LinkHealthChanged, RateLimitHit, BackoffApplied</p> <p>MCP BRIDGE</p> <p>All registered tools appear to MCP clients with the same ids and schemas.</p> <p>Admin MCP tools for connections: conn.list, conn.create, conn.update, conn.toggle, conn.test.</p> <p>PAGINATION &amp; IDS</p> <p>UUID v4 ids; cursors are base64url tokens. Consistent Page helpers in arw-protocol. <p>ERRORS (Problem Details)</p> <p>{ type, title, status, detail, instance, trace_id, code }</p> <p>Codes include: validation_failed, policy_denied, timeout, not_found, conflict, unavailable, rate_limited, internal_error.</p> <p>SCHEMAS (high level)</p> <p>Connector: { id, kind (http|ws|mcp|local), name, capabilities[], version }</p> <p>Connection: { id, connectorId, target, status (disabled|enabled|error|healthy|degraded), rateLimit, concurrency, retry, backoff, qos, policyId, secretRef, tags[], notes, createdAt, updatedAt }</p> <p>Link: { id, connectionId, serviceId, status, health { ok, latencyMs, errors[] }, createdAt, updatedAt }</p> <p>DOC PIPELINE (CI)</p> <p>arw-docgen aggregates registries \u2192 generates /spec artifacts.</p> <p>Doc-tests execute embedded examples against a local test server.</p> <p>Schema compatibility guard enforces semver bumps on breaking changes.</p> <p>Generated specs are authoritative; sample clients from OpenAPI must compile and pass doc\u2011tests in CI.</p> <p>DEPRECATION</p> <p>stability=deprecated; maintain \u22652 minor releases; emit Deprecation header with link.</p> <p>EXTENSIBILITY</p> <p>Third-party plugins (Rust or WASI) use #[arw_tool]; once linked, they appear in all surfaces (policy-gated).</p>"},{"location":"CLUSTERING/","title":"CLUSTERING","text":"<p>ARW Clustering &amp; Connectors (MVP -&gt; Medium Depth) Updated: 2025-09-10</p> <ul> <li>Default behavior remains single-process using a local in-memory queue and event bus.</li> <li>Medium-depth scale-out uses a pluggable Queue and Bus abstraction with NATS JetStream as the recommended backend.</li> </ul> <p>Why NATS - Simple operational model, low latency, at-least-once with durable consumer groups. - Built-in discovery and clustering; easy to add nodes (\u201cconnect a second\u201d). - Good bridgeability to edge environments and compatible with future p2p overlays. - Can co-exist with Bitcoin ecosystem tooling; we can bridge ZMQ publishers from <code>bitcoind</code> into NATS subjects for event-driven workflows.</p> <p>Bitcoin/Blockchain alignment - Identity: leverage secp256k1 keys (Lightning/Bitcoin-style) for mTLS/Noise handshakes between cores and connectors. - Event ingress: optional ZeroMQ adapter to consume <code>bitcoind</code> notifications, republish into Bus/Queue. - Provenance: sign connector binaries/plugins with Sigstore; attestments can be anchored or mirrored alongside Bitcoin timestamping services if desired.</p> <p>MVP in this repo - <code>arw-core::orchestrator</code>: Task model, LocalQueue with leases, and Orchestrator fa\u00e7ade. - <code>arw-events</code>: EventBus trait with LocalBus; fa\u00e7ade <code>Bus</code> keeps existing SSE endpoints working. - <code>arw-protocol</code>: <code>ConnectorHello</code>, <code>ConnectorHeartbeat</code> types. - <code>arw-svc</code>: new <code>/tasks/enqueue</code> (debug/admin-gated) and a local background worker to execute minimal built-in tools via the queue. - Inbound NATS\u2192local bus aggregator so /events can unify cross-node events without loops.</p> <p>Config (configs/default.toml)</p> <pre><code>[cluster]\nenabled = false\nbus = \"local\"   # or \"nats\" (feature: arw-core/nats)\nqueue = \"local\" # or \"nats\" (feature: arw-core/nats)\n# nats_url = \"nats://127.0.0.1:4222\"\n</code></pre> <p>Next steps - Implement JetStream durable queues with consumer groups and ack/nack/delay semantics. - Add outbound NATS relay (loop-safe) when needed for cross-node fan-out. - Define connector control-plane (gRPC/QUIC) for Hello/Heartbeat/Assignment. - Optional ZMQ bridge for Bitcoin Core notifications -&gt; Bus/Queue.</p>"},{"location":"DEPLOYMENT/","title":"ARW Deployment &amp; Isolation Guide","text":"<p>Updated: 2025-09-06</p>"},{"location":"DEPLOYMENT/#goals","title":"Goals","text":"<p>Run ARW as unintrusively as possible: - Per\u2011user, self\u2011contained installs - No admin rights required for core flows - No background services by default - Clean removal (portable mode)</p>"},{"location":"DEPLOYMENT/#modes","title":"Modes","text":""},{"location":"DEPLOYMENT/#1-native-usermode-recommended","title":"1) Native user\u2011mode (recommended)","text":"<ul> <li>Best access to GPU/NPU via DirectML/CUDA/ROCm/CoreML/OpenVINO where available.</li> <li>Install ARW in a user folder (e.g., <code>%USERPROFILE%\\arw</code>) and enable portable mode in config.</li> </ul>"},{"location":"DEPLOYMENT/#2-windows-sandbox-wsb","title":"2) Windows Sandbox (.wsb)","text":"<ul> <li>Ephemeral VM; resets after close.</li> <li>Use <code>sandbox/ARW.wsb</code> to map your project folder inside. Accelerator availability may be limited.</li> <li>Good for trials and risky experiments; less ideal for heavy local acceleration.</li> </ul>"},{"location":"DEPLOYMENT/#3-wsl2-full-vms","title":"3) WSL2 / Full VMs","text":"<ul> <li>Useful for Linux tooling; accelerator pass\u2011through depends on vendor/runtime.</li> <li>ARW will fallback to CPU automatically if accelerators are not accessible.</li> </ul>"},{"location":"DEPLOYMENT/#portable-mode","title":"Portable Mode","text":"<p>Set in <code>configs/default.toml</code>:</p> <pre><code>[runtime]\nportable = true\nstate_dir = \"%LOCALAPPDATA%/arw\"\ncache_dir = \"%LOCALAPPDATA%/arw/cache\"\nlogs_dir  = \"%LOCALAPPDATA%/arw/logs\"\n</code></pre> <p>You can override with <code>ARW_PORTABLE=1</code> env var, or set <code>state_dir</code> to a path inside the app folder for a single\u2011directory portable bundle.</p>"},{"location":"DEPLOYMENT/#filesystem-registry","title":"Filesystem &amp; Registry","text":"<ul> <li>ARW does not change system PATH or registry unless you explicitly run an installer that does so.</li> <li>Tauri apps (Launcher/Debug UI/Model Manager) ship as per\u2011user apps with no admin rights by default.</li> </ul>"},{"location":"DEPLOYMENT/#uninstall","title":"Uninstall","text":"<ul> <li>In portable mode: delete the ARW folder.</li> <li>Otherwise: remove <code>%LOCALAPPDATA%\\arw</code> state directory and app directories under <code>%LOCALAPPDATA%\\Programs</code> if present.</li> </ul>"},{"location":"DEPLOYMENT/#security-policy","title":"Security &amp; Policy","text":"<ul> <li>Outbound network calls respect policy allowlists.</li> <li>Tools declare permission manifests; users grant consent per capability.</li> <li>Logs/telemetry default to local; exporting to OpenTelemetry is opt\u2011in.</li> </ul>"},{"location":"DEPLOYMENT/#known-constraints","title":"Known Constraints","text":"<ul> <li>Virtualized environments can restrict GPU/NPU access.</li> <li>Some vendor accelerators require host\u2011level drivers; ARW degrades gracefully to CPU.</li> </ul>"},{"location":"DEPLOYMENT/#tauri-launcher-desktop-ui-prerequisites","title":"Tauri Launcher (Desktop UI) Prerequisites","text":"<p>Tauri 2 apps use the system webview. On Linux, install these dev packages to build locally:</p> <ul> <li>Debian/Ubuntu: <code>sudo apt install -y libgtk-3-dev libwebkit2gtk-4.1-dev libjavascriptcoregtk-4.1-dev libsoup-3.0-dev</code></li> <li>Fedora: <code>sudo dnf install -y gtk3-devel webkit2gtk4.1-devel libsoup3-devel</code></li> <li>Arch: <code>sudo pacman -S --needed gtk3 webkit2gtk-4.1 libsoup3</code></li> </ul> <p>Alternatively use the project\u2019s Nix dev shell which includes the required libraries:</p> <pre><code>nix develop\n</code></pre>"},{"location":"FEATURES/","title":"Features","text":"<p>Agents running wild \u2014 Features and Tracks Updated: 2025-09-06. Revision: 2025-09-10 (cluster/gating/hierarchy updates)</p> <p>GOALS</p> <p>Free &amp; open universal agent interface/runtime with robust standards.</p> <p>Rust-first core; opt-in plugins; thin UIs &amp; integrations.</p> <p>CORE</p> <p>Interop: MCP (client/server), HTTP/WS (OpenAPI 3.1 + AsyncAPI).</p> <p>Observability: OpenTelemetry traces/logs/metrics; event bus (local + NATS inbound aggregator); notification routing.</p> <p>Gen\u2011AI semantic attributes (OTel) are feature\u2011flagged while the convention evolves.</p> <p>Security &amp; policy: Gating Orchestrator (central keys + deny contracts with role/node/tags/time/auto-renew), ingress/egress guards, Policy Capsules (propagatable); Regulatory Provenance Unit (planned) for signatures and ABAC adoption; OPA/Cedar; permission manifests; Sigstore releases; SBOM.</p> <p>Extensibility: Rust static plugins + WASI/WASM dynamic plugins.</p> <p>Agent runtime: orchestrator; pluggable Queue/Bus (local default; NATS queue groups; JetStream planned); tool protocol/adapters; selector UX/APIs for easy model/tool/profile switching; Run Capsules.</p> <p>Memory: layered design; Memory Lab for dataset complexity/logic/abstraction experiments; Live Probe; conditional training.</p> <p>Execution safety &amp; config: sandboxed file/network allowlists; profiles (performance/balanced/power-saver/custom); secrets.</p> <p>Browser module with citations; file loader/saver; logging/metrics.</p> <p>Hardware &amp; performance: robust capability discovery; governor w/ presets; CAS + model daemon for multi-actor concurrency.</p> <p>Connections: central connection registry with link policies, health checks, rate limits, QoS hints, secret binding, tracing, and audit. Hierarchy Orchestrator: roles (root/regional/edge/connector/observer), HTTP scaffolding for hello/offer/accept; topology events.</p> <p>PLUGINS (first\u2011party, optional)</p> <p>Search, Vision, Translation, Model Routing, Scheduler, Speech I/O.</p> <p>NPU/accelerator bridges via ONNX Runtime EPs.</p> <p>Image gen (Stable Diffusion, AUTOMATIC1111 API).</p> <p>GitHub integration, aider bridge.</p> <p>Desktop/WebPush notifications.</p> <p>Windows Command Palette integration (Win-only).</p> <p>Vector/IR adapters (FAISS, Parquet/Arrow).</p> <p>Vector backends beyond SQLite/Parquet are Phase 2 items.</p> <p>ADAPTERS</p> <p>llama.cpp (GGUF; CPU/GPU/NPU offload).</p> <p>ONNX Runtime (DirectML/CUDA/ROCm/OpenVINO/CoreML when present).</p> <p>OpenAI-compatible HTTP; optional vendor shims if installed.</p> <p>Notes: process\u2011mode first (e.g., llama.cpp server). Library\u2011mode later. Mandatory CPU fallback if accelerators are missing/unhealthy.</p> <p>INTERFACES &amp; INTEGRATIONS</p> <p>VS Code extension, Command Palette, aider CLI, GitHub, MCP bridges.</p> <p>COMPANION APPS (Rust)</p> <p>Launcher (Tauri): settings, templates, scheduler; system tray; notifications; single\u2011instance; window state; in\u2011app windows (Events SSE, Logs/stats) and Debug UI opener; optional OS login autostart.</p> <p>Debug UI (Tauri): event stream, probe overlays, training console, logs/metrics, graph, capsule replay.</p> <p>Model Manager (Tauri): browse/download/manage/convert/quantize models; profiles &amp; compatibility checks.</p> <p>Connection Manager (Tauri): discover, create, tune, and control connections/links between services (HTTP, WS, MCP, local tools). Features: enable/disable, profiles, rate limits and concurrency, retry/backoff, QoS hints, health checks, tracing, policy checks, dry-run tests, emergency cut-off.</p> <p>PROJECTS / WORKSTREAMS</p> <p>Core framework, Launcher, Debug UI, Model Manager, Connection Manager.</p> <p>Shopware 6 migration; Crypto/NEAR research; Command Palette feasibility; Local browsing with citations.</p>"},{"location":"GATING_KEYS/","title":"Gating Keys","text":"<p>Generated from code.</p> <ul> <li><code>queue:enqueue</code></li> <li><code>events:Task.Completed</code></li> <li><code>memory:get</code></li> <li><code>memory:save</code></li> <li><code>memory:load</code></li> <li><code>memory:apply</code></li> <li><code>memory:limit:get</code></li> <li><code>memory:limit:set</code></li> <li><code>models:list</code></li> <li><code>models:refresh</code></li> <li><code>models:save</code></li> <li><code>models:load</code></li> <li><code>models:add</code></li> <li><code>models:delete</code></li> <li><code>models:default:get</code></li> <li><code>models:default:set</code></li> <li><code>models:download</code></li> <li><code>feedback:state</code></li> <li><code>feedback:signal</code></li> <li><code>feedback:analyze</code></li> <li><code>feedback:apply</code></li> <li><code>feedback:auto</code></li> <li><code>feedback:reset</code></li> <li><code>tools:list</code></li> <li><code>tools:run</code></li> <li><code>chat:send</code></li> <li><code>chat:clear</code></li> <li><code>governor:set</code></li> <li><code>governor:hints:set</code></li> <li><code>hierarchy:hello</code></li> <li><code>hierarchy:offer</code></li> <li><code>hierarchy:accept</code></li> <li><code>hierarchy:state:get</code></li> <li><code>hierarchy:role:set</code></li> <li><code>introspect:tools</code></li> <li><code>introspect:schema</code></li> <li><code>introspect:stats</code></li> <li><code>introspect:probe</code></li> </ul>"},{"location":"HARDWARE_AND_MODELS/","title":"Hardware and Models","text":"<p>Agents running wild \u2014 Hardware, Models &amp; Performance Updated: 2025-09-06.</p> <p>OBJECTIVES</p> <p>Robust accelerator access (CPU/GPU/NPU) through open stacks.</p> <p>High-level performance vs. power presets with auto-tuning.</p> <p>Safe, concurrent model/file access for multiple actors.</p> <p>Model interoperability and automatic performance optimization.</p> <p>Dedicated Model Manager app for model lifecycle.</p> <p>HARDWARE CAPABILITIES (arw-hw)</p> <p>Probe devices, RAM/VRAM/bandwidth, dtypes (fp32/16/bf16/int8/4), driver/runtime versions, features.</p> <p>Emit normalized HwReport, publish to event bus, expose /hw/report + MCP tool hw.probe.</p> <p>ADAPTERS</p> <p>llama.cpp: GGUF models; configurable offload; KV cache strategies.</p> <p>ONNX Runtime: bridges DirectML/CUDA/ROCm/OpenVINO/CoreML when present; CPU fallback.</p> <p>Vendor shims optional (e.g., TensorRT*) if installed.</p> <p>If any accelerator path fails, the runtime must degrade to CPU and emit FallbackApplied events.</p> <p>GOVERNOR &amp; PRESETS (arw-governor)</p> <p>Profiles: performance, balanced, power-saver, custom.</p> <p>Controls: threads, batch, kv cache size/placement, offload %, speculative decoding, IO priority.</p> <p>Signals: battery %, thermals, utilization; Actions: live reconfig, pool scaling.</p> <p>Policy-bindable: e.g., deny high-power after 20:00.</p> <p>Note: where supported by the OS, network/disk IO priorities also apply to connectors/links managed by the Connection Manager.</p> <p>CONCURRENCY (arw-modeld + arw-cas)</p> <p>arw-modeld: centralized model loading; pooling, batching, leasing, QoS hints; HTTP/IPC control.</p> <p>arw-cas: content-addressable, mmapped read-only artifacts; atomic swaps; GC for unreferenced blobs.</p> <p>INTEROPERABILITY (arw-model-manifest)</p> <p>ModelManifest: name, version, license, arch, ctx window, tokenizer, formats (GGUF/ONNX/safetensors), quantizations, adapter compatibility, recommended presets.</p> <p>Compatibility solver selects best runtime given hardware; proposes fallbacks.</p> <p>MODEL MANAGER APP</p> <p>Discover/download with checksums &amp; resume; CAS import; manifest generation.</p> <p>Convert/quantize helpers with estimated perf/quality deltas.</p> <p>Apply profile (dry-run validation); detect conflicts and suggest alternatives.</p> <p>Export/import bundles for portability.</p> <p>AUTO-TUNE (arw-autotune)</p> <p>Bench representative tasks; search over threads/batch/kv/offload/quant/speculative decoding.</p> <p>Persist tuned profiles per device/model under /configs/presets/*.toml.</p> <p>SAFETY &amp; FALLBACKS</p> <p>Policy-gated hardware actions, timeouts/circuit-breakers.</p> <p>Graceful degradation to next-best adapter; events emitted for visibility.</p> <p>APIS &amp; EVENTS</p> <p>HTTP: /hw/report, /models, /models/{id}/manifest, /governor/profile; POST /models/{id}/load|apply-profile|convert|quantize; POST /autotune/run</p> <p>MCP tools: hw.probe, model.list, model.applyProfile, model.convert, model.load</p> <p>Events: HwDetected, ModelLoaded, PoolScaled, AutotuneStarted/Finished, GovernorChanged, Throttle, FallbackApplied</p>"},{"location":"HIERARCHY/","title":"HIERARCHY","text":"<p>Hierarchy Orchestrator (Design + MVP) Updated: 2025-09-10</p> <p>Goals - Allow cores to negotiate roles and relationships dynamically (root/regional/edge/connector/observer). - Keep the hot data plane decentralized (queue/bus) while the control plane is light. - Preserve single-node defaults; enable hierarchy via opt-in config.</p> <p>Model - Roles: Root, Regional, Edge, Connector, Observer. - Topology: a DAG where edges represent delegation/parenting (non-exclusive by default). - Epoch: monotonic counter incremented on local topology changes to resolve conflicts.</p> <p>Negotiation (protocol types in arw-protocol) - CoreHello(id, role, capabilities, scope_tags, epoch, nonce) - CoreOffer(from_id, proposed_role, parent_hint, shard_ranges, capacity_hint) - CoreAccept(child_id, parent_id, role, epoch)</p> <p>Gating &amp; Policy Capsules - All interactions can optionally carry a <code>GatingCapsule</code> via HTTP header <code>X-ARW-Gate</code>. - Capsules propagate immutable denies and deny contracts (role/node/tags/time windows; auto-renew) \u2014 ephemeral and renegotiated on restart. - Ingress/Egress Guards enforce policy at the beginning and end of action/memory stacks (e.g., <code>io:ingress:task.kind</code>, <code>io:egress:task.kind</code>).</p> <p>Regulatory Provenance Unit (planned) - Signature verification for capsules, trust store, ABAC policy (Cedar) for adoption, hop TTL and propagation scope, and an ephemeral adoption ledger.</p> <p>MVP in this repo - Local <code>arw-core::hierarchy</code> state, with APIs to get/set role and minimal parent/child links. - HTTP endpoints in <code>arw-svc</code>:   - GET /hierarchy/state \u2014 returns local state, emits Hierarchy.State   - POST /hierarchy/role { role } \u2014 sets role, emits Hierarchy.RoleChanged - AsyncAPI channels added: Hierarchy.RoleChanged, Hierarchy.State.</p> <p>Next steps - Control-plane transport: gRPC/QUIC for Hello/Offer/Accept with mTLS. - NATS-based discovery: subjects like arw.core.hello, arw.core.offer., arw.core.accept. (JetStream for durability). - Leader/lease: optional OpenRaft/etcd only for rare global operations; keep hot path queue-driven. - Policy: OPA/Cedar rules gate role changes, parent selection, shard assignments. <p>Bitcoin alignment - Identity: use secp256k1-derived identities for mutual auth (SPIFFE/SPIRE or Noise). - Event ingress: ZeroMQ bridge from bitcoind -&gt; NATS subjects; region roots filter/aggregate.</p>"},{"location":"INTERFACE_ROADMAP/","title":"INTERFACE ROADMAP","text":"<p>Agents Running Wild \u2014 Interface Roadmap Updated: 2025-09-07</p> <p>This roadmap consolidates user-facing interface concepts to guide a unified, accessible experience across the service, tray app, and debug tooling.</p> <p>Short-term (0\u20133 months) - Guided micro-tutorials for first-time features - Micro-satisfaction elements (light animations, haptic feedback) - Contextual tray actions with recent commands - Inline doc hints and contextual tooltips - Command palette/quick-action menu in tray app</p> <p>Medium-term (3\u20136 months) - Multi-modal input (voice, stylus, gesture) - Predictive autoflow suggestions - Progressive disclosure interface pattern - Tiled debug surface with rearrangeable panels - Live linting for macros and one-click tool sandboxing - Integrated monitoring/analytics modules - Voice/terminal parity for key commands</p> <p>Long-term (6+ months) - Timeline-based activity stream with timeline scrubber - Dynamic flow view and declarative recipe builder - Real-time collaboration cues and shareable debug sessions - Cross-device handoff of in-progress sessions - Minimal offline docs packaged with app - Inline node graph visualization of agent events - Comprehensive debug session export/import - Dynamic \"what-if\" runs branching from historical states</p>"},{"location":"MEMORY_AND_TRAINING/","title":"Memory and Training","text":"<p>Agents running wild \u2014 Memory, Live Feedback &amp; Conditional Training Updated: 2025-09-06.</p> <p>OBJECTIVE</p> <p>Memory is core, inspectable, and experimentable. Interactions show which memories are applied and why; training interactions can update deep/durable memory conditionally under policy.</p> <p>TERMS</p> <p>Entity: user, agent, tool, dataset, project, external service.</p> <p>Memory layers: ephemeral, episodic, semantic, procedural.</p> <p>Abstractions: summaries, exemplars, rules, graphs, embeddings, traces.</p> <p>Dataset: versioned collection of memory records with provenance &amp; policy tags.</p> <p>Capsule: reproducible run bundle (prompts, tool calls, versions, events).</p> <p>UI cross\u2011reference - In the Debug UI (<code>/debug</code>, set <code>ARW_DEBUG=1</code>), the Memory panel shows current memory and lets you apply, save, and load examples. - Click the small \u201c?\u201d help next to Memory for a quick tip and a link back to this page.</p> <p>LIVE MEMORY FEEDBACK (PROBE)</p> <p>Surfaces: CLI (--probe), Launcher panel, Debug UI overlay, VS Code peek.</p> <p>Shows: selection summary, why-explanations, provenance, policy state, deltas.</p> <p>Events: MemoryApplied, MemoryDelta, DatasetVersion (with trace/span ids).</p> <p>CONDITIONAL TRAINING</p> <p>Flow: TrainingRequest \u2192 policy/consent \u2192 TrainingPlan \u2192 commit \u2192 DatasetVersion \u2192 MemoryDelta.</p> <p>Guardrails: policy categories (PII/public), human approvals, tests &amp; regressions, size limits.</p> <p>Modes: append exemplars; revise summaries; graph edits; vector upserts; procedural rule changes.</p> <p>MEMORY LAB (EXPERIMENTATION)</p> <p>Controls: dataset size/complexity, abstraction strategies, retrieval recipes, rule logic toggles.</p> <p>Measures: latency, cost/tokens, accuracy, hallucination rate, stability.</p> <p>Outputs: JSON/CSV/Parquet reports; OTel metrics; Debug UI visualizations.</p> <p>DATA &amp; FORMATS</p> <p>MemoryRecord schema (JSON); TrainingRequest schema; versioned events (see /spec).</p> <p>APIS</p> <p>Probe: GET /probe; WS /events (subscribe to Memory*).</p> <p>Training: POST /training/requests; /approve; /commit; /revert.</p> <p>MCP tools for probe &amp; training mirror HTTP.</p> <p>INTERPLAY WITH HARDWARE &amp; GOVERNOR</p> <p>Probe/training emit/consume governor &amp; pool events (GovernorChanged, PoolScaled).</p> <p>Policy may deny deep updates under low-power profiles; capsules capture before/after probes.</p>"},{"location":"POLICY/","title":"POLICY","text":"<p>Policy, Gating, and Capsules Updated: 2025-09-10</p> <p>Single Source of Truth - Gate keys: <code>arw-core::gating_keys</code> \u2014 constants for all actions/streams; used across endpoints for enforcement and docgen. - Contract model: <code>arw-core::gating</code> \u2014 deny contracts with conditions (role/node/tags, time windows, auto-renew). Deny-wins and immutable within active window. - Policy Capsule: <code>arw-protocol::GatingCapsule</code> \u2014 wire format for propagating denies and contracts.</p> <p>Ingress/Egress Guards - Enforced at the start and end of processing:   - Ingress: <code>io:ingress:task.&lt;kind&gt;</code>, <code>io:ingress:tools.&lt;id&gt;</code>   - Egress: <code>io:egress:task.&lt;kind&gt;</code>, <code>io:egress:tools.&lt;id&gt;</code>, <code>io:egress:chat</code> - Purpose: personality safeguard \u2014 prevent disallowed info from entering context and prevent sensitive outputs from leaving.</p> <p>Capsule Adoption - Adopt via HTTP header <code>X-ARW-Gate: &lt;json&gt;</code> after passing admin rate-limit; header size limited (\u22644 KiB). - Adoption is ephemeral by default (renegotiated on restart). - Bus/Event: Envelope can carry an optional capsule; service does not auto-adopt from events by default.</p> <p>Trust &amp; Provenance (RPU) - Trust store json: <code>configs/trust_capsules.json</code> with entries <code>{id, alg, key_b64}</code>. - Supported alg: <code>ed25519</code>, <code>secp256k1</code>. Signature is a detached signature over the capsule JSON with <code>signature</code> field removed. - RPU verifies signature and applies minimal ABAC (TTL &gt; 0, issued_at sane, propagate in {none|children|peers|all}). - Future: integrate Cedar for full ABAC policies and Sigstore identities.</p> <p>Regulatory Provenance Unit (RPU) \u2014 Planned - Verify capsule signatures (ed25519/secp256k1; Sigstore later) against a trust store. - ABAC (Cedar) for adoption decisions (issuer/role/tags/node, TTL, scope). - Enforce hop TTL and <code>propagate</code> scope; relay only verified capsules. - Ephemeral adoption ledger (append-only; optional timestamp anchoring).</p> <p>Next Steps - Budgets/quotas with persisted counters (optional allow-with-budgets) \u2014 deny precedence. - Macro <code>#[arw_gate(\"key\")]</code> to annotate handlers; auto-enforce and docgen. - Generate <code>spec/schemas/gating.schema.json</code> and <code>docs/GATING_KEYS.md</code> from code.</p>"},{"location":"PROJECT_INSTRUCTIONS/","title":"PROJECT INSTRUCTIONS","text":"<p>Agents running wild \u2014 Project Instructions Updated: 2025-09-06.</p> <p>MISSION</p> <p>Build a free &amp; open, universal interface/runtime for intelligent agents.</p> <p>Favor robust, open, widely available standards over bespoke mechanisms.</p> <p>Keep low-level implementations and high-level features in harmony via single-source schemas.</p> <p>PRINCIPLES</p> <p>Openness: MCP (Model Context Protocol), OpenAPI 3.1, AsyncAPI, OpenTelemetry, OPA/Cedar policy, Sigstore, WASI.</p> <p>Performance with safety: Rust-first core, policy-gated capabilities, reproducible runs.</p> <p>Extensibility: static Rust plugins + dynamic WASI plugins; clear permission manifests.</p> <p>Reliability: schema validation, structured errors (RFC 7807), CI contract tests, signed releases.</p> <p>ARCHITECTURE OVERVIEW</p> <p>Core: orchestrator, selectors, memory system, event bus, schemas/specs, policy, OTel, governor, hardware probes, connection registry, lightweight feedback engine.</p> <p>Plugins: optional tools (search, vision, translation, routing, sched, speech, SD/A1111, GitHub, aider, notify, win-palette).</p> <p>Adapters: llama.cpp, ONNX Runtime (DirectML/CUDA/ROCm/OpenVINO/CoreML), OpenAI-compatible HTTP; vendor shims optional.</p> <p>Apps: CLI, Launcher (Tauri), Debug UI (Tauri), Model Manager (Tauri), Connection Manager (Tauri).</p> <p>Integrations: VS Code extension, GitHub webhooks, MCP client/server examples.</p> <p>Projects/Workstreams: live under /projects; do not couple to core.</p> <p>INTERFACES &amp; DOCS</p> <p>One source of truth: tool functions annotated with macros generate schemas + runtime + docs.</p> <p>Generated artifacts: /spec/openapi.yaml, /spec/asyncapi.yaml (event streams including Feedback.), /spec/mcp-tools.json, /spec/schemas/.json.</p> <p>Introspection endpoints expose tool catalogs and schemas at runtime.</p> <p>SECURITY &amp; POLICY</p> <p>Policy-first (OPA/Rego or Cedar): governs tools, data, network, training, governor profiles, and connection/link permissions.</p> <p>Permission manifests per tool. Signed releases (cosign). SBOM (SPDX/CycloneDX).</p> <p>MEMORY &amp; TRAINING</p> <p>Layered memory (ephemeral/episodic/semantic/procedural), pluggable stores.</p> <p>Live Memory Probe (visibility), conditional training with approvals, reproducible \u201cRun Capsules\u201d.</p> <p>HARDWARE &amp; PERFORMANCE</p> <p>arw-hw probes CPU/GPU/NPU + drivers/features; arw-governor applies performance/balanced/power-saver presets.</p> <p>arw-modeld provides pooled, concurrent model serving; arw-cas provides mmapped, content-addressable artifacts.</p> <p>arw-autotune benchmarks and writes tuned profiles per device/model.</p> <p>DEVELOPER WORKFLOW</p> <p>Define tools with #[arw_tool] (schema, runtime, docs from one function). Expose feedback evaluate/apply as tools for MCP/HTTP parity.</p> <p>Validate inputs \u2192 check policy \u2192 invoke \u2192 emit events \u2192 return structured results.</p> <p>Keep semver discipline on operation schemas; docs and clients are generated in CI.</p> <p>CONNECTION MANAGER (new companion app)</p> <p>Purpose: discover, create, tune, and control connections/links between services (HTTP, WebSocket, MCP, local tools).</p> <p>Controls: on/off toggles, profiles (strict/normal/lenient), rate limits and concurrency, retry/backoff, QoS hints.</p> <p>Security: bind auth/secrets, apply per-connection policy, audit changes.</p> <p>Diagnostics: health checks, latency/error charts, tracing links to OTel spans.</p> <p>Actions: quick test, dry-run policy check, emergency cut-off.</p>"},{"location":"ROADMAP/","title":"Roadmap","text":"<p>Agents Running Wild \u2014 Roadmap Updated: 2025-09-11 See Interface Roadmap for user-facing UI and tooling plans.</p> <p>Recently Shipped (Sep 2025) - Persistence hardening: atomic JSON/bytes writes with per\u2011path async locks; best\u2011effort cross\u2011process advisory locks; audit log rotation. - Event bus upgrades: counters (published/delivered/lagged/no_receivers), configurable capacity/replay, lag surfaced as <code>Bus.Gap</code>, subscribe\u2011filtered API, SSE replay and prefix filters, optional persistent JSONL journal with rotation, Prometheus <code>/metrics</code>. - Debug UI: metrics quick\u2011link, SSE presets (Replay 50, Models\u2011only), insights wired to route stats, download progress. - Tests + Lint: fixed flaky gating contract tests (serialized shared state); workspace clippy clean with <code>-D warnings</code>.</p> <p>Near\u2011term (Weeks) - Self\u2011learning UI polish: apply buttons per suggestion with rationale + confidence. - Persist hints/profile/suggestions to state; reload at startup; simple rollback. - Metrics polish: add p95 per route (light sliding window); highlight outliers in Insights. (done) - Models panel: download with progress; checksum verification; safe cancel; resume via HTTP Range. (done) - Security defaults: document token gating; add minimal rate\u2011limit for admin endpoints. (done) - Event journal reader endpoint (tail N); topic\u2011filtered consumers across workers/connectors. (next) - Remote access &amp; TLS (planning):   - Caddy production profile with Let's Encrypt (HTTP\u201101/DNS\u201101) for public domains.   - Dev TLS profiles: mkcert\u2011backed and internal (self\u2011signed) for localhost.   - Reverse\u2011proxy templates (nginx/caddy) with quick run/stop helpers (in progress for local).   - Secrets handling: persist admin tokens only to local env files by default; avoid committing to configs.   - UX: wizards to pick domain/email, validate DNS reachability, and dry\u2011run cert issuance. - Cluster MVP (done): pluggable Queue/Bus with local default; NATS queue groups; inbound NATS\u2192local bus aggregator. - Hierarchy foundation (done): local role/state + HTTP scaffolding for hello/offer/accept. - Gating Orchestrator (done): central keys, deny contracts (role/node/tags, time windows, auto-renew), ingress/egress guards. - Policy Capsules (done): wire format + header-based adoption (ephemeral, renegotiated on restart). - Docgen: gating keys listing + config schema and examples. - Docgen: surface route metrics/events in docs and status page. - Showcase readiness: polish docs, packaging, and installer paths.</p> <p>Heuristic Feedback Engine (Lightweight, Near\u2011Live) - Engine crate: <code>arw-feedback</code> (actor + O(1) stats + deltas via bus). - Signals: EWMA latency, decayed error rate, tiny P\u00b2 p95 per route; memory ring pressure; download stalls. - Evaluation: 250\u2013500 ms ticks with cooldowns and bounds; suggestions only (manual apply default). - State: snapshot published atomically; debounce persistence into <code>orchestration.json</code>; audit events. (done) - APIs: reuse existing <code>/feedback/*</code>; optional <code>/feedback/updates?since=</code> delta feed; expose evaluate/apply as tools. - Safety: bounded queues/maps; drop/sample on overload; rate\u2011limit auto\u2011apply (opt\u2011in later, policy\u2011gated).</p> <p>Mid\u2011term (1\u20132 Months) - UI app to manage various project types. - WASI plugin sandbox: capability\u2011based tools with explicit permissions. - Policy engine integration: Cedar bindings; per\u2011tool permission manifests. - Model orchestration: adapters (llama.cpp, ONNX Runtime) with pooling and profiles. - Capsules: record inputs/outputs/events/hints; export/import; deterministic replay. - Dataset &amp; memory lab: local pipelines, tags, audits, and reproducible reports. - Tests: feature\u2011gated HTTP oneshot tests; policy and capability contract tests. - AsyncAPI + MCP artifacts: generate <code>/spec/asyncapi.yaml</code> and <code>/spec/mcp-tools.json</code> in CI; serve <code>/spec/*</code> endpoints. - Policy hooks for feedback auto\u2011apply decisions (shadow mode \u2192 guarded auto). - Regulatory Provenance Unit (RPU): trust store, signature verification, Cedar ABAC for capsule adoption, hop TTL/propagation, adoption ledger (ephemeral by default). - JetStream durable queue backend with acks, delay/nack, and subject mapping (keep core NATS for fast lane). - Remote core connections (secure multi\u2011node):   - mTLS between nodes/connectors and a remote coordinator; certificate rotation strategy.   - NATS TLS profiles and client auth options for WAN clusters; local default remains plaintext loopback.   - Policy\u2011gated remote admin surface; proxy headers validation; optional IP allowlists. - Budgets/Quotas: optional allow-with-budgets with per-window counters persisted to state; deny precedence.</p> <p>Long\u2011term (3\u20136 Months) - Community training interface/simulation:   - Online opt\u2011in interface; privacy\u2011preserving local preprocessing.   - Metrics for \u201cinteraction quality\u201d (clarity, helpfulness, faithfulness, novelty).   - Value alignment via debate/consensus rounds; transparent rationale graphs.   - Weighted participation (democratic/liquid/interest\u2011group based). - Governance &amp; decision systems:   - Composable priorities; dynamic hierarchies; fairness and safety constraints.   - Argument mapping, counterfactual sandboxing, and policy proofs. - Research\u2011grade local stack:   - On\u2011device accel (CPU/GPU/NPU), quantization, LoRA fine\u2011tuning, model manifests.   - Artifact signing/verification, SBOMs, and dependency audits.   - Signed policy capsules with Sigstore; optional Bitcoin anchoring for timestamping (opt\u2011in; renegotiation on restart remains default).</p> <p>Guiding Principles - Local\u2011first, open, privacy\u2011respecting, and comprehensible. - Calm defaults; explicit opt\u2011in for power features. - One truth for schemas &amp; keys (central registry); reproducibility over hype.</p>"},{"location":"STRUCTURE/","title":"Structure","text":"<p>Agents Running Wild \u2014 Repository &amp; Workspace Structure Updated: 2025-09-07</p>"},{"location":"STRUCTURE/#principles","title":"Principles","text":"<p>Open protocols (MCP, OpenAPI, AsyncAPI), open observability (OTel), open policy (OPA/Cedar), open signing (Sigstore), portable plugins (WASI), hardware-first performance, safe concurrency.</p>"},{"location":"STRUCTURE/#component-categories","title":"Component Categories","text":"<ul> <li>System / Host: OS interfaces, hardware discovery, log and state directories.</li> <li>Core Project: workspace crates providing protocols, orchestration, telemetry, and CLI/service binaries.</li> <li>External Dependencies: third-party libraries (Tokio, Axum, Serde, tracing, etc.).</li> <li>Core Plugins: none shipped yet; reserved for built-in capabilities.</li> <li>Plugin Extensions: adapters or community plugins that may live under <code>crates/</code> in the future.</li> </ul>"},{"location":"STRUCTURE/#top-level-layout","title":"Top-Level Layout","text":"<pre><code>/              repo root\n\u251c\u2500 Cargo.toml  workspace manifest\n\u251c\u2500 README.md   project overview\n\u251c\u2500 docs/       guides, roadmap, and reference material\n\u251c\u2500 crates/     core Rust crates\n\u251c\u2500 apps/       binaries and services\n\u251c\u2500 scripts/    build and packaging helpers\n\u2514\u2500 configs/    default configuration files\n</code></pre>"},{"location":"STRUCTURE/#core-crates","title":"Core Crates","text":"<ul> <li><code>crates/arw-protocol</code> \u2013 request/response types and capability schemas.</li> <li><code>crates/arw-events</code> \u2013 event bus and tracing hooks.</li> <li><code>crates/arw-core</code> \u2013 orchestrator and runtime utilities.</li> <li><code>crates/arw-otel</code> \u2013 OpenTelemetry wiring.</li> <li><code>crates/arw-macros</code> \u2013 compile-time helpers and procedural macros.</li> </ul>"},{"location":"STRUCTURE/#apps","title":"Apps","text":"<ul> <li><code>apps/arw-cli</code> \u2013 command\u2011line interface for running and testing tools.</li> <li><code>apps/arw-svc</code> \u2013 user\u2011mode HTTP service with a minimal debug UI.</li> <li><code>apps/arw-launcher/src-tauri</code> \u2013 Tauri-based launcher (tray + windows: Events, Logs, Debug). Preferred cross\u2011platform companion app.</li> <li><code>apps/arw-tray</code> \u2013 legacy Rust tray (deprecated). Keep for reference; not built by default.</li> </ul>"},{"location":"STRUCTURE/#integration-crates","title":"Integration Crates","text":"<ul> <li><code>crates/arw-tauri</code> \u2013 shared glue for Tauri apps (service control, prefs, window openers).</li> </ul> <p>This structure keeps the project portable and highlights where future plugins or extensions can hook in.</p>"},{"location":"arrow_ingestion/","title":"Arrow2 Ingestion Prototype","text":"<p>A prototype module was added to <code>arw-core</code> demonstrating JSON ingestion with the <code>arrow2</code> crate. Two paths were compared:</p> <ul> <li><code>serde_json</code> parsing into native structs</li> <li><code>arrow2</code> conversion into columnar arrays</li> </ul>"},{"location":"arrow_ingestion/#benchmark","title":"Benchmark","text":"<pre><code>serde_json  time:   [68.095 \u00b5s 68.524 \u00b5s 68.968 \u00b5s]\narrow2      time:   [440.50 \u00b5s 443.06 \u00b5s 445.90 \u00b5s]\n</code></pre> <p>For 1,000 records, <code>arrow2</code> is ~6x slower than direct <code>serde_json</code> parsing. At this scale, arrow2 doesn't provide immediate performance benefits.</p>"},{"location":"arrow_ingestion/#recommendation","title":"Recommendation","text":"<p>Continue using existing serialization for now. Revisit <code>arrow2</code> once datasets grow larger or when columnar memory layouts are required for downstream analytics.</p>"},{"location":"training_research/","title":"Training Research Directions","text":"<p>This document outlines initial high-level training options and research ideas for the Agent Hub project.</p>"},{"location":"training_research/#goals","title":"Goals","text":"<ul> <li>Explore hardware-conscious training strategies.</li> <li>Investigate memory-layer interfaces and bus statistics for optimization.</li> <li>Design auto-tuning mechanisms that adapt to resource constraints.</li> </ul>"},{"location":"training_research/#high-level-training-options","title":"High-Level Training Options","text":"<ol> <li>Transfer Learning Pipelines: Provide templates for fine-tuning pre-trained models on new domains.</li> <li>Curriculum Learning Modules: Implement schedulers that gradually increase task difficulty.</li> <li>Distributed Training Hooks: Offer abstraction layers for multi-GPU or multi-node setups.</li> </ol>"},{"location":"training_research/#memory-layer-engagement","title":"Memory Layer Engagement","text":"<ul> <li>Implement pluggable memory modules with configurable retention policies.</li> <li>Track read/write patterns to inform memory pruning and caching strategies.</li> <li>Expose interfaces for collecting bus utilization metrics during training.</li> </ul>"},{"location":"training_research/#hardware-aware-auto-tuning","title":"Hardware-Aware Auto-Tuning","text":"<ul> <li>Profile GPU/CPU utilization and dynamically adjust batch sizes or precision.</li> <li>Experiment with mixed-precision and sparsity-aware kernels.</li> <li>Collect interface and bus statistics to guide bandwidth-friendly scheduling.</li> </ul>"},{"location":"wiki_structure/","title":"Wiki Structure Plan","text":"<p>This file proposes an initial structure for the GitHub wiki.</p>"},{"location":"wiki_structure/#suggested-pages","title":"Suggested Pages","text":"<ul> <li>Home: Overview and project goals.</li> <li>Getting Started: Environment setup, contribution guidelines.</li> <li>Training Research: Link to in-repo docs on training options and memory layer experiments.</li> <li>Hardware Metrics: Documentation of interface and bus statistics collection.</li> <li>Auto-Tuning Strategies: Guides for hardware-aware training and resource optimization.</li> <li>Changelog: Summary of major updates and milestones.</li> </ul> <p>Each page should be concise, link to relevant repo files, and stay synchronized with the main documentation.</p>"},{"location":"developer/","title":"Developer Guide","text":"<p>This workspace is designed to be clear and modular. Start with Structure for an overview of crates and apps. CI &amp; Releases explains how we validate changes and package artifacts.</p> <p>Key ideas - Single workspace with focused crates and clean boundaries. - Inventory-based tool registration via <code>#[arw_tool]</code>. - Observability ready: tracing everywhere, OTEL wiring optional.</p> <p>Useful commands</p> <pre><code>cargo install cargo-nextest\ncargo build --workspace --all-targets --locked\ncargo nextest run --workspace --locked\n</code></pre> <p>Rolling optimizations - Clippy- and fmt-gated CI keeps code quality high. - Release profiles enable thin LTO and tuned codegen units. - Docs build on CI validates that the user manual and dev docs stay in sync.</p> <p>Self\u2011knowledge &amp; feedback - Route metrics middleware records hits, errors, and EWMA latency. - The event bus feeds a small counter for live Insights. - Feedback layer collects signals, analyzes suggestions, and applies safe changes. - Sensitive endpoints are gated; see Security notes.</p>"},{"location":"developer/SECURITY/","title":"Security","text":"<p>Developer Security Notes Updated: 2025-09-07</p> <p>Surface - Bind: loopback only (127.0.0.1) by default. - Sensitive endpoints: gated by <code>ARW_DEBUG=1</code> or <code>X-ARW-Admin</code> header matching <code>ARW_ADMIN_TOKEN</code>. - CORS: permissive only if <code>ARW_DEBUG=1</code> or <code>ARW_CORS_ANY=1</code>; otherwise restrictive.</p> <p>Endpoints deemed sensitive - <code>/debug</code>, <code>/probe</code>, <code>/memory*</code>, <code>/models*</code>, <code>/governor*</code>, <code>/introspect*</code>, <code>/chat*</code>, <code>/feedback*</code>, <code>/events</code>, <code>/emit*</code>, <code>/shutdown</code>. - Adjust the list conservatively; prefer to over\u2011protect and open case\u2011by\u2011case.</p> <p>Recommendations - Development: set <code>ARW_DEBUG=1</code> locally; do not expose ports publicly. - Hardened usage: unset <code>ARW_DEBUG</code>, set <code>ARW_ADMIN_TOKEN</code>, require <code>X-ARW-Admin</code>. - Consider reverse proxy with TLS and IP allowlist if remote. - Keep hints/profile and suggestions in the state dir; avoid secrets in suggestions.</p> <p>Next - Rate\u2011limits for admin endpoints; structured audit events; optional signed capsules. - Policy engine (OPA/Cedar) for consistent, verifiable authorization.</p>"},{"location":"developer/ci/","title":"CI &amp; Releases","text":"<p>Continuous Integration - Build and test on Linux and Windows for every push and PR. - Lint and format checks keep changes tidy.</p> <p>Artifacts - Packaging scripts assemble a portable bundle with binaries and configs. - Windows and Linux bundles are uploaded as CI artifacts.</p> <p>Docs site - Docs are published to GitHub Pages from the <code>gh-pages</code> branch.</p> <p>Local helpers</p> <pre><code># Build &amp; test\nscripts/build.ps1\nscripts/test.ps1\n\n# Package bundle (release)\nscripts/package.ps1\n</code></pre> <p>Additional checks</p> <pre><code># Unused dependencies\nrustup toolchain install nightly --profile minimal\ncargo +nightly install cargo-udeps --locked\ncargo +nightly udeps --workspace --all-targets\n\n# Verify MSRV\ncargo install cargo-msrv --locked\ncargo msrv verify\n</code></pre>"},{"location":"developer/status/","title":"Workspace Status","text":"<p>Generated: 2025-09-11 16:29 UTC \\n\\n## Libraries\\n- arw-protocol: 0.1.0 \u2014 <code>/home/sevi/dev/github/arw/Agent_Hub/crates/arw-protocol/Cargo.toml</code> - arw-events: 0.1.0 \u2014 <code>/home/sevi/dev/github/arw/Agent_Hub/crates/arw-events/Cargo.toml</code> - arw-core: 0.1.0 \u2014 <code>/home/sevi/dev/github/arw/Agent_Hub/crates/arw-core/Cargo.toml</code> - arw-otel: 0.1.0 \u2014 <code>/home/sevi/dev/github/arw/Agent_Hub/crates/arw-otel/Cargo.toml</code> - arw-svc: 0.1.0 \u2014 <code>/home/sevi/dev/github/arw/Agent_Hub/apps/arw-svc/Cargo.toml</code> - arw-tauri: 0.1.0 \u2014 <code>/home/sevi/dev/github/arw/Agent_Hub/crates/arw-tauri/Cargo.toml</code>\\n\\n## Binaries\\n- arw-cli: 0.1.0 \u2014 <code>/home/sevi/dev/github/arw/Agent_Hub/apps/arw-cli/Cargo.toml</code> - arw-svc: 0.1.0 \u2014 <code>/home/sevi/dev/github/arw/Agent_Hub/apps/arw-svc/Cargo.toml</code> - arw-connector: 0.1.0 \u2014 <code>/home/sevi/dev/github/arw/Agent_Hub/apps/arw-connector/Cargo.toml</code> - arw-launcher: 0.1.0 \u2014 <code>/home/sevi/dev/github/arw/Agent_Hub/apps/arw-launcher/src-tauri/Cargo.toml</code>\\n</p>"},{"location":"developer/style/","title":"Style &amp; Harmony","text":"<p>We aim for a calm, precise experience. Keep visuals understated; let high-impact interactions shine.</p> <p>Guidelines - Clarity first: short sentences, mild technical terms. - Clean lines: avoid visual noise, favor whitespace. - Gentle emphasis: use callouts and bold sparingly. - Predictable rhythm: consistent headings, short sections, stable nav.</p> <p>Documentation tone - User docs are friendly and practical. - Developer docs are precise, with code pointers and commands. - Both avoid jargon unless it adds real value.</p> <p>Code style (high level) - Prefer explicit names over cleverness. - Keep modules small and responsibilities clear. - Instrument with tracing at boundaries and errors.</p>"},{"location":"developer/tasks/","title":"Tasks Status","text":"<p>Updated: 2025-09-11 16:29 UTC</p>"},{"location":"developer/tasks/#to-do","title":"To Do","text":"<ul> <li>[t-250909224103-0211] UI: near-live feedback in /debug \u2014 todo (updated: 2025-09-09 20:41:03 UTC)</li> <li>[t-250909224103-5251] Policy: hook feedback auto-apply \u2014 todo (updated: 2025-09-09 20:41:03 UTC)</li> <li>[t-250909224102-9629] Spec: AsyncAPI+MCP artifacts + /spec/* \u2014 todo (updated: 2025-09-09 20:41:02 UTC)</li> <li>[t-250909224102-8952] Plan: Heuristic engine crate + integration \u2014 todo (updated: 2025-09-09 20:41:02 UTC)</li> </ul>"},{"location":"developer/tasks/#in-progress","title":"In Progress","text":""},{"location":"developer/tasks/#paused","title":"Paused","text":""},{"location":"developer/tasks/#done","title":"Done","text":"<ul> <li>[t-250911040804-6168] Clippy: clean workspace with -D warnings \u2014 done (updated: 2025-09-11 02:08:05 UTC)<ul> <li>2025-09-11 02:08:05 UTC: events: while-let loop; otel: remove unused prelude import; core: remove duplicated cfg attribute; connector: avoid unreachable tail via ctrl-c guard; svc: explicit OpenOptions + no-op cast</li> </ul> </li> <li>[t-250911040745-3073] Tests: stabilize gating contract tests \u2014 done (updated: 2025-09-11 02:08:04 UTC)<ul> <li>2025-09-11 02:08:04 UTC: arw-core: gate tests now use #[serial]; fixed nondeterministic failure</li> </ul> </li> <li>[t-250909225652-0810] Gate arrow ingestion bench code \u2014 done (updated: 2025-09-09 20:56:52 UTC)</li> <li>[t-250909225652-5456] Start lightweight feedback engine \u2014 done (updated: 2025-09-09 20:56:52 UTC)</li> <li>[t-250909225652-1355] Serve /spec/* endpoints \u2014 done (updated: 2025-09-09 20:56:52 UTC)</li> <li>[t-250909225651-0602] Unify tools listing with registry \u2014 done (updated: 2025-09-09 20:56:52 UTC)</li> <li>[t-250909203713-3512] Fix workflows permissions + Windows start + CLI help \u2014 done (updated: 2025-09-09 18:37:13 UTC)</li> <li>[t-250909203713-1009] Create branch chore/structure-core-fixes \u2014 done (updated: 2025-09-09 18:37:13 UTC)</li> <li>[t-250909201532-3510] Tag release v0.1.1 and trigger dist \u2014 done (updated: 2025-09-09 18:15:32 UTC)<ul> <li>2025-09-09 18:15:32 UTC: pushed tag v0.1.1; GH Actions queued</li> </ul> </li> <li>[t-250909201215-6424] Tag release v0.1.0 and trigger dist \u2014 done (updated: 2025-09-09 18:12:15 UTC)<ul> <li>2025-09-09 18:12:15 UTC: pushed tag v0.1.0; GH Actions run started</li> </ul> </li> <li>[t-250909200355-9261] Publish artifacts on tags \u2014 done (updated: 2025-09-09 18:03:55 UTC)</li> <li>[t-250909200354-6386] Add Makefile mirroring Justfile \u2014 done (updated: 2025-09-09 18:03:55 UTC)</li> <li>[t-250909200354-9170] Enable wasm feature compile + test \u2014 done (updated: 2025-09-09 18:03:54 UTC)</li> <li>[t-250909195456-5087] Commit and push changes to main \u2014 done (updated: 2025-09-09 17:54:56 UTC)<ul> <li>2025-09-09 17:54:56 UTC: HEAD 3cd4819</li> </ul> </li> <li>[t-250909195456-7421] Add Justfile for common workflows \u2014 done (updated: 2025-09-09 17:54:56 UTC)</li> <li>[t-250909194935-4017] Lint and tests green \u2014 done (updated: 2025-09-09 17:49:35 UTC)</li> <li>[t-250909194935-6232] Format codebase (cargo fmt) \u2014 done (updated: 2025-09-09 17:49:35 UTC)</li> <li>[t-250909194935-0534] Refactor svc ext to use io/paths \u2014 done (updated: 2025-09-09 17:49:35 UTC)</li> <li>[t-250909193840-6168] Stabilize CI for tray + tests \u2014 done (updated: 2025-09-09 17:38:40 UTC)</li> <li>[t-250909193840-5994] Add mkdocs.yml config \u2014 done (updated: 2025-09-09 17:38:40 UTC)</li> <li>[t-250909181725-7338] Create portable dist bundle \u2014 done (updated: 2025-09-09 16:17:25 UTC)</li> <li>[t-250909170248-9575] Install GTK dev packages + build tray \u2014 done (updated: 2025-09-09 16:17:25 UTC)<ul> <li>2025-09-09 16:07:39 UTC: Attempted tray build; pkg-config missing gdk-3.0 (install libgtk-3-dev, ensure pkg-config finds .pc files)</li> </ul> </li> <li>2025-09-09 16:14:14 UTC: Linker error: -lxdo not found; install libxdo-dev</li> <li>2025-09-09 16:17:25 UTC: Tray built successfully with GTK+xdo</li> <li>[t-250909170247-4088] GitHub CLI login \u2014 done (updated: 2025-09-09 16:14:14 UTC)<ul> <li>2025-09-09 16:14:14 UTC: Not required (SSH-only auth to GitHub)</li> </ul> </li> <li>[t-250909180808-9579] Verify SSH git auth to GitHub \u2014 done (updated: 2025-09-09 16:08:08 UTC)</li> <li>[t-250909180730-7880] Add ARW_NO_TRAY to start.sh \u2014 done (updated: 2025-09-09 16:07:30 UTC)</li> <li>[t-250909170247-1457] Configure local git identity \u2014 done (updated: 2025-09-09 15:02:47 UTC)</li> <li>[t-250909170247-6008] Start service and verify /about \u2014 done (updated: 2025-09-09 15:02:47 UTC)</li> <li>[t-250909170247-6435] Configure Dependabot \u2014 done (updated: 2025-09-09 15:02:47 UTC)</li> <li>[t-250909170247-9910] Integrate tasks tracker with docs \u2014 done (updated: 2025-09-09 15:02:47 UTC)</li> </ul>"},{"location":"developer/windows-start-validation/","title":"Windows Start Script Validation","text":"<p>This checklist helps validate ARW startup on Windows after changes to <code>scripts/start.ps1</code> and the interactive menus.</p> <p>Quick pre-reqs - Install Rust toolchain (rustup): https://rustup.rs - Optional: build once <code>powershell -ExecutionPolicy Bypass -File scripts\\build.ps1</code></p> <p>Service + launcher (default) - Run: <code>powershell -ExecutionPolicy Bypass -File scripts\\interactive-start-windows.ps1</code> - Pick \u201cStart launcher + service\u201d. - Expect: no extra console window for the service (runs hidden), launcher appears with a system tray icon. - Check <code>.arw\\run\\arw-svc.pid</code> and <code>.arw\\logs\\arw-svc.out.log</code> exist. - Open: <code>http://127.0.0.1:8090/debug</code> and <code>.../spec</code>.   - Tip: The Start menu lets you toggle health wait (and timeout) under \u201cConfigure runtime\u201d.</p> <p>Service only (CLI) - Set <code>ARW_NO_TRAY=1</code> from the menu (or via environment) and start \u201cservice only\u201d. - Expect: service starts in background; PID/log file present when configured.</p> <p>Dist bundle - Package: <code>powershell -ExecutionPolicy Bypass -File scripts\\package.ps1</code> - Start with bundle: <code>powershell -ExecutionPolicy Bypass -File scripts\\start.ps1 -UseDist -WaitHealth</code> - Expect: service from <code>dist\\arw-...\\bin\\arw-svc.exe</code> and health check completes.</p> <p>NoBuild behavior - Remove or rename <code>target\\release\\arw-svc.exe</code>. - Run: <code>powershell -ExecutionPolicy Bypass -File scripts\\start.ps1 -NoBuild</code> - Expect: script errors out early with \u201cService binary not found and -NoBuild specified\u201d.</p> <p>Health check - Use <code>-WaitHealth -WaitHealthTimeoutSecs 20</code> to have the script poll <code>http://127.0.0.1:&lt;port&gt;/healthz</code> after starting in background. - Expect: info message \u201cHealth OK \u2026\u201d on success; warning if not ready within timeout.</p> <p>Preferences file - From the start menu, \u201cSave preferences\u201d. - Verify <code>./.arw/env.ps1</code> contains literal lines like <code>$env:ARW_PORT = '8090'</code> (not expanded values).</p> <p>Notes - The launcher is optional; use CLI-only mode or <code>ARW_NO_TRAY=1</code> to skip it. - For clean logs, delete <code>./.arw/logs/*</code> between runs.</p>"},{"location":"guide/METRICS_AND_INSIGHTS/","title":"METRICS AND INSIGHTS","text":"<p>Metrics &amp; Insights Updated: 2025-09-07</p> <p>Overview - ARW collects lightweight, privacy\u2011respecting metrics locally to help you tune and understand behavior. - Route metrics: hits, errors, EWMA latency, p95 latency, last/max latency, last status. - Event counters: totals by event kind from the in\u2011process event bus.</p> <p>Endpoints - GET <code>/introspect/stats</code> \u2192 <code>{ events, routes }</code> where <code>routes.by_path[\"/path\"]</code> has <code>hits</code>, <code>errors</code>, <code>ewma_ms</code>, <code>p95_ms</code>, <code>last_ms</code>, <code>max_ms</code>, <code>last_status</code>.</p> <p>UI - Open <code>/debug</code> and toggle \u201cInsights\u201d. - See Event totals and the top 3 routes by p95 latency (also shows EWMA and error counts). - Copy the JSON snapshot via \u201cCopy stats\u201d.</p> <p>Security - <code>/introspect/*</code> surfaces are gated by default; see Developer Security Notes.</p> <p>Tuning Tips - Use p95 to find outliers; EWMA helps watch short\u2011term drift. - Send a \u201clatency\u201d signal in the Self\u2011Learning panel targeting a hot route; Analyze; consider applying the suggested <code>http_timeout_secs</code>. - Consider switching to the \u201cbalanced\u201d profile during high error periods.</p>"},{"location":"guide/chat_backends/","title":"Chat Backends","text":"<p>The ARW debug Chat UI can use simple synthetic replies (echo/reverse/time) or call real model backends when configured.</p>"},{"location":"guide/chat_backends/#synthetic-default","title":"Synthetic (default)","text":"<p>Without configuration the Chat panel replies with: - echo \u2014 repeats your message - reverse \u2014 reverses your message - time \u2014 prefixes your message with the current timestamp</p> <p>This mode is useful for verifying the UI flow and events.</p>"},{"location":"guide/chat_backends/#llamacpp-server","title":"llama.cpp server","text":"<p>Run a local llama.cpp server and point ARW to it:</p> <pre><code>./server -m /path/to/model.gguf -c 4096 --host 127.0.0.1 --port 8080\nexport ARW_LLAMA_URL=http://127.0.0.1:8080\n</code></pre> <p>The service will POST to <code>ARW_LLAMA_URL/completion</code> with:</p> <pre><code>{ \"prompt\": \"...\", \"n_predict\": 128, \"temperature\": 0.7 }\n</code></pre> <p>If the server returns <code>{ \"content\": \"...\" }</code>, ARW uses it. It also supports an OpenAI-like <code>{ choices[0].message.content }</code> fallback shape.</p>"},{"location":"guide/chat_backends/#openai-compatible-api","title":"OpenAI-compatible API","text":"<p>If llama.cpp is not available, ARW can use an OpenAI-compatible Chat Completions API.</p> <p>Environment variables:</p> <ul> <li><code>ARW_OPENAI_API_KEY</code> (required)</li> <li><code>ARW_OPENAI_BASE_URL</code> (optional, default <code>https://api.openai.com</code>)</li> <li><code>ARW_OPENAI_MODEL</code> (optional, default <code>gpt-4o-mini</code>)</li> </ul> <p>Example:</p> <pre><code>export ARW_OPENAI_API_KEY=sk-...\nexport ARW_OPENAI_MODEL=gpt-4o-mini\n</code></pre> <p>Requests are sent to <code>POST {ARW_OPENAI_BASE_URL}/v1/chat/completions</code> with a body like:</p> <pre><code>{\n  \"model\": \"gpt-4o-mini\",\n  \"messages\": [ { \"role\": \"user\", \"content\": \"Hello\" } ],\n  \"temperature\": 0.7\n}\n</code></pre>"},{"location":"guide/chat_backends/#temperature","title":"Temperature","text":"<p><code>/chat/send</code> accepts an optional <code>temperature</code> value. The service includes it in the assistant message and passes it through to backends when set.</p>"},{"location":"guide/chat_backends/#ui","title":"UI","text":"<p>Open <code>/debug</code>, select a model (echo/reverse/time), set Temperature if desired, and Send. When a backend is configured, the response content comes from the backend; otherwise the synthetic reply is used.</p>"},{"location":"guide/design_system/","title":"Design System","text":"<p>This documents the subtle visual language used across ARW UIs: calm, instrument-panel inspired, with copper/teal accents.</p>"},{"location":"guide/design_system/#tokens","title":"Tokens","text":"<ul> <li>Colors</li> <li>Primary (copper): <code>#b87333</code> (light/dark: <code>#dca777</code>/<code>#915a29</code>)</li> <li>Accent (teal): <code>#1bb3a3</code></li> <li>Ink: <code>#111827</code> \u00b7 Muted: <code>#6b7280</code> \u00b7 Line: <code>#e5e7eb</code></li> <li> <p>Status: ok <code>#22c55e</code> \u00b7 warn <code>#f59e0b</code> \u00b7 bad <code>#ef4444</code></p> </li> <li> <p>Radii</p> </li> <li> <p>Panels: <code>10px</code> \u00b7 Buttons: <code>8px</code> \u00b7 Badges: <code>999px</code></p> </li> <li> <p>Components</p> </li> <li>Badges: pill with small dot indicator and muted backgrounds; ok/warn/bad variants.</li> <li>Panels: soft inset stroke and rounded corners; avoid strong shadows.</li> <li>Buttons: neutral surfaces with subtle hover; avoid heavy borders.</li> </ul>"},{"location":"guide/design_system/#usage","title":"Usage","text":"<ul> <li>Use neutral surfaces by default; reserve color for status and accents.</li> <li>Prefer compact dot badges for live state (Admin/SSE/Chat/Models/Memory/Governor).</li> <li>Avoid blinking or high-contrast flicker; transitions should be calm and brief.</li> <li>Keep layout steady; cluster related actions in \u201crows\u201d, keep rhythm consistent.</li> </ul>"},{"location":"guide/design_system/#examples","title":"Examples","text":"<ul> <li>Header badges showing SSE, Admin, Chat, Models, Memory, Governor.</li> <li>Box headers may include a minimal badge for local context (e.g., Memory limit).</li> </ul>"},{"location":"guide/feedback_engine/","title":"Feedback Engine (Lightweight, Near\u2011Live)","text":"<p>The feedback engine observes service events and route metrics to propose gentle tuning suggestions (e.g., HTTP timeout hints, memory ring size), without blocking request paths.</p> <p>Goals - Extremely light: constant memory, O(1) updates per event, periodic evaluation off the hot path. - Near\u2011live: publishes <code>Feedback.Suggested</code> every ~250\u2013500 ms when changes occur; UIs update via SSE. - Safe by default: suggestions only; applies are policy\u2011gated and rate\u2011limited.</p> <p>Runtime - Engine cadence: <code>ARW_FEEDBACK_TICK_MS</code> (ms) or <code>tick_ms</code> in <code>configs/feedback.toml</code> (default 500). - Suggestions include <code>id</code>, <code>action</code> (<code>hint</code>, <code>mem_limit</code>, <code>profile</code>), <code>params</code>, <code>rationale</code>, and <code>confidence</code>. - Live view: SSE <code>/events</code> with <code>Feedback.Suggested</code>, or <code>GET /feedback/suggestions</code>.</p> <p>Policy (guardrails) - Caps and bounds are merged from <code>configs/feedback.toml</code> and env vars:   - <code>ARW_FEEDBACK_APPLY_PER_HOUR</code> (default 3)   - <code>ARW_FEEDBACK_HTTP_TIMEOUT_MIN/MAX</code> (default 5..=300)   - <code>ARW_FEEDBACK_MEM_LIMIT_MIN/MAX</code> (default 50..=2000) - Effective policy: <code>GET /feedback/policy</code> returns the current values. - Applies are rejected with a clear reason if caps/bounds are exceeded.</p> <p>Config File: <code>configs/feedback.toml</code></p> <pre><code># tick_ms = 500\n# apply_per_hour = 3\n# http_timeout_min = 5\n# http_timeout_max = 300\n# mem_limit_min = 50\n# mem_limit_max = 2000\n</code></pre> <p>APIs - <code>GET /feedback/suggestions</code> \u2192 { version, suggestions } - <code>GET /feedback/updates?since=N</code> \u2192 204 if unchanged - <code>POST /feedback/apply</code> \u2192 { ok, reason? } (policy\u2011gated) - <code>GET /feedback/policy</code> \u2192 effective caps/bounds</p> <p>Specs - OpenAPI: <code>/spec/openapi.yaml</code> - AsyncAPI (events): <code>/spec/asyncapi.yaml</code> (includes Feedback.* channels) - MCP tools catalog: <code>/spec/mcp-tools.json</code></p> <p>UI (Debug) - Near\u2011live list with confidence badges and Apply buttons. - Policy bounds/caps displayed inline; toasts on success/failure.</p> <p>Notes - Keep <code>ARW_DEBUG=1</code> for local development; secure admin endpoints with <code>ARW_ADMIN_TOKEN</code> otherwise. - For heavy loads, the engine drops/samples events rather than blocking; consumers can resync via <code>GET /feedback/suggestions</code>.</p>"},{"location":"guide/launcher/","title":"Desktop Launcher (Tauri)","text":"<p>The ARW Launcher is a Tauri 2 desktop app that provides:</p> <ul> <li>System tray with Start/Stop Service, Open Debug UI, Events, Logs, Models (stub), Connections (stub).</li> <li>In\u2011app windows:</li> <li>Events: streams <code>/events</code> via SSE (Replay 50, optional filter)</li> <li>Logs: polls <code>/introspect/stats</code> and shows counters + raw JSON</li> <li>Debug UI opener: browser or embedded window</li> <li>Preferences: port, autostart service</li> <li>OS login autostart toggle</li> <li>Single\u2011instance, window\u2011state persistence, notifications on service status changes</li> </ul>"},{"location":"guide/launcher/#build-run","title":"Build &amp; Run","text":"<pre><code>just tauri-launcher-build\njust tauri-launcher-run\n</code></pre> <p>Linux prerequisites (WebKitGTK 4.1 + libsoup3):</p> <ul> <li>Debian/Ubuntu: <code>sudo apt install -y libgtk-3-dev libwebkit2gtk-4.1-dev libjavascriptcoregtk-4.1-dev libsoup-3.0-dev</code></li> <li>Fedora: <code>sudo dnf install -y gtk3-devel webkit2gtk4.1-devel libsoup3-devel</code></li> <li>Arch: <code>sudo pacman -S --needed gtk3 webkit2gtk-4.1 libsoup3</code></li> </ul> <p>Using Nix: <code>nix develop</code> (devShell includes required libraries).</p>"},{"location":"guide/launcher/#files-structure","title":"Files &amp; Structure","text":"<ul> <li>App: <code>apps/arw-launcher/src-tauri</code></li> <li>Shared glue: <code>crates/arw-tauri</code></li> <li>UI: <code>apps/arw-launcher/src-tauri/ui/</code> (<code>index.html</code>, <code>events.html</code>, <code>logs.html</code>)</li> <li>Icons: <code>apps/arw-launcher/src-tauri/icons/</code> (placeholder PNGs; replace with your branding)</li> <li>Regenerate icons following project colors: <code>./.venv/bin/python scripts/gen_icons.py</code></li> </ul>"},{"location":"guide/launcher/#notes","title":"Notes","text":"<ul> <li>The legacy Rust tray (<code>apps/arw-tray</code>) is deprecated and not built by default; the launcher replaces it.</li> <li>The launcher reads preferences from the user config dir (e.g., <code>~/.config/arw/prefs-launcher.json</code>).</li> </ul>"},{"location":"guide/models_download/","title":"Models Download (HTTP)","text":"<p>ARW provides HTTP endpoints to manage local models with streaming downloads, live progress via SSE, safe cancel, resume (HTTP Range), and optional SHA\u2011256 verification.</p>"},{"location":"guide/models_download/#endpoints","title":"Endpoints","text":"<ul> <li>POST <code>/models/download</code> \u2014 Start or resume a download.</li> <li>POST <code>/models/download/cancel</code> \u2014 Cancel an in\u2011flight download.</li> <li>GET  <code>/events</code> \u2014 Listen for <code>Models.DownloadProgress</code> events.</li> </ul>"},{"location":"guide/models_download/#request","title":"Request","text":"<p>POST /models/download</p> <p>Body:</p> <pre><code>{\n  \"id\": \"&lt;model-id&gt;\",\n  \"url\": \"https://.../model.gguf\",\n  \"provider\": \"local\",  // optional\n  \"sha256\": \"&lt;hex&gt;\"      // optional\n}\n</code></pre> <p>Behavior: - Creates a temporary file <code>{state_dir}/models/&lt;name&gt;.part</code> and appends chunks. - On completion, atomically renames to the final filename. - When <code>sha256</code> is provided, verifies the file and removes it on mismatch. - If a <code>.part</code> exists and the server supports HTTP Range, ARW resumes from the saved offset.</p>"},{"location":"guide/models_download/#cancel","title":"Cancel","text":"<p>POST /models/download/cancel</p> <pre><code>{ \"id\": \"&lt;model-id&gt;\" }\n</code></pre> <p>Cancels the active download and removes the partial <code>.part</code> file.</p>"},{"location":"guide/models_download/#progress-sse","title":"Progress (SSE)","text":"<p>Subscribe to <code>GET /events</code> and filter <code>Models.DownloadProgress</code> events. Examples:</p> <pre><code>{ \"id\": \"qwen2.5-coder-7b\", \"progress\": 42, \"downloaded\": 12345678, \"total\": 30000000 }\n{ \"id\": \"qwen2.5-coder-7b\", \"status\": \"resumed\", \"offset\": 102400 }\n{ \"id\": \"qwen2.5-coder-7b\", \"status\": \"complete\", \"file\": \"qwen.gguf\", \"provider\": \"local\" }\n{ \"id\": \"qwen2.5-coder-7b\", \"error\": \"checksum mismatch\", \"expected\": \"...\", \"actual\": \"...\" }\n{ \"id\": \"qwen2.5-coder-7b\", \"status\": \"canceled\" }\n</code></pre>"},{"location":"guide/models_download/#examples","title":"Examples","text":"<p>Start a download (with checksum):</p> <pre><code>curl -sS -X POST http://127.0.0.1:8090/models/download \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"id\":\"qwen2.5-coder-7b\",\"url\":\"https://example.com/qwen.gguf\",\"sha256\":\"&lt;hex&gt;\"}'\n</code></pre> <p>Cancel:</p> <pre><code>curl -sS -X POST http://127.0.0.1:8090/models/download/cancel \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"id\":\"qwen2.5-coder-7b\"}'\n</code></pre> <p>Resume: - Re-issue the same <code>POST /models/download</code> request. If the server honors <code>Range: bytes=&lt;offset&gt;-</code>, ARW resumes from the existing <code>.part</code> file.</p>"},{"location":"guide/models_download/#notes","title":"Notes","text":"<ul> <li>When <code>total</code> is unknown, events may omit it and include only <code>downloaded</code>.</li> <li>Errors surface in progress events; model list isn\u2019t updated on failure.</li> <li>State directory is shown in <code>GET /probe</code>.</li> </ul>"},{"location":"guide/projects_ui/","title":"Projects UI","text":"<p>The Projects UI gives you a simple, secure place to:</p> <ul> <li>Create projects under a local folder.</li> <li>Take free\u2011form notes per project (<code>NOTES.md</code>).</li> <li>Browse each project\u2019s folder tree (folders only; dotfiles hidden).</li> </ul>"},{"location":"guide/projects_ui/#enable-and-open","title":"Enable and open","text":"<ul> <li>Set <code>ARW_DEBUG=1</code> (or provide <code>X-ARW-Admin</code> when running in locked mode).</li> <li>Start <code>arw-svc</code> and open:</li> <li><code>http://127.0.0.1:8090/ui/projects</code></li> </ul> <p>All <code>/projects/*</code> endpoints are treated as administrative and are protected by the service\u2019s admin gate.</p>"},{"location":"guide/projects_ui/#storage","title":"Storage","text":"<ul> <li>Base directory: <code>ARW_PROJECTS_DIR</code> (env). If unset, defaults to <code>&lt;state_dir&gt;/projects</code>.</li> <li>Notes file: <code>&lt;project&gt;/NOTES.md</code> (plaintext/Markdown).</li> </ul>"},{"location":"guide/projects_ui/#api","title":"API","text":"<ul> <li><code>GET /projects/list</code> \u2192 <code>{ items: string[] }</code></li> <li><code>POST /projects/create</code> with <code>{ name }</code> \u2192 creates <code>&lt;project&gt;</code> and <code>NOTES.md</code></li> <li><code>GET /projects/notes?proj=&lt;name&gt;</code> \u2192 returns note text</li> <li><code>POST /projects/notes?proj=&lt;name&gt;</code> with body as <code>text/plain</code> \u2192 saves notes</li> <li><code>GET /projects/tree?proj=&lt;name&gt;&amp;path=&lt;relative&gt;</code> \u2192 <code>{ items: { name, dir, rel }[] }</code></li> </ul> <p>Notes</p> <ul> <li>Names are sanitized: letters, numbers, space, <code>-</code>, <code>_</code>, <code>.</code>; no leading dot.</li> <li>Tree listing hides dotfiles and directories outside the project root.</li> </ul>"},{"location":"guide/projects_ui/#events-for-agents","title":"Events for agents","text":"<p>To harmonize with orchestration and autonomous workers, the service emits:</p> <ul> <li><code>Projects.Created</code> with <code>{ name }</code></li> <li><code>Projects.NotesSaved</code> with <code>{ name }</code></li> </ul> <p>Agents can subscribe to <code>/events</code> and react to project lifecycle to train, plan, scaffold, or run checks.</p>"},{"location":"guide/quickstart/","title":"Quickstart","text":"<p>Prerequisites - Rust toolchain (<code>rustup</code>): https://rustup.rs</p> <p>Build and test</p> <pre><code>scripts/build.ps1\nscripts/test.ps1\n</code></pre> <pre><code>./scripts/build.sh\n./scripts/test.sh\n</code></pre> <p>Run the service</p> <pre><code># Default: http://127.0.0.1:8090\ntarget/release/arw-svc\n</code></pre> <p>Desktop launcher (optional) - Build: <code>just tauri-launcher-build</code> - Run: <code>just tauri-launcher-run</code> - Linux build deps (WebKitGTK 4.1 + libsoup3): <code>just tauri-deps-linux</code> or use <code>nix develop</code> - Features: system tray (Start/Stop/Open), Events (SSE), Logs, Debug UI opener, prefs &amp; autostart.</p> <p>Peek at what\u2019s available - Health: <code>GET /healthz</code> - Events (SSE): <code>GET /events</code> - Tools: <code>GET /introspect/tools</code> - Schemas: <code>GET /introspect/schemas/{id}</code> - Debug UI: open <code>/debug</code> (if provided by your build)</p> <p>Debug UI tips - Set <code>ARW_DEBUG=1</code> to enable the <code>/debug</code> page. - Look for small \u201c?\u201d icons beside sections. Click to see a gentle inline tip and a link to the matching docs page. - Set <code>ARW_DOCS_URL</code> (e.g., your GitHub Pages URL) so the \u201cDocs\u201d button in the header opens your hosted manual. - The Orchestration panel groups common actions (Probe, Emit test, Refresh models, Self\u2011tests, Shutdown) to streamline flows. - Profiles: use the profile picker (performance/balanced/power\u2011saver) to apply a runtime hint. Endpoint: <code>POST /governor/profile { name }</code>, check with <code>GET /governor/profile</code>. - When available locally, the docs can also be served at <code>/docs</code> (see Packaging notes).</p> <p>Self\u2011Learning panel - Send a signal (latency/errors/memory/cpu) with a target and confidence to record an observation. - Click \u201cAnalyze now\u201d to produce suggestions (e.g., increase http timeout, switch profile, raise memory limit mildly). - Apply a suggestion by id or toggle \u201cauto\u2011apply safe\u201d (for conservative changes). - The Insights overlay shows live event totals and the top 3 routes by EWMA latency.</p> <p>Security - Sensitive endpoints (<code>/debug</code>, <code>/probe</code>, <code>/memory*</code>, <code>/models*</code>, <code>/governor*</code>, <code>/introspect*</code>, <code>/chat*</code>, <code>/feedback*</code>) are gated. - Development: set <code>ARW_DEBUG=1</code>. Hardened: set <code>ARW_ADMIN_TOKEN</code> and send header <code>X-ARW-Admin: &lt;token&gt;</code>.</p> <p>Portable mode - Set <code>ARW_PORTABLE=1</code> to keep state near the app bundle. - Paths and memory layout are reported by <code>GET /probe</code>.</p> <p>Next steps - Read the Features page to understand the capabilities. - See Deployment to package and share a portable bundle.</p>"},{"location":"guide/security_hardening/","title":"Security Hardening","text":"<p>This guide summarizes recommended steps to run ARW more securely beyond the local\u2011dev defaults.</p> <p>Baseline - Bind: the service binds to <code>127.0.0.1</code> by default. Keep it private or put it behind a reverse proxy. - Admin endpoints: set an admin token and require it on sensitive routes.   - Env: <code>ARW_ADMIN_TOKEN=your-secret</code>   - Header: <code>X-ARW-Admin: your-secret</code> - Debug mode: unset <code>ARW_DEBUG</code> in production. With <code>ARW_DEBUG=1</code>, sensitive endpoints are open locally. - Rate limits: adjust admin limiter, e.g. <code>ARW_ADMIN_RL=\"60/60\"</code> (limit/window_secs).</p> <p>Policy &amp; Gating - Immutable denies: edit <code>configs/gating.toml</code> to add keys like <code>\"tools:*\"</code> or <code>\"models:*\"</code>. - Contracts: add time\u2011bound denies with optional auto\u2011renew and subject filters. - Ingress/Egress: use keys like <code>io:ingress:tools.&lt;id&gt;</code> and <code>io:egress:chat</code> to shape inputs/outputs.  - Recommended production deny: block introspection endpoints: <code>deny_user = [\"introspect:*\"]</code>.</p> <p>Capsules &amp; Trust (RPU) - Trust store: <code>configs/trust_capsules.json</code> lists allowed issuers and public keys. - Generate keys (ed25519) and sign capsules:   - <code>arw-cli capsule gen-ed25519</code> \u2192 save keys securely; put pubkey in <code>trust_capsules.json</code>.   - <code>arw-cli capsule sign-ed25519 &lt;sk_b64&gt; capsule.json</code> \u2192 add <code>signature</code> to the capsule. - Adoption: pass a verified capsule via <code>X-ARW-Gate: &lt;json&gt;</code> header on admin\u2011authenticated requests. - Env override: <code>ARW_TRUST_CAPSULES=/path/to/trust_capsules.json</code>.</p> <p>Reverse Proxy - Terminate TLS and IP\u2011restrict at your proxy (Nginx, Caddy, Traefik) and forward to <code>127.0.0.1:8090</code>. - Set <code>ARW_DOCS_URL=https://your-domain/docs</code> so the debug UI can link to your public docs. - Keep CORS strict; only enable <code>ARW_CORS_ANY=1</code> in development.</p> <p>Nginx example</p> <pre><code>server {\n  listen 443 ssl;\n  server_name your-domain;\n\n  # ssl_certificate /path/fullchain.pem;\n  # ssl_certificate_key /path/privkey.pem;\n\n  location / {\n    proxy_set_header Host $host;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto $scheme;\n    proxy_pass http://127.0.0.1:8090;\n  }\n\n  # (optional) restrict admin endpoints by path or IP here as a second guard\n}\n</code></pre> <p>Caddy example</p> <pre><code>your-domain {\n  encode zstd gzip\n  reverse_proxy 127.0.0.1:8090\n  @admin {\n    path /debug* /memory* /models* /governor* /introspect* /feedback* /events* /emit* /shutdown\n  }\n  # optional: restrict @admin by client IPs\n}\n</code></pre> <p>System Service - Run as a non\u2011root user. - Persist state/logs in a dedicated directory; set <code>ARW_STATE_DIR</code>, <code>ARW_LOGS_DIR</code> if needed. - Use a supervisor you trust (systemd user service, launchd, NSSM/Task Scheduler on Windows).</p> <p>Systemd (user) example</p> <pre><code># ~/.config/systemd/user/arw.service\n[Unit]\nDescription=ARW local service\nAfter=network.target\n\n[Service]\nEnvironment=ARW_PORT=8090\nEnvironment=ARW_DEBUG=0\nEnvironment=ARW_ADMIN_TOKEN=change-me\nEnvironment=ARW_HTTP_TIMEOUT_SECS=20\nEnvironment=ARW_DOCS_URL=https://your-domain/docs\nWorkingDirectory=%h/Agent_Hub\nExecStart=%h/Agent_Hub/target/release/arw-svc\nRestart=on-failure\nRestartSec=2s\n\n[Install]\nWantedBy=default.target\n</code></pre> <p>Commands</p> <pre><code>systemctl --user daemon-reload\nsystemctl --user enable --now arw\njournalctl --user -u arw -f\n</code></pre> <p>Clustering &amp; Connectors - Prefer NATS with authentication/TLS if exposing beyond localhost. - Keep queue/bus set to <code>local</code> unless you need cross\u2011node communication.</p> <p>Checklist - [ ] <code>ARW_DEBUG</code> unset - [ ] <code>ARW_ADMIN_TOKEN</code> set and required - [ ] Admin rate\u2011limit tuned (<code>ARW_ADMIN_RL</code>) - [ ] Gating policy in <code>configs/gating.toml</code> - [ ] Trust store configured; capsules signed and verified when used - [ ] Reverse proxy/TLS if remote - [ ] Logs/State directories scoped and monitored</p>"}]}