[workspace]
members = [
  "crates/arw-protocol",
  "crates/arw-events",
  "crates/arw-core",
  "crates/arw-kernel",
  "crates/arw-policy",
  "crates/arw-wasi",
  "crates/arw-macros",
  "crates/arw-topics",
  "crates/arw-heuristics",
  "crates/arw-memory-core",
  "crates/arw-runtime",
  "apps/arw-cli",
  "crates/arw-otel",
  "apps/arw-server",
  "apps/arw-connector",
  "apps/snappy-bench",
  "crates/arw-tauri",
  "apps/arw-launcher/src-tauri",
  "vendor/screenshots"
]
resolver = "2"

[workspace.package]
version = "0.1.4"
edition = "2021"
license = "MIT OR Apache-2.0"
rust-version = "1.75"

[workspace.dependencies]
anyhow = "1"
serde = { version = "1", features = ["derive"] }
serde_json = "1"
tracing = "0.1"
tracing-subscriber = { version = "0.3", features = ["env-filter"] }
thiserror = "2"
uuid = { version = "1", features = ["v4"] }
toml = "0.9"
regex = "1"
axum = "0.8"
tokio = { version = "1", features = ["rt-multi-thread","macros","sync","signal","fs"] }
chrono = { version = "0.4", features = ["serde"] }
tokio-stream = { version = "0.1", features = ["sync"] }
inventory = "0.3"
once_cell = "1"
syn = { version = "2", features = ["full"] }
quote = "1"
proc-macro2 = "1"
schemars = { version = "0.8", features = ["derive"] }
jsonschema = "0.17"
utoipa = { version = "5", features = ["axum_extras","yaml"] }
arrow2 = { version = "0.18", features = ["io_json"] }
reqwest = { version = "0.12", default-features = false, features = ["json","stream","rustls-tls"] }
futures-util = "0.3"
fs2 = "0.4"
sysinfo = "0.30"
os_info = "3"
base64 = "0.22"

[profile.dev]
opt-level = 1
debug = true
incremental = true

[profile.release]
opt-level = 3
# Favor universal, lower-memory builds by default.
# Disabling LTO and increasing codegen units cuts peak RAM substantially
# (especially on Windows/MSVC) at the cost of a small runtime performance hit.
lto = false
codegen-units = 16
debug = 0
incremental = true

# Opt-in high-performance profile for CI or beefy dev machines.
# Use with: `cargo build --profile maxperf` (no --release flag).
[profile.maxperf]
inherits = "release"
lto = "thin"
codegen-units = 1
incremental = false

[profile.test]
# Disable incremental compilation for test binaries. Some combinations of the
# workspace's generics and the system linker cause hidden-symbol resolution
# failures when incremental artifacts are reused across crate graphs; keeping
# test builds non-incremental avoids those linker traps while leaving dev
# builds fast.
incremental = false

[workspace.metadata.dist]
# Configuration for cargo-dist distribution tooling
cargo-dist-version = "0.30.0"
targets = [
    "x86_64-unknown-linux-gnu",
    "aarch64-unknown-linux-gnu",
    "x86_64-apple-darwin",
    "aarch64-apple-darwin",
    "x86_64-pc-windows-msvc",
    "aarch64-pc-windows-msvc"
]
installers = ["shell", "powershell", "msi", "pkg"]

[patch.crates-io]
screenshots = { path = "vendor/screenshots" }
selectors = { path = "vendor/selectors" }
display-info = { path = "vendor/display-info" }
fxprof-processed-profile = { path = "vendor/fxprof-processed-profile" }
