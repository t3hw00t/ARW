{
  "openapi": "3.1.0",
  "info": {
    "title": "Agent Hub (ARW) Service API",
    "description": "Your private AI control room that can scale and share when you choose.\n\nIn plain terms: Agent Hub (ARW) lets you run your own team of AI “helpers” on your computer to research, plan, write, and build—while you stay in charge. It is local‑first and privacy‑first by default, with the option to securely pool computing power with trusted peers when a project needs more muscle.\n",
    "license": {
      "name": "MIT OR Apache-2.0",
      "url": "https://github.com/t3hw00t/ARW#licensing"
    },
    "version": "0.1.0"
  },
  "paths": {
    "/about": {
      "get": {
        "tags": [
          "Public"
        ],
        "description": "Return service metadata and branding for the running instance.",
        "operationId": "about_doc",
        "responses": {
          "200": {
            "description": "About service",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/About"
                }
              }
            }
          }
        }
      }
    },
    "/admin/chat": {
      "get": {
        "tags": [
          "Admin/Chat"
        ],
        "summary": "Deprecated: Chat history",
        "description": "Deprecated dev chat history used by the debug UI; scheduled for removal after sunset.",
        "operationId": "chat_get_doc",
        "responses": {
          "200": {
            "description": "Chat history"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/admin/chat/clear": {
      "post": {
        "tags": [
          "Admin/Chat"
        ],
        "summary": "Deprecated: Clear chat history",
        "description": "Deprecated dev helper to clear in-memory chat history.",
        "operationId": "chat_clear_doc",
        "responses": {
          "200": {
            "description": "Cleared",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/admin/chat/send": {
      "post": {
        "tags": [
          "Admin/Chat"
        ],
        "summary": "Deprecated: Send chat message",
        "description": "Deprecated dev helper to send a message to the synthetic chat backend.",
        "operationId": "chat_send_doc",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatSendReq"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Message sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/admin/emit/test": {
      "get": {
        "tags": [
          "Admin/Core"
        ],
        "description": "Emit a test event onto the internal event bus (for verification).",
        "operationId": "emit_test_doc",
        "responses": {
          "200": {
            "description": "Emit test event",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/admin/events": {
      "get": {
        "tags": [
          "Admin/Core"
        ],
        "description": "Server-Sent Events stream; emits JSON envelopes with CloudEvents metadata; supports Last-Event-ID resume and ?replay=N.",
        "operationId": "events_doc",
        "responses": {
          "200": {
            "description": "SSE event stream"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/admin/feedback/analyze": {
      "post": {
        "tags": [
          "Admin/Feedback"
        ],
        "operationId": "feedback_analyze_post_doc",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "description": "Feedback: POST /admin/feedback/analyze."
      }
    },
    "/admin/feedback/apply": {
      "post": {
        "tags": [
          "Admin/Feedback"
        ],
        "operationId": "feedback_apply_post_doc",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplyReq"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "description": "Feedback: POST /admin/feedback/apply."
      }
    },
    "/admin/feedback/auto": {
      "post": {
        "tags": [
          "Admin/Feedback"
        ],
        "operationId": "feedback_auto_post_doc",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AutoReq"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "description": "Feedback: POST /admin/feedback/auto."
      }
    },
    "/admin/feedback/policy": {
      "get": {
        "tags": [
          "Admin/Feedback"
        ],
        "operationId": "feedback_policy_doc",
        "responses": {
          "200": {
            "description": "Effective policy caps/bounds"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "description": "Feedback: GET /admin/feedback/policy."
      }
    },
    "/admin/feedback/reset": {
      "post": {
        "tags": [
          "Admin/Feedback"
        ],
        "operationId": "feedback_reset_post_doc",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "description": "Feedback: POST /admin/feedback/reset."
      }
    },
    "/admin/feedback/signal": {
      "post": {
        "tags": [
          "Admin/Feedback"
        ],
        "operationId": "feedback_signal_post_doc",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FeedbackSignalPost"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "description": "Feedback: POST /admin/feedback/signal."
      }
    },
    "/admin/feedback/state": {
      "get": {
        "tags": [
          "Admin/Feedback"
        ],
        "operationId": "feedback_state_get_doc",
        "responses": {
          "200": {
            "description": "Feedback state"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "description": "Feedback: GET /admin/feedback/state."
      }
    },
    "/admin/feedback/suggestions": {
      "get": {
        "tags": [
          "Admin/Feedback"
        ],
        "operationId": "feedback_suggestions_doc",
        "responses": {
          "200": {
            "description": "Versioned suggestions"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "description": "Feedback: GET /admin/feedback/suggestions."
      }
    },
    "/admin/feedback/updates": {
      "get": {
        "tags": [
          "Admin/Feedback"
        ],
        "operationId": "feedback_updates_doc",
        "parameters": [
          {
            "name": "since",
            "in": "query",
            "description": "Return updates if newer than this version",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Latest version"
          },
          "204": {
            "description": "No change"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "description": "Feedback: GET /admin/feedback/updates."
      }
    },
    "/admin/governor/hints": {
      "get": {
        "tags": [
          "Admin/Governor"
        ],
        "operationId": "governor_hints_get_doc",
        "responses": {
          "200": {
            "description": "Governor hints"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "description": "Governor: GET /admin/governor/hints."
      },
      "post": {
        "tags": [
          "Admin/Governor"
        ],
        "operationId": "governor_hints_set_doc",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Hints"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Set",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "description": "Governor: POST /admin/governor/hints."
      }
    },
    "/admin/governor/profile": {
      "get": {
        "tags": [
          "Admin/Governor"
        ],
        "operationId": "governor_profile_get_doc",
        "responses": {
          "200": {
            "description": "Governor profile"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "description": "Governor: GET /admin/governor/profile."
      },
      "post": {
        "tags": [
          "Admin/Governor"
        ],
        "operationId": "governor_profile_set_doc",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetProfile"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Set",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "description": "Governor: POST /admin/governor/profile."
      }
    },
    "/admin/hierarchy/accept": {
      "post": {
        "tags": [
          "Admin/Hierarchy"
        ],
        "operationId": "hierarchy_accept_doc",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CoreAccept"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Accept",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "description": "Hierarchy: POST /admin/hierarchy/accept."
      }
    },
    "/admin/hierarchy/hello": {
      "post": {
        "tags": [
          "Admin/Hierarchy"
        ],
        "operationId": "hierarchy_hello_doc",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CoreHello"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Hello",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "description": "Hierarchy: POST /admin/hierarchy/hello."
      }
    },
    "/admin/hierarchy/offer": {
      "post": {
        "tags": [
          "Admin/Hierarchy"
        ],
        "operationId": "hierarchy_offer_doc",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CoreOffer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Offer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "description": "Hierarchy: POST /admin/hierarchy/offer."
      }
    },
    "/admin/hierarchy/role": {
      "post": {
        "tags": [
          "Admin/Hierarchy"
        ],
        "operationId": "hierarchy_role_set_doc",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleSetDoc"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Set",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "description": "Hierarchy: POST /admin/hierarchy/role."
      }
    },
    "/admin/hierarchy/state": {
      "get": {
        "tags": [
          "Admin/Hierarchy"
        ],
        "operationId": "hierarchy_state_doc",
        "responses": {
          "200": {
            "description": "Hierarchy state"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "description": "Hierarchy: GET /admin/hierarchy/state."
      }
    },
    "/admin/introspect/schemas/{id}": {
      "get": {
        "tags": [
          "Admin/Introspect"
        ],
        "operationId": "introspect_schema_doc",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tool id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Schema JSON"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Unknown tool id"
          }
        },
        "description": "Introspect: GET /admin/introspect/schemas/{id}."
      }
    },
    "/admin/introspect/tools": {
      "get": {
        "tags": [
          "Admin/Introspect"
        ],
        "operationId": "introspect_tools_doc",
        "responses": {
          "200": {
            "description": "List available tools"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "description": "Introspect: GET /admin/introspect/tools."
      }
    },
    "/admin/memory": {
      "get": {
        "tags": [
          "Admin/Memory"
        ],
        "operationId": "memory_get_doc",
        "responses": {
          "200": {
            "description": "Memory snapshot"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "description": "Memory: GET /admin/memory."
      }
    },
    "/admin/memory/apply": {
      "post": {
        "tags": [
          "Admin/Memory"
        ],
        "operationId": "memory_apply_doc",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplyMemory"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "description": "Memory: POST /admin/memory/apply."
      }
    },
    "/admin/memory/limit": {
      "get": {
        "tags": [
          "Admin/Memory"
        ],
        "operationId": "memory_limit_get_doc",
        "responses": {
          "200": {
            "description": "Memory limit"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "description": "Memory: GET /admin/memory/limit."
      },
      "post": {
        "tags": [
          "Admin/Memory"
        ],
        "operationId": "memory_limit_set_doc",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetLimit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Set",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "description": "Memory: POST /admin/memory/limit."
      }
    },
    "/admin/memory/load": {
      "post": {
        "tags": [
          "Admin/Memory"
        ],
        "operationId": "memory_load_doc",
        "responses": {
          "200": {
            "description": "Loaded"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "description": "Memory: POST /admin/memory/load."
      }
    },
    "/admin/memory/save": {
      "post": {
        "tags": [
          "Admin/Memory"
        ],
        "operationId": "memory_save_doc",
        "responses": {
          "200": {
            "description": "Saved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "description": "Memory: POST /admin/memory/save."
      }
    },
    "/admin/models": {
      "get": {
        "tags": [
          "Admin/Models"
        ],
        "operationId": "models_list_doc",
        "responses": {
          "200": {
            "description": "Models list"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "description": "Models: GET /admin/models."
      }
    },
    "/admin/models/add": {
      "post": {
        "tags": [
          "Admin/Models"
        ],
        "operationId": "models_add_doc",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModelId"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Added",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "description": "Models: POST /admin/models/add."
      }
    },
    "/admin/models/concurrency": {
      "get": {
        "tags": [
          "Admin/Models"
        ],
        "operationId": "models_concurrency_get_doc",
        "responses": {
          "200": {
            "description": "Concurrency settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelsConcurrency"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "description": "Models: GET /admin/models/concurrency."
      },
      "post": {
        "tags": [
          "Admin/Models"
        ],
        "operationId": "models_concurrency_set_doc",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConcurrencySetReq"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Set",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "description": "Models: POST /admin/models/concurrency."
      }
    },
    "/admin/models/default": {
      "get": {
        "tags": [
          "Admin/Models"
        ],
        "operationId": "models_default_get_doc",
        "responses": {
          "200": {
            "description": "Default model"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "description": "Models: GET /admin/models/default."
      },
      "post": {
        "tags": [
          "Admin/Models"
        ],
        "operationId": "models_default_set_doc",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModelId"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default set",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "description": "Models: POST /admin/models/default."
      }
    },
    "/admin/models/delete": {
      "post": {
        "tags": [
          "Admin/Models"
        ],
        "operationId": "models_delete_doc",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModelId"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "description": "Models: POST /admin/models/delete."
      }
    },
    "/admin/models/download": {
      "post": {
        "tags": [
          "Admin/Models"
        ],
        "operationId": "models_download_doc",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DownloadReq"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Started",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "description": "Models: POST /admin/models/download."
      }
    },
    "/admin/models/download/cancel": {
      "post": {
        "tags": [
          "Admin/Models"
        ],
        "operationId": "models_download_cancel_doc",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelReq"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Canceled",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "description": "Models: POST /admin/models/download/cancel."
      }
    },
    "/admin/models/jobs": {
      "get": {
        "tags": [
          "Admin/Models"
        ],
        "operationId": "models_jobs_doc",
        "responses": {
          "200": {
            "description": "Jobs status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelsJobs"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "description": "Models: GET /admin/models/jobs."
      }
    },
    "/admin/models/load": {
      "post": {
        "tags": [
          "Admin/Models"
        ],
        "operationId": "models_load_doc",
        "responses": {
          "200": {
            "description": "Loaded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "description": "Models: POST /admin/models/load."
      }
    },
    "/admin/models/refresh": {
      "post": {
        "tags": [
          "Admin/Models"
        ],
        "operationId": "models_refresh_doc",
        "responses": {
          "200": {
            "description": "Refreshed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "description": "Models: POST /admin/models/refresh."
      }
    },
    "/admin/models/save": {
      "post": {
        "tags": [
          "Admin/Models"
        ],
        "operationId": "models_save_doc",
        "responses": {
          "200": {
            "description": "Saved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "description": "Models: POST /admin/models/save."
      }
    },
    "/admin/models/summary": {
      "get": {
        "tags": [
          "Admin/Models"
        ],
        "operationId": "models_summary_doc",
        "responses": {
          "200": {
            "description": "Models summary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelsSummary"
                }
              }
            }
          }
        },
        "description": "Models: GET /admin/models/summary."
      }
    },
    "/admin/probe": {
      "get": {
        "tags": [
          "Admin/Introspect"
        ],
        "operationId": "probe_doc",
        "responses": {
          "200": {
            "description": "Returns effective memory paths"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "description": "Introspect: GET /admin/probe."
      }
    },
    "/admin/projects/create": {
      "post": {
        "tags": [
          "Admin/Projects"
        ],
        "operationId": "projects_create_doc",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjCreateReq"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "description": "Projects: POST /admin/projects/create."
      }
    },
    "/admin/projects/list": {
      "get": {
        "tags": [
          "Admin/Projects"
        ],
        "operationId": "projects_list_doc",
        "responses": {
          "200": {
            "description": "Projects list"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "description": "Projects: GET /admin/projects/list."
      }
    },
    "/admin/projects/notes": {
      "post": {
        "tags": [
          "Admin/Projects"
        ],
        "operationId": "projects_notes_set_doc",
        "parameters": [
          {
            "name": "proj",
            "in": "query",
            "description": "Project name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Saved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "description": "Projects: POST /admin/projects/notes."
      }
    },
    "/admin/shutdown": {
      "get": {
        "tags": [
          "Admin/Core"
        ],
        "operationId": "shutdown_doc",
        "responses": {
          "200": {
            "description": "Shutdown service",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "description": "Core: GET /admin/shutdown."
      }
    },
    "/admin/state/actions": {
      "get": {
        "tags": [
          "Admin/State"
        ],
        "operationId": "state_actions_doc",
        "responses": {
          "200": {
            "description": "Actions"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "description": "State: GET /admin/state/actions."
      }
    },
    "/admin/state/beliefs": {
      "get": {
        "tags": [
          "Admin/State"
        ],
        "operationId": "state_beliefs_doc",
        "responses": {
          "200": {
            "description": "Beliefs"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "description": "State: GET /admin/state/beliefs."
      }
    },
    "/admin/state/intents": {
      "get": {
        "tags": [
          "Admin/State"
        ],
        "operationId": "state_intents_doc",
        "responses": {
          "200": {
            "description": "Intents"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "description": "State: GET /admin/state/intents."
      }
    },
    "/admin/state/observations": {
      "get": {
        "tags": [
          "Admin/State"
        ],
        "operationId": "state_observations_doc",
        "responses": {
          "200": {
            "description": "Recent observations"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "description": "State: GET /admin/state/observations."
      }
    },
    "/admin/tasks/enqueue": {
      "post": {
        "tags": [
          "Admin/Tasks"
        ],
        "operationId": "tasks_enqueue_doc",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnqueueReq"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "description": "Tasks: POST /admin/tasks/enqueue."
      }
    },
    "/admin/tools": {
      "get": {
        "tags": [
          "Admin/Tools"
        ],
        "operationId": "tools_list_doc",
        "responses": {
          "200": {
            "description": "Tools list"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "description": "Tools: GET /admin/tools."
      }
    },
    "/admin/tools/run": {
      "post": {
        "tags": [
          "Admin/Tools"
        ],
        "operationId": "tools_run_doc",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ToolRunReq"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Tool output"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "description": "Tools: POST /admin/tools/run."
      }
    },
    "/catalog/health": {
      "get": {
        "tags": [
          "Public/Specs"
        ],
        "operationId": "catalog_health_doc",
        "responses": {
          "200": {
            "description": "Catalog health"
          }
        },
        "description": "Specs: GET /catalog/health."
      }
    },
    "/catalog/index": {
      "get": {
        "tags": [
          "Public/Specs"
        ],
        "operationId": "catalog_index_doc",
        "responses": {
          "200": {
            "description": "Interface catalog index (YAML)"
          },
          "404": {
            "description": "Missing"
          }
        },
        "description": "Specs: GET /catalog/index."
      }
    },
    "/healthz": {
      "get": {
        "tags": [
          "Public"
        ],
        "operationId": "healthz_doc",
        "responses": {
          "200": {
            "description": "Service health",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkResponse"
                }
              }
            }
          }
        },
        "description": "Public: GET /healthz."
      }
    },
    "/metrics": {
      "get": {
        "tags": [
          "Public"
        ],
        "operationId": "metrics_doc",
        "responses": {
          "200": {
            "description": "Prometheus metrics"
          }
        },
        "description": "Public: GET /metrics."
      }
    },
    "/models/blob/{sha256}": {
      "get": {
        "tags": [
          "Public"
        ],
        "operationId": "models_blob_get_doc",
        "parameters": [
          {
            "name": "sha256",
            "in": "path",
            "description": "Hex lowercase SHA-256 (64 chars)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "CAS blob bytes (ETag/immutable cache)",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "304": {
            "description": "Not Modified (If-None-Match/If-Modified-Since)"
          },
          "400": {
            "description": "Invalid sha256",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "416": {
            "description": "Range Not Satisfiable"
          }
        },
        "description": "Public: GET /models/blob/{sha256}."
      }
    },
    "/spec": {
      "get": {
        "tags": [
          "Public/Specs"
        ],
        "operationId": "spec_index_doc",
        "responses": {
          "200": {
            "description": "Spec index"
          }
        },
        "description": "Specs: GET /spec."
      }
    },
    "/spec/asyncapi.yaml": {
      "get": {
        "tags": [
          "Public/Specs"
        ],
        "operationId": "spec_asyncapi_doc",
        "responses": {
          "200": {
            "description": "AsyncAPI YAML"
          },
          "404": {
            "description": "Missing"
          }
        },
        "description": "Specs: GET /spec/asyncapi.yaml."
      }
    },
    "/spec/mcp-tools.json": {
      "get": {
        "tags": [
          "Public/Specs"
        ],
        "operationId": "spec_mcp_doc",
        "responses": {
          "200": {
            "description": "MCP tools JSON"
          },
          "404": {
            "description": "Missing"
          }
        },
        "description": "Specs: GET /spec/mcp-tools.json."
      }
    },
    "/spec/openapi.yaml": {
      "get": {
        "tags": [
          "Public/Specs"
        ],
        "operationId": "spec_openapi_doc",
        "responses": {
          "200": {
            "description": "OpenAPI YAML"
          },
          "404": {
            "description": "Missing"
          }
        },
        "description": "Specs: GET /spec/openapi.yaml."
      }
    },
    "/state/models": {
      "get": {
        "tags": [
          "Public/State"
        ],
        "operationId": "state_models_doc",
        "responses": {
          "200": {
            "description": "Models list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ModelItem"
                  }
                }
              }
            }
          }
        },
        "description": "State: GET /state/models."
      }
    },
    "/version": {
      "get": {
        "tags": [
          "Public"
        ],
        "operationId": "version_doc",
        "responses": {
          "200": {
            "description": "Service version"
          }
        },
        "description": "Public: GET /version."
      }
    }
  },
  "components": {
    "schemas": {
      "About": {
        "type": "object",
        "required": [
          "service",
          "version",
          "endpoints"
        ],
        "properties": {
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "docs_url": {
            "type": [
              "string",
              "null"
            ]
          },
          "endpoints": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "name": {
            "type": [
              "string",
              "null"
            ]
          },
          "role": {
            "type": [
              "string",
              "null"
            ]
          },
          "service": {
            "type": "string"
          },
          "tagline": {
            "type": [
              "string",
              "null"
            ]
          },
          "version": {
            "type": "string"
          }
        }
      },
      "ActiveJob": {
        "type": "object",
        "description": "Active download job pair.",
        "required": [
          "model_id",
          "job_id"
        ],
        "properties": {
          "job_id": {
            "type": "string"
          },
          "model_id": {
            "type": "string"
          }
        }
      },
      "ApplyMemory": {
        "type": "object",
        "required": [
          "kind",
          "value"
        ],
        "properties": {
          "kind": {
            "type": "string"
          },
          "ttl_ms": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64",
            "minimum": 0
          },
          "value": {}
        }
      },
      "ApplyReq": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string"
          }
        }
      },
      "AutoReq": {
        "type": "object",
        "required": [
          "enabled"
        ],
        "properties": {
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "BudgetOverrideReq": {
        "type": "object",
        "properties": {
          "class": {
            "type": [
              "string",
              "null"
            ]
          },
          "hard_ms": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64",
            "minimum": 0
          },
          "soft_ms": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64",
            "minimum": 0
          }
        }
      },
      "CancelReq": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string"
          }
        }
      },
      "ChatSendReq": {
        "type": "object",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "type": "string"
          },
          "model": {
            "type": [
              "string",
              "null"
            ]
          },
          "temperature": {
            "type": [
              "number",
              "null"
            ],
            "format": "double"
          }
        }
      },
      "ConcurrencySetReq": {
        "type": "object",
        "required": [
          "max"
        ],
        "properties": {
          "block": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "max": {
            "type": "integer",
            "minimum": 0
          }
        }
      },
      "CoreAccept": {
        "type": "object",
        "required": [
          "child_id",
          "parent_id",
          "role",
          "epoch"
        ],
        "properties": {
          "child_id": {
            "type": "string"
          },
          "epoch": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "parent_id": {
            "type": "string"
          },
          "role": {
            "$ref": "#/components/schemas/CoreRole"
          }
        }
      },
      "CoreHello": {
        "type": "object",
        "required": [
          "id",
          "role",
          "capabilities",
          "scope_tags",
          "epoch",
          "nonce"
        ],
        "properties": {
          "capabilities": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "epoch": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "id": {
            "type": "string"
          },
          "nonce": {
            "type": "string"
          },
          "role": {
            "$ref": "#/components/schemas/CoreRole"
          },
          "scope_tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CoreOffer": {
        "type": "object",
        "required": [
          "from_id",
          "proposed_role",
          "shard_ranges"
        ],
        "properties": {
          "capacity_hint": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "minimum": 0
          },
          "from_id": {
            "type": "string"
          },
          "parent_hint": {
            "type": [
              "string",
              "null"
            ]
          },
          "proposed_role": {
            "$ref": "#/components/schemas/CoreRole"
          },
          "shard_ranges": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CoreRole": {
        "type": "string",
        "enum": [
          "root",
          "regional",
          "edge",
          "connector",
          "observer"
        ]
      },
      "DownloadReq": {
        "type": "object",
        "required": [
          "id",
          "url",
          "sha256"
        ],
        "properties": {
          "budget": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/BudgetOverrideReq"
              }
            ]
          },
          "id": {
            "type": "string"
          },
          "provider": {
            "type": [
              "string",
              "null"
            ]
          },
          "sha256": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "EnqueueReq": {
        "type": "object",
        "required": [
          "kind",
          "payload"
        ],
        "properties": {
          "idem_key": {
            "type": [
              "string",
              "null"
            ]
          },
          "kind": {
            "type": "string"
          },
          "payload": {},
          "priority": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "shard_key": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "FeedbackSignalPost": {
        "type": "object",
        "required": [
          "kind",
          "target",
          "confidence",
          "severity"
        ],
        "properties": {
          "confidence": {
            "type": "number",
            "format": "double"
          },
          "kind": {
            "type": "string"
          },
          "note": {
            "type": [
              "string",
              "null"
            ]
          },
          "severity": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "target": {
            "type": "string"
          }
        }
      },
      "Hints": {
        "type": "object",
        "properties": {
          "compression_aggr": {
            "type": [
              "number",
              "null"
            ],
            "format": "double"
          },
          "context_budget_tokens": {
            "type": [
              "integer",
              "null"
            ],
            "minimum": 0
          },
          "context_footer": {
            "type": [
              "string",
              "null"
            ]
          },
          "context_format": {
            "type": [
              "string",
              "null"
            ]
          },
          "context_header": {
            "type": [
              "string",
              "null"
            ]
          },
          "context_item_budget_tokens": {
            "type": [
              "integer",
              "null"
            ],
            "minimum": 0
          },
          "context_item_template": {
            "type": [
              "string",
              "null"
            ]
          },
          "event_buffer": {
            "type": [
              "integer",
              "null"
            ],
            "minimum": 0
          },
          "http_timeout_secs": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64",
            "minimum": 0
          },
          "include_provenance": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "joiner": {
            "type": [
              "string",
              "null"
            ]
          },
          "max_concurrency": {
            "type": [
              "integer",
              "null"
            ],
            "minimum": 0
          },
          "mmr_lambda": {
            "type": [
              "number",
              "null"
            ],
            "format": "double"
          },
          "mode": {
            "type": [
              "string",
              "null"
            ]
          },
          "retrieval_div": {
            "type": [
              "number",
              "null"
            ],
            "format": "double"
          },
          "retrieval_k": {
            "type": [
              "integer",
              "null"
            ],
            "minimum": 0
          },
          "slo_ms": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64",
            "minimum": 0
          },
          "vote_k": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "minimum": 0
          }
        }
      },
      "ModelId": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "provider": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "ModelItem": {
        "type": "object",
        "description": "Item in the models list. Many fields are optional while downloading or\nwhen entries were added before materialization.",
        "required": [
          "id"
        ],
        "properties": {
          "bytes": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64",
            "minimum": 0
          },
          "error_code": {
            "type": [
              "string",
              "null"
            ]
          },
          "id": {
            "type": "string"
          },
          "path": {
            "type": [
              "string",
              "null"
            ]
          },
          "provider": {
            "type": [
              "string",
              "null"
            ]
          },
          "sha256": {
            "type": [
              "string",
              "null"
            ]
          },
          "status": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "ModelsConcurrency": {
        "type": "object",
        "description": "Runtime download concurrency snapshot (configured vs. available), optionally\nincluding a hard cap from `ARW_MODELS_MAX_CONC_HARD`.",
        "required": [
          "configured_max",
          "available_permits",
          "held_permits"
        ],
        "properties": {
          "available_permits": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "configured_max": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "hard_cap": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64",
            "minimum": 0
          },
          "held_permits": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "pending_shrink": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64",
            "minimum": 0
          }
        }
      },
      "ModelsJobs": {
        "type": "object",
        "description": "Snapshot of downloader jobs and inflight hashes plus a concurrency view.",
        "required": [
          "active",
          "inflight_hashes",
          "concurrency"
        ],
        "properties": {
          "active": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActiveJob"
            }
          },
          "concurrency": {
            "$ref": "#/components/schemas/ModelsConcurrency"
          },
          "inflight_hashes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ModelsMetrics": {
        "type": "object",
        "description": "Aggregated counters and throughput estimate for downloads. Matches the\nshape returned by `ModelsService::downloads_metrics`.",
        "required": [
          "started",
          "queued",
          "admitted",
          "resumed",
          "canceled",
          "completed",
          "completed_cached",
          "errors",
          "bytes_total"
        ],
        "properties": {
          "admitted": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "bytes_total": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "canceled": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "completed": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "completed_cached": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "errors": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "ewma_mbps": {
            "type": [
              "number",
              "null"
            ],
            "format": "double"
          },
          "queued": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "resumed": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "started": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        }
      },
      "ModelsSummary": {
        "type": "object",
        "description": "Composite summary for UI: models items, default id, concurrency, metrics.",
        "required": [
          "items",
          "concurrency",
          "metrics"
        ],
        "properties": {
          "concurrency": {
            "$ref": "#/components/schemas/ModelsConcurrency"
          },
          "default": {
            "type": "string"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ModelItem"
            }
          },
          "metrics": {
            "$ref": "#/components/schemas/ModelsMetrics"
          }
        }
      },
      "OkResponse": {
        "type": "object",
        "required": [
          "ok"
        ],
        "properties": {
          "ok": {
            "type": "boolean"
          }
        }
      },
      "ProblemDetails": {
        "type": "object",
        "description": "RFC7807-style error payload used at service edges.",
        "required": [
          "type",
          "title",
          "status"
        ],
        "properties": {
          "code": {
            "type": [
              "string",
              "null"
            ]
          },
          "detail": {
            "type": [
              "string",
              "null"
            ]
          },
          "instance": {
            "type": [
              "string",
              "null"
            ]
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "title": {
            "type": "string"
          },
          "trace_id": {
            "type": [
              "string",
              "null"
            ]
          },
          "type": {
            "type": "string"
          }
        }
      },
      "ProjCreateReq": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "RoleSetDoc": {
        "type": "object",
        "required": [
          "role"
        ],
        "properties": {
          "role": {
            "type": "string"
          }
        }
      },
      "SetLimit": {
        "type": "object",
        "required": [
          "limit"
        ],
        "properties": {
          "limit": {
            "type": "integer",
            "minimum": 0
          }
        }
      },
      "SetProfile": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "ToolRunReq": {
        "type": "object",
        "required": [
          "id",
          "input"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "input": {}
        }
      }
    }
  },
  "tags": [
    {
      "name": "Admin/Chat",
      "description": "Admin/Chat endpoints"
    },
    {
      "name": "Admin/Core",
      "description": "Admin/Core endpoints"
    },
    {
      "name": "Admin/Feedback",
      "description": "Admin/Feedback endpoints"
    },
    {
      "name": "Admin/Governor",
      "description": "Admin/Governor endpoints"
    },
    {
      "name": "Admin/Hierarchy",
      "description": "Admin/Hierarchy endpoints"
    },
    {
      "name": "Admin/Introspect",
      "description": "Admin/Introspect endpoints"
    },
    {
      "name": "Admin/Memory",
      "description": "Admin/Memory endpoints"
    },
    {
      "name": "Admin/Models",
      "description": "Admin/Models endpoints"
    },
    {
      "name": "Admin/Projects",
      "description": "Admin/Projects endpoints"
    },
    {
      "name": "Admin/State",
      "description": "Admin/State endpoints"
    },
    {
      "name": "Admin/Tasks",
      "description": "Admin/Tasks endpoints"
    },
    {
      "name": "Admin/Tools",
      "description": "Admin/Tools endpoints"
    },
    {
      "name": "Public",
      "description": "Public endpoints"
    },
    {
      "name": "Public/Specs",
      "description": "Public/Specs endpoints"
    },
    {
      "name": "Public/State",
      "description": "Public/State endpoints"
    }
  ]
}
