openapi: 3.1.0
info:
  title: arw-server
  description: Unified ARW server API surface (headless-first).
  license:
    name: MIT OR Apache-2.0
    identifier: MIT OR Apache-2.0
  version: 0.2.0-dev
paths:
  /about:
    get:
      tags:
      - Meta
      summary: Inspect service metadata
      description: Return version, build information, endpoint counts, and the enumerated
        public/admin routes announced by the server.
      operationId: about_doc
      responses:
        '200':
          description: Service metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AboutResponse'
  /admin/chat:
    get:
      tags:
      - Admin/Chat
      operationId: chat_history_doc
      responses:
        '200':
          description: Current chat history
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatHistory'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      description: Retrieve the active admin chat transcript, including message history
        and tool metadata.
      summary: Fetch chat transcript
  /admin/chat/clear:
    post:
      tags:
      - Admin/Chat
      operationId: chat_clear_doc
      responses:
        '200':
          description: Cleared
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      description: Wipe the stored admin chat transcript and reset associated tool
        context for a fresh session.
      summary: Clear chat transcript
  /admin/chat/send:
    post:
      tags:
      - Admin/Chat
      operationId: chat_send_doc
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatSendReq'
        required: true
      responses:
        '200':
          description: Synthetic reply
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatSendResp'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      description: Submit a message to the admin chat lane and receive the synthesized
        assistant response.
      summary: Send chat message
  /admin/chat/status:
    get:
      tags:
      - Admin/Chat
      operationId: chat_status_doc
      parameters:
      - name: probe
        in: query
        description: Trigger latency probe
        required: false
        schema:
          type: boolean
      responses:
        '200':
          description: Backend status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatStatusResp'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      description: Report chat lane health, including the most recent latency probe;
        optionally trigger a new probe.
      summary: Query chat status
  /admin/distill:
    post:
      tags:
      - Distill
      summary: Run distillation pass
      operationId: distill_run_doc
      responses:
        '200':
          description: Distillation summary
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      description: Trigger the manual distillation pipeline to snapshot playbooks,
        refresh beliefs, and regenerate derived notebooks.
  /admin/events/journal:
    get:
      tags:
      - Events
      operationId: events_journal_tail_doc
      parameters:
      - name: limit
        in: query
        description: Max entries to return (default 200, max 1000)
        required: false
        schema:
          type: integer
          minimum: 0
      - name: prefix
        in: query
        description: CSV of event kind prefixes to include
        required: false
        schema:
          type: string
      responses:
        '200':
          description: Tail of journal entries
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventsJournalResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Journal disabled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Journal read failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      description: Retrieve the latest persisted event entries with optional prefix
        filters for focused inspection.
      summary: Tail event journal
  /admin/experiments/activate:
    post:
      tags:
      - Admin/Experiments
      operationId: experiments_activate_doc
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExperimentActivateRequest'
        required: true
      responses:
        '200':
          description: Variant activated
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized
        '404':
          description: Unknown experiment
      description: Mark a variant as the active choice for the experiment and persist
        the rollout decision.
      summary: Activate experiment variant
  /admin/experiments/assign:
    post:
      tags:
      - Admin/Experiments
      operationId: experiments_assign_doc
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExperimentAssignRequest'
        required: true
      responses:
        '200':
          description: Assignment event emitted
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized
      description: Record or override an experiment assignment for a participant or
        agent and broadcast the decision.
      summary: Assign experiment variant
  /admin/experiments/define:
    post:
      tags:
      - Admin/Experiments
      operationId: experiments_define_doc
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExperimentDefineRequest'
        required: true
      responses:
        '200':
          description: Experiment defined
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized
      description: Create or update an experiment definition with the supplied variants
        and configuration payload.
      summary: Define experiment
  /admin/experiments/list:
    get:
      tags:
      - Admin/Experiments
      operationId: experiments_list_doc
      responses:
        '200':
          description: Experiments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExperimentsListResponse'
        '401':
          description: Unauthorized
      description: Return all experiment definitions currently registered with their
        variant metadata.
      summary: List experiments
  /admin/experiments/run:
    post:
      tags:
      - Admin/Experiments
      operationId: experiments_run_doc
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExperimentRunRequest'
        required: true
      responses:
        '200':
          description: Run outcome
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunOutcome'
        '401':
          description: Unauthorized
      description: Execute the requested experiment variants against the chosen golden
        project and return the evaluation outcome.
      summary: Run experiment on goldens
  /admin/experiments/scoreboard:
    get:
      tags:
      - Admin/Experiments
      operationId: experiments_scoreboard_doc
      responses:
        '200':
          description: Scoreboard
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExperimentsScoreboardResponse'
        '401':
          description: Unauthorized
      description: Provide aggregated performance metrics for each experiment variant
        to compare recent runs.
      summary: Fetch experiment scoreboard
  /admin/experiments/start:
    post:
      tags:
      - Admin/Experiments
      operationId: experiments_start_doc
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExperimentStartRequest'
        required: true
      responses:
        '200':
          description: Experiment started
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized
      description: Publish a start event for a new experiment with optional assignment,
        budget, and variant hints.
      summary: Start experiment run
  /admin/experiments/stop:
    post:
      tags:
      - Admin/Experiments
      operationId: experiments_stop_doc
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExperimentStopRequest'
        required: true
      responses:
        '200':
          description: Experiment stopped
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized
      description: Halt an experiment run by emitting a stop event for the provided
        experiment identifier.
      summary: Stop experiment
  /admin/experiments/winners:
    get:
      tags:
      - Admin/Experiments
      operationId: experiments_winners_doc
      responses:
        '200':
          description: Winners
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExperimentsWinnersResponse'
        '401':
          description: Unauthorized
      description: Return the top-performing variants for experiments based on the
        latest evaluation data.
      summary: List experiment winners
  /admin/feedback/analyze:
    post:
      tags:
      - Admin/Feedback
      operationId: feedback_analyze_doc
      responses:
        '200':
          description: Recomputed suggestions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedbackState'
        '401':
          description: Unauthorized
      description: Trigger an immediate feedback analysis pass to refresh suggestions
        from the latest signals.
      summary: Recompute feedback suggestions
  /admin/feedback/apply:
    post:
      tags:
      - Admin/Feedback
      operationId: feedback_apply_doc
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeedbackApplyRequest'
        required: true
      responses:
        '200':
          description: Suggestion applied
          content:
            application/json:
              schema: {}
        '400':
          description: Invalid suggestion payload
        '401':
          description: Unauthorized
        '403':
          description: Policy denied
        '404':
          description: Unknown suggestion
      description: Apply the identified suggestion and let the engine reconcile policy
        and audit outcomes.
      summary: Apply feedback suggestion
  /admin/feedback/auto:
    post:
      tags:
      - Admin/Feedback
      operationId: feedback_auto_doc
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeedbackAutoRequest'
        required: true
      responses:
        '200':
          description: Auto-apply updated
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized
      description: Enable or disable automatic application of approved feedback suggestions.
      summary: Toggle automatic feedback application
  /admin/feedback/policy:
    get:
      tags:
      - Admin/Feedback
      operationId: feedback_policy_doc
      responses:
        '200':
          description: Effective policy
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized
      description: Return the effective feedback application policy after merging
        defaults and overrides.
      summary: Fetch feedback policy
  /admin/feedback/reset:
    post:
      tags:
      - Admin/Feedback
      operationId: feedback_reset_doc
      responses:
        '200':
          description: Feedback state cleared
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized
      description: Clear feedback signals, suggestions, and cached state for a cold
        start.
      summary: Reset feedback engine
  /admin/feedback/rollback:
    post:
      tags:
      - Admin/Feedback
      operationId: feedback_rollback_doc
      parameters:
      - name: to
        in: query
        required: false
        schema:
          type: integer
          format: int64
          minimum: 0
      responses:
        '200':
          description: Snapshot restored
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized
        '404':
          description: Snapshot not found
      description: Restore feedback state to the requested snapshot version and return
        the resulting suggestion set.
      summary: Roll back feedback snapshot
  /admin/feedback/signal:
    post:
      tags:
      - Admin/Feedback
      operationId: feedback_signal_doc
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeedbackSignalRequest'
        required: true
      responses:
        '200':
          description: Signal recorded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedbackState'
        '401':
          description: Unauthorized
      description: Submit a feedback signal with confidence and severity so it influences
        subsequent analysis.
      summary: Record feedback signal
  /admin/feedback/state:
    get:
      tags:
      - Admin/Feedback
      operationId: feedback_state_doc
      responses:
        '200':
          description: Feedback engine state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedbackState'
        '401':
          description: Unauthorized
      description: Return the current feedback engine snapshot, including signals,
        suggestions, and configuration.
      summary: Inspect feedback state
  /admin/feedback/suggestions:
    get:
      tags:
      - Admin/Feedback
      operationId: feedback_suggestions_doc
      responses:
        '200':
          description: Current suggestions
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized
      description: Return the current queue of actionable feedback suggestions with
        their metadata.
      summary: List feedback suggestions
  /admin/feedback/updates:
    get:
      tags:
      - Admin/Feedback
      operationId: feedback_updates_doc
      parameters:
      - name: since
        in: query
        required: false
        schema:
          type: integer
          format: int64
          minimum: 0
      responses:
        '200':
          description: Suggestions updated
          content:
            application/json:
              schema: {}
        '204':
          description: No changes since provided version
        '401':
          description: Unauthorized
      description: Retrieve feedback suggestions updated since a provided version
        cursor, enabling incremental refresh.
      summary: Fetch feedback updates
  /admin/feedback/versions:
    get:
      tags:
      - Admin/Feedback
      operationId: feedback_versions_doc
      responses:
        '200':
          description: Available snapshots
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized
      description: Enumerate available feedback snapshots that can be inspected or
        rolled back to.
      summary: List feedback snapshots
  /admin/goldens/add:
    post:
      tags:
      - Admin/Experiments
      operationId: goldens_add_doc
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoldensAddRequest'
        required: true
      responses:
        '200':
          description: Golden added
          content:
            application/json:
              schema: {}
        '400':
          description: Persist failed
        '401':
          description: Unauthorized
      description: Append a golden item to the specified project collection and persist
        the updated set.
      summary: Add golden record
  /admin/goldens/list:
    get:
      tags:
      - Admin/Experiments
      operationId: goldens_list_doc
      parameters:
      - name: proj
        in: query
        required: false
        schema:
          type: string
      responses:
        '200':
          description: Project goldens
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoldensListResponse'
        '401':
          description: Unauthorized
      description: Return the golden dataset for the requested project, including
        individual test cases.
      summary: List golden records
  /admin/goldens/run:
    post:
      tags:
      - Admin/Experiments
      operationId: goldens_run_doc
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoldensRunRequest'
        required: true
      responses:
        '200':
          description: Evaluation summary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvalSummary'
        '401':
          description: Unauthorized
      description: Run the supplied golden dataset against the current chat runtime
        and report evaluation metrics.
      summary: Evaluate golden set
  /admin/governor/hints:
    get:
      tags:
      - Admin/Introspect
      operationId: governor_hints_get_doc
      responses:
        '200':
          description: Governor hints
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hints'
        '401':
          description: Unauthorized
      description: Return the currently effective governor hints that shape scheduling
        and retrieval behaviour.
      summary: Inspect governor hints
    post:
      tags:
      - Admin/Introspect
      operationId: governor_hints_set_doc
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GovernorHintsRequest'
        required: true
      responses:
        '200':
          description: Hints updated
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized
      description: Apply new governor hints to adjust scheduling, retrieval, and context
        construction parameters.
      summary: Update governor hints
  /admin/governor/profile:
    get:
      tags:
      - Admin/Introspect
      operationId: governor_profile_get_doc
      responses:
        '200':
          description: Governor profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GovernorProfileResponse'
        '401':
          description: Unauthorized
      description: Return the active governor profile name configured for the node.
      summary: Get governor profile
    post:
      tags:
      - Admin/Introspect
      operationId: governor_profile_set_doc
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GovernorProfileRequest'
        required: true
      responses:
        '200':
          description: Profile updated
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized
      description: Switch the governor to the requested profile and broadcast the
        change.
      summary: Set governor profile
  /admin/hierarchy/accept:
    post:
      tags:
      - Admin/Hierarchy
      operationId: hierarchy_accept_doc
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CoreAccept'
        required: true
      responses:
        '200':
          description: Accept processed
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized
      description: Accept a hierarchy offer message to finalize a connection with
        the given participant.
      summary: Accept hierarchy offer
  /admin/hierarchy/hello:
    post:
      tags:
      - Admin/Hierarchy
      operationId: hierarchy_hello_doc
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CoreHello'
        required: true
      responses:
        '200':
          description: Hello processed
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized
      description: Emit the initial hello message in the hierarchy handshake with
        another participant.
      summary: Send hierarchy hello
  /admin/hierarchy/offer:
    post:
      tags:
      - Admin/Hierarchy
      operationId: hierarchy_offer_doc
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CoreOffer'
        required: true
      responses:
        '200':
          description: Offer processed
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized
      description: Publish a hierarchy offer to negotiate roles and capabilities with
        a peer.
      summary: Offer hierarchy connection
  /admin/hierarchy/role:
    post:
      tags:
      - Admin/Hierarchy
      operationId: hierarchy_role_set_doc
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRequest'
        required: true
      responses:
        '200':
          description: Role updated
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized
      description: Update hierarchy role assignments for a participant and persist
        the change.
      summary: Set hierarchy roles
  /admin/hierarchy/state:
    get:
      tags:
      - Admin/Hierarchy
      operationId: hierarchy_state_doc
      responses:
        '200':
          description: Hierarchy state
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized
      description: Return the current hierarchy session map, including offers, participants,
        and active roles.
      summary: Inspect hierarchy state
  /admin/memory:
    get:
      tags:
      - Admin/Memory
      summary: List recent memory records
      operationId: admin_memory_list_doc
      parameters:
      - name: lane
        in: query
        required: false
        schema:
          type: string
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: Memory snapshot
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '501':
          description: Kernel disabled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      description: Return the latest memory items for inspection; supports lane and
        limit filters for debugging.
  /admin/memory/apply:
    post:
      tags:
      - Admin/Memory
      summary: Upsert memory record
      operationId: admin_memory_apply_doc
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemoryApplyReq'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '501':
          description: Kernel disabled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      description: Insert or update a memory item via the admin helper and emit the
        associated memory events for auditing.
  /admin/memory/quarantine:
    get:
      tags:
      - Review
      operationId: memory_quarantine_get_doc
      responses:
        '200':
          description: Memory quarantine entries
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized
      description: Return entries awaiting review in the memory quarantine queue.
      summary: List quarantined memories
    post:
      tags:
      - Review
      operationId: memory_quarantine_queue_doc
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemoryQuarantineRequest'
        required: true
      responses:
        '200':
          description: Queued for review
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized
        '500':
          description: Storage error
      description: Enqueue a memory item for quarantine review and emit the appropriate
        audit event.
      summary: Queue memory for review
  /admin/memory/quarantine/admit:
    post:
      tags:
      - Review
      operationId: memory_quarantine_admit_doc
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemoryQuarantineAdmit'
        required: true
      responses:
        '200':
          description: Entry removed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemoryQuarantineAdmitResponse'
        '401':
          description: Unauthorized
        '500':
          description: Storage error
      description: Remove a memory from quarantine, optionally admitting or rejecting
        it, and report the outcome.
      summary: Admit quarantined memory
  /admin/models:
    get:
      tags:
      - Models
      operationId: models_list_doc
      responses:
        '200':
          description: Models list
          content:
            application/json:
              schema:
                type: array
                items: {}
        '401':
          description: Unauthorized
      description: Return the configured model entries including provider metadata.
      summary: List models
  /admin/models/add:
    post:
      tags:
      - Models
      operationId: models_add_doc
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelEntry'
        required: true
      responses:
        '200':
          description: Added
          content:
            application/json:
              schema: {}
        '400':
          description: Invalid input
      description: Register a model entry with optional provider, path, and status
        metadata.
      summary: Add model entry
  /admin/models/by-hash/{sha256}:
    get:
      tags:
      - Models
      operationId: models_blob_by_hash_doc
      parameters:
      - name: sha256
        in: path
        description: Model blob SHA-256 (hex)
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Model blob
          content:
            application/octet-stream: {}
        '304':
          description: Not modified
        '400':
          description: Invalid hash
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized
        '404':
          description: Blob not found
          content:
            application/json:
              schema: {}
        '500':
          description: Read error
          content:
            application/json:
              schema: {}
      description: Stream a CAS-stored model blob by SHA-256 with caching headers
        and partial range support.
      summary: Download model blob
  /admin/models/cas_gc:
    post:
      tags:
      - Models
      operationId: models_cas_gc_doc
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CasGcRequest'
        required: true
      responses:
        '200':
          description: GC summary
          content:
            application/json:
              schema: {}
        '501':
          description: CAS GC unavailable
      description: Execute a content-addressed store cleanup pass and report removed
        blobs.
      summary: Run CAS garbage collection
  /admin/models/concurrency:
    get:
      tags:
      - Models
      operationId: models_concurrency_get_doc
      responses:
        '200':
          description: Concurrency
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelsConcurrencySnapshot'
      description: Return the current model concurrency settings and snapshot telemetry.
      summary: Inspect model concurrency
    post:
      tags:
      - Models
      operationId: models_concurrency_set_doc
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConcurrencyUpdate'
        required: true
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelsConcurrencySnapshot'
      description: Apply new concurrency limits or blocking behaviour for model execution.
      summary: Update model concurrency
  /admin/models/default:
    get:
      tags:
      - Models
      operationId: models_default_get_doc
      responses:
        '200':
          description: Default model
          content:
            application/json:
              schema: {}
      description: Return the identifier of the default model selection.
      summary: Get default model
    post:
      tags:
      - Models
      operationId: models_default_set_doc
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelId'
        required: true
      responses:
        '200':
          description: Set
          content:
            application/json:
              schema: {}
        '400':
          description: Unknown model
      description: Select the default model to be used for future requests.
      summary: Set default model
  /admin/models/download:
    post:
      tags:
      - Models
      operationId: models_download_doc
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DownloadRequest'
        required: true
      responses:
        '200':
          description: Download accepted
          content:
            application/json:
              schema: {}
        '501':
          description: Download unavailable
      description: Request download or import of a model artifact and enqueue the
        job if supported.
      summary: Start model download
  /admin/models/download/cancel:
    post:
      tags:
      - Models
      operationId: models_download_cancel_doc
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelId'
        required: true
      responses:
        '200':
          description: Cancellation requested
          content:
            application/json:
              schema: {}
        '501':
          description: Cancel unavailable
      description: Cancel an in-flight model download job when the backend supports
        it.
      summary: Cancel model download
  /admin/models/jobs:
    get:
      tags:
      - Models
      operationId: models_jobs_doc
      responses:
        '200':
          description: Jobs
          content:
            application/json:
              schema: {}
      description: Return the current queue of model download and load jobs with their
        statuses.
      summary: Inspect model jobs
  /admin/models/load:
    post:
      tags:
      - Models
      operationId: models_load_doc
      responses:
        '200':
          description: Loaded list
          content:
            application/json:
              schema:
                type: array
                items: {}
        '404':
          description: Missing models.json
      description: Load model entries from the persisted manifest on disk.
      summary: Load model manifest
  /admin/models/refresh:
    post:
      tags:
      - Models
      operationId: models_refresh_doc
      responses:
        '200':
          description: Refreshed list
          content:
            application/json:
              schema:
                type: array
                items: {}
      description: Refresh the live model list from runtime state and return the updated
        entries.
      summary: Refresh models list
  /admin/models/remove:
    post:
      tags:
      - Models
      operationId: models_remove_doc
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelId'
        required: true
      responses:
        '200':
          description: Removed
          content:
            application/json:
              schema: {}
      description: Remove a model entry by identifier and report whether it existed.
      summary: Remove model entry
  /admin/models/save:
    post:
      tags:
      - Models
      operationId: models_save_doc
      responses:
        '200':
          description: Saved
          content:
            application/json:
              schema: {}
      description: Persist the current model registry to the on-disk manifest.
      summary: Save model manifest
  /admin/models/summary:
    get:
      tags:
      - Models
      operationId: models_summary_doc
      responses:
        '200':
          description: Models summary
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized
      description: Return aggregate statistics about installed models, storage usage,
        and capabilities.
      summary: Summarize model catalog
  /admin/probe:
    get:
      tags:
      - Admin/Introspect
      summary: Inspect effective paths
      operationId: probe_effective_paths_doc
      responses:
        '200':
          description: Effective paths
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized
      description: Return the resolved state, cache, and config directories plus runtime
        metadata so operators can confirm filesystem layout.
  /admin/probe/hw:
    get:
      tags:
      - Admin/Introspect
      summary: Probe runtime hardware
      operationId: probe_hw_doc
      responses:
        '200':
          description: Hardware and software info
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized
      description: "Report detected hardware and OS capabilities\u2014including CPU,\
        \ GPU, and accelerators\u2014to confirm what the node can access."
  /admin/probe/metrics:
    get:
      tags:
      - Admin/Introspect
      summary: Probe metrics snapshot
      operationId: probe_metrics_doc
      responses:
        '200':
          description: System metrics
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized
      description: Return the current metrics summary (Prometheus-style counters and
        histograms) for quick diagnostics.
  /admin/self_model/apply:
    post:
      tags:
      - Admin/SelfModel
      operationId: self_model_apply_doc
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SelfModelApplyRequest'
        required: true
      responses:
        '200':
          description: Proposal applied
          content:
            application/json:
              schema: {}
        '400':
          description: Invalid request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema: {}
        '404':
          description: Proposal not found
          content:
            application/json:
              schema: {}
      description: Apply a previously proposed self-model change and notify subscribers.
      summary: Apply self-model proposal
  /admin/self_model/propose:
    post:
      tags:
      - Admin/SelfModel
      operationId: self_model_propose_doc
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SelfModelProposeRequest'
        required: true
      responses:
        '200':
          description: Proposal created
          content:
            application/json:
              schema: {}
        '400':
          description: Invalid request
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema: {}
      description: Submit a self-model patch proposal for an agent and emit the proposal
        event.
      summary: Propose self-model update
  /admin/tools:
    get:
      tags:
      - Admin/Tools
      operationId: tools_list_doc
      responses:
        '200':
          description: Registered tools
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized
      description: Return the catalog of available tools with stability and capability
        metadata.
      summary: List registered tools
  /admin/tools/cache_stats:
    get:
      tags:
      - Admin/Tools
      operationId: tools_cache_stats_doc
      responses:
        '200':
          description: Cache statistics
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized
      description: Return cache utilisation metrics for the shared tool cache.
      summary: Inspect tool cache statistics
  /admin/tools/run:
    post:
      tags:
      - Admin/Tools
      operationId: tools_run_doc
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ToolRunRequest'
        required: true
      responses:
        '200':
          description: Tool output
          content:
            application/json:
              schema: {}
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Unknown tool
        '500':
          description: Tool runtime error
      description: Execute a registered tool with the provided input payload and return
        its output.
      summary: Run tool
  /admin/world_diffs:
    get:
      tags:
      - Review
      operationId: world_diffs_get_doc
      responses:
        '200':
          description: Queued world diffs
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized
      description: Return the queue of pending world diffs awaiting review.
      summary: List world diffs
  /admin/world_diffs/decision:
    post:
      tags:
      - Review
      operationId: world_diffs_decision_doc
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorldDiffDecision'
        required: true
      responses:
        '200':
          description: Decision recorded
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized
        '404':
          description: Diff not found
        '500':
          description: Storage error
      description: Accept or reject a queued world diff and persist the decision outcome.
      summary: Record world diff decision
  /admin/world_diffs/queue:
    post:
      tags:
      - Review
      operationId: world_diffs_queue_doc
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorldDiffQueueRequest'
        required: true
      responses:
        '200':
          description: Diff queued
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized
        '500':
          description: Storage error
      description: Enqueue a world diff for review with the supplied metadata.
      summary: Queue world diff
  /events:
    get:
      tags:
      - Events
      summary: Stream event feed
      description: Open the Server-Sent Events stream of normalized envelopes; supports
        prefix filtering and Last-Event-ID replay.
      operationId: events_sse_doc
      parameters:
      - name: after
        in: query
        description: Resume after id or Last-Event-ID header
        required: false
        schema:
          type: integer
          format: int64
      - name: replay
        in: query
        description: Replay the last N events (when after not set)
        required: false
        schema:
          type: integer
          minimum: 0
      - name: Last-Event-ID
        in: header
        description: Resume using Last-Event-ID header
        required: false
        schema:
          type:
          - string
          - 'null'
      - name: prefix
        in: query
        description: CSV of event kind prefixes to include
        required: false
        schema:
          type: string
      responses:
        '200':
          description: SSE stream of events
          content:
            text/event-stream: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '501':
          description: Kernel disabled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /healthz:
    get:
      tags:
      - Meta
      summary: Readiness probe
      description: 'Return a simple readiness payload (`{"ok": true}`) suitable for
        health checks and load balancers.'
      operationId: healthz_doc
      responses:
        '200':
          description: Service healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthOk'
  /metrics:
    get:
      tags:
      - Public
      operationId: metrics_prometheus_doc
      responses:
        '200':
          description: Prometheus metrics
          content:
            text/plain:
              schema:
                type: string
      description: Serve Prometheus-formatted metrics for the unified server, including
        tool cache counters.
      summary: Export Prometheus metrics
  /orchestrator/mini_agents:
    get:
      tags:
      - Orchestrator
      summary: List mini-agent templates
      operationId: orchestrator_mini_agents_doc
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema: {}
        '501':
          description: Kernel disabled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      description: Return placeholder metadata about available mini-agents while the
        orchestrator capability is incubating.
  /orchestrator/mini_agents/start_training:
    post:
      tags:
      - Orchestrator
      summary: Start mini-agent training
      operationId: orchestrator_start_training_doc
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrchestratorStartReq'
        required: true
      responses:
        '202':
          description: ''
          content:
            application/json:
              schema: {}
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '501':
          description: Kernel disabled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      description: Kick off a training job that will propose a Logic Unit configuration
        once complete; returns an async job handle when accepted.
  /projects:
    post:
      tags:
      - Projects
      operationId: projects_create_unified_doc
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreateRequest'
        required: true
      responses:
        '200':
          description: Project created
          content:
            application/json:
              schema: {}
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        '500':
          description: Error
      description: Create a new project directory, seed default notes, and emit the
        creation event.
      summary: Create project
  /projects/{proj}/file:
    put:
      tags:
      - Projects
      operationId: projects_file_put_doc
      parameters:
      - name: proj
        in: path
        description: Project name
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: Relative path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectFileWrite'
        required: true
      responses:
        '200':
          description: File written
          content:
            application/json:
              schema: {}
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        '409':
          description: Conflict
        '500':
          description: Error
      description: Create or replace a project file at the given path, enforcing optimistic
        concurrency and quotas.
      summary: Write project file
    patch:
      tags:
      - Projects
      operationId: projects_file_patch_unified_doc
      parameters:
      - name: proj
        in: path
        description: Project name
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: Relative path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectPatchRequest'
        required: true
      responses:
        '200':
          description: File patched
          content:
            application/json:
              schema: {}
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        '409':
          description: Conflict
        '500':
          description: Error
      description: Apply a JSON patch or diff patch to an existing project file while
        checking version guards.
      summary: Patch project file
  /projects/{proj}/import:
    post:
      tags:
      - Projects
      operationId: projects_import_unified_doc
      parameters:
      - name: proj
        in: path
        description: Project name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectImportRequest'
        required: true
      responses:
        '200':
          description: Imported
          content:
            application/json:
              schema: {}
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Error
      description: Copy or move a file from the staging area into the project workspace
        and emit audit events.
      summary: Import project asset
  /projects/{proj}/notes:
    put:
      tags:
      - Projects
      operationId: projects_notes_put_doc
      parameters:
      - name: proj
        in: path
        description: Project name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectNotesWrite'
        required: true
      responses:
        '200':
          description: Notes saved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectNotesSaveResponse'
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        '500':
          description: Error
      description: Replace the project notes document and return metadata for the
        updated file.
      summary: Save project notes
  /research_watcher/{id}/approve:
    post:
      tags:
      - Research
      operationId: research_watcher_approve_doc
      parameters:
      - name: id
        in: path
        description: Watcher item id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WatcherDecision'
        required: true
      responses:
        '200':
          description: Updated item
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Error
      description: Mark a research watcher entry as approved, optionally attaching
        an operator note.
      summary: Approve research watcher item
  /research_watcher/{id}/archive:
    post:
      tags:
      - Research
      operationId: research_watcher_archive_doc
      parameters:
      - name: id
        in: path
        description: Watcher item id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WatcherDecision'
        required: true
      responses:
        '200':
          description: Updated item
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Error
      description: Archive a research watcher entry to remove it from the active queue
        while preserving audit history.
      summary: Archive research watcher item
  /spec/health:
    get:
      tags:
      - Specs
      summary: Inspect spec artifacts
      operationId: spec_health_doc
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema: {}
      description: Report presence, size, and checksum information for bundled OpenAPI,
        AsyncAPI, and schema artifacts.
  /staging/actions/{id}/approve:
    post:
      tags:
      - Staging
      operationId: staging_action_approve_doc
      parameters:
      - name: id
        in: path
        description: Staging entry id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StagingDecision'
        required: true
      responses:
        '200':
          description: Action queued
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Error
      description: Approve a staged action so it can execute and emit the resulting
        workflow job.
      summary: Approve staging action
  /staging/actions/{id}/deny:
    post:
      tags:
      - Staging
      operationId: staging_action_deny_doc
      parameters:
      - name: id
        in: path
        description: Staging entry id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StagingDecision'
        required: true
      responses:
        '200':
          description: Action denied
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Error
      description: Deny a staged action with an optional reason, preventing it from
        executing.
      summary: Deny staging action
  /state/actions:
    get:
      tags:
      - State
      summary: List recent actions
      description: Return the rolling window of actions emitted by the kernel, ordered
        from newest to oldest.
      operationId: state_actions_doc
      parameters:
      - name: limit
        in: query
        description: Max number of rows to return (1-2000).
        required: false
        schema:
          type:
          - integer
          - 'null'
          format: int64
      - name: state
        in: query
        description: Filter by exact action state (e.g., queued, running, completed).
        required: false
        schema:
          type:
          - string
          - 'null'
      - name: kind_prefix
        in: query
        description: Restrict results to action kinds beginning with this prefix (e.g.,
          `chat.`).
        required: false
        schema:
          type:
          - string
          - 'null'
      - name: updated_since
        in: query
        description: Only include actions updated at or after this RFC3339 timestamp.
        required: false
        schema:
          type:
          - string
          - 'null'
      responses:
        '200':
          description: Actions list
          content:
            application/json:
              schema: {}
        '501':
          description: Kernel disabled
          content:
            application/json:
              schema: {}
  /state/beliefs:
    get:
      tags:
      - State
      summary: Inspect belief store
      description: Return the current belief entries derived from events so clients
        can reason over world facts.
      operationId: state_beliefs_doc
      responses:
        '200':
          description: Beliefs snapshot
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema: {}
  /state/cluster:
    get:
      tags:
      - State
      summary: Inspect cluster nodes
      description: Return the snapshot of known cluster nodes, their roles, and health
        metadata.
      operationId: state_cluster_doc
      responses:
        '200':
          description: Cluster nodes
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema: {}
  /state/experiments:
    get:
      tags:
      - State
      summary: List experiment events
      operationId: state_experiments_doc
      responses:
        '200':
          description: Experiment events
          content:
            application/json:
              schema: {}
      description: Expose the experiment read-model summarizing variants, assignments,
        and recent outcomes.
  /state/guardrails_metrics:
    get:
      tags:
      - State
      summary: Inspect guardrail metrics
      operationId: state_guardrails_metrics_doc
      responses:
        '200':
          description: Guardrails metrics
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema: {}
      description: Return guardrail circuit-breaker counters and latency measurements
        for monitoring automation health.
  /state/intents:
    get:
      tags:
      - State
      summary: List recent intents
      description: Return the rolling window of intent events emitted by the kernel.
      operationId: state_intents_doc
      responses:
        '200':
          description: Recent intents
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema: {}
  /state/models:
    get:
      tags:
      - State
      summary: Inspect model catalog
      description: Return the derived model catalog with provider metadata, install
        status, and version details.
      operationId: state_models_doc
      responses:
        '200':
          description: Model catalog
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelsCatalogResponse'
  /state/models_hashes:
    get:
      tags:
      - State
      operationId: state_models_hashes_doc
      parameters:
      - name: limit
        in: query
        description: Page size (default 100)
        required: false
        schema:
          type: integer
          minimum: 0
      - name: offset
        in: query
        description: Start offset
        required: false
        schema:
          type: integer
          minimum: 0
      - name: provider
        in: query
        description: Filter by provider
        required: false
        schema:
          type: string
      - name: model
        in: query
        description: Filter by referencing model id
        required: false
        schema:
          type: string
      - name: sort
        in: query
        description: Sort key (bytes|sha256|path|providers_count)
        required: false
        schema:
          type: string
      - name: order
        in: query
        description: Order asc|desc
        required: false
        schema:
          type: string
      responses:
        '200':
          description: Installed hashes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HashPage'
      description: Return a paginated view of installed model blobs with filters for
        provider, size, and hash.
      summary: List installed model hashes
  /state/models_metrics:
    get:
      tags:
      - State
      description: Return model runtime metrics, including cache hits and latency
        data, for observability dashboards.
      operationId: state_models_metrics_doc
      responses:
        '200':
          description: Metrics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelsMetricsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema: {}
      summary: Inspect model metrics
  /state/observations:
    get:
      tags:
      - State
      summary: List recent observations
      description: Return the rolling window of observation events captured from the
        live event bus.
      operationId: state_observations_doc
      parameters:
      - name: limit
        in: query
        description: Limit the number of items returned (most recent first); defaults
          to all retained observations.
        required: false
        schema:
          type:
          - integer
          - 'null'
          minimum: 0
      - name: kind_prefix
        in: query
        description: Restrict results to event kinds matching this prefix (e.g. `actions.`).
        required: false
        schema:
          type:
          - string
          - 'null'
      - name: since
        in: query
        description: Only include observations emitted after this RFC3339 timestamp.
        required: false
        schema:
          type:
          - string
          - 'null'
      responses:
        '200':
          description: Recent observations
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema: {}
  /state/orchestrator/jobs:
    get:
      tags:
      - Orchestrator
      summary: Orchestrator jobs snapshot
      operationId: state_orchestrator_jobs_doc
      parameters:
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema: {}
        '501':
          description: Kernel disabled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
      description: Return the current orchestrator job queue with statuses, progress,
        and the submitted training hints (preset/diversity/recency/compression) for
        each run.
  /state/projects:
    get:
      tags:
      - State/Projects
      operationId: state_projects_list_doc
      responses:
        '200':
          description: Projects list
          content:
            application/json:
              schema: {}
      description: Return the cached project snapshot with file tree, notes, and metadata
        for quick reads.
      summary: Snapshot project catalog
  /state/projects/{proj}/file:
    get:
      tags:
      - State/Projects
      operationId: state_projects_file_get_doc
      parameters:
      - name: proj
        in: path
        description: Project name
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: Relative path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Project file
          content:
            application/json:
              schema: {}
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        '404':
          description: Not found
      description: Return the latest stored contents for a project file identified
        by project and relative path.
      summary: Fetch project file snapshot
  /state/projects/{proj}/notes:
    get:
      tags:
      - State/Projects
      operationId: state_projects_notes_doc
      parameters:
      - name: proj
        in: path
        description: Project name
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Project notes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectNotesDocument'
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
      description: Return the current project notes document with metadata such as
        checksum and size.
      summary: Fetch project notes
  /state/projects/{proj}/tree:
    get:
      tags:
      - State/Projects
      operationId: state_projects_tree_doc
      parameters:
      - name: proj
        in: path
        description: Project name
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: Relative path
        required: false
        schema:
          type: string
      responses:
        '200':
          description: Project tree
          content:
            application/json:
              schema: {}
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        '404':
          description: Not found
      description: Return a directory listing for a project path to help clients explore
        workspace structure.
      summary: Browse project tree
  /state/research_watcher:
    get:
      tags:
      - State
      summary: Inspect research watcher
      operationId: state_research_watcher_doc
      parameters:
      - name: status
        in: query
        description: Filter by status
        required: false
        schema:
          type: string
      - name: limit
        in: query
        description: Max items (1-500)
        required: false
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: Research watcher items
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized
        '501':
          description: Kernel disabled
          content:
            application/json:
              schema: {}
      description: Return the research watcher queue snapshot with pending items,
        statuses, and telemetry.
  /state/route_stats:
    get:
      tags:
      - State
      summary: Inspect route metrics
      operationId: state_route_stats_doc
      responses:
        '200':
          description: Route stats
          content:
            application/json:
              schema: {}
      description: Return per-route counters, durations, and cache statistics aggregated
        by the server.
  /state/runtime_matrix:
    get:
      tags:
      - State
      summary: Inspect runtime matrix
      operationId: state_runtime_matrix_doc
      responses:
        '200':
          description: Runtime matrix
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuntimeMatrixResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema: {}
      description: Return the runtime matrix covering available runtimes, capabilities,
        and health signals.
  /state/staging/actions:
    get:
      tags:
      - State
      summary: Inspect staging actions
      operationId: state_staging_actions_doc
      parameters:
      - name: status
        in: query
        description: Filter by status
        required: false
        schema:
          type: string
      - name: limit
        in: query
        description: Max items (1-500)
        required: false
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: Staging actions
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized
        '501':
          description: Kernel disabled
          content:
            application/json:
              schema: {}
      description: Return staged actions awaiting review or execution in the staging
        queue.
  /state/tasks:
    get:
      tags:
      - State
      summary: Inspect background tasks
      operationId: state_tasks_doc
      responses:
        '200':
          description: Background tasks
          content:
            application/json:
              schema: {}
      description: Return the background task registry with progress, retry counts,
        and assigned workers.
  /state/training/telemetry:
    get:
      tags:
      - State
      summary: Inspect training telemetry
      operationId: state_training_telemetry_doc
      responses:
        '200':
          description: Training metrics
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized
      description: Return aggregated Training Park telemetry, including success ratios,
        recall, and coverage metrics.
  /state/world:
    get:
      tags:
      - State
      summary: Inspect world model
      description: Return the active world graph snapshot with claims, provenance
        metadata, and belief relationships.
      operationId: state_world_doc
      parameters:
      - name: proj
        in: query
        description: Project id
        required: false
        schema:
          type: string
      responses:
        '200':
          description: World model
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema: {}
  /state/world/select:
    get:
      tags:
      - State
      summary: Select world claims
      description: Evaluate a query against the world graph and return the top-k claims
        that match the provided filters.
      operationId: state_world_select_doc
      parameters:
      - name: proj
        in: query
        description: Project id
        required: false
        schema:
          type: string
      - name: q
        in: query
        description: Query string
        required: false
        schema:
          type: string
      - name: k
        in: query
        description: Top K
        required: false
        schema:
          type: integer
          minimum: 0
      - name: lambda
        in: query
        description: Diversity weight (0-1)
        required: false
        schema:
          type: number
          format: double
      responses:
        '200':
          description: Selected claims
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema: {}
components:
  schemas:
    AboutCounts:
      type: object
      required:
      - public
      - admin
      - total
      properties:
        admin:
          type: integer
          minimum: 0
        public:
          type: integer
          minimum: 0
        total:
          type: integer
          minimum: 0
    AboutResponse:
      type: object
      required:
      - service
      - version
      - http
      - counts
      - endpoints
      - endpoints_meta
      - perf_preset
      properties:
        counts:
          $ref: '#/components/schemas/AboutCounts'
        docs_url:
          type:
          - string
          - 'null'
        endpoints:
          type: array
          items:
            type: string
          example:
          - GET /healthz
          - GET /about
        endpoints_meta:
          type: array
          items: {}
        http:
          $ref: '#/components/schemas/HttpInfo'
        perf_preset:
          $ref: '#/components/schemas/PerfPreset'
        security_posture:
          type:
          - string
          - 'null'
        service:
          type: string
        version:
          type: string
    AnyEnvelope:
      type: object
      required:
      - ok
      - data
      properties:
        code:
          type:
          - string
          - 'null'
        corr_id:
          type:
          - string
          - 'null'
        data: {}
        message:
          type:
          - string
          - 'null'
        ok:
          type: boolean
    CasGcRequest:
      type: object
      properties:
        ttl_hours:
          type:
          - integer
          - 'null'
          format: int64
          minimum: 0
        verbose:
          type:
          - boolean
          - 'null'
    ChatHistory:
      type: object
      required:
      - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ChatMessage'
    ChatMessage:
      type: object
      required:
      - id
      - role
      - content
      - ts_ms
      properties:
        content:
          type: string
        id:
          type: string
        role:
          type: string
        ts_ms:
          type: integer
          format: int64
          minimum: 0
    ChatSendReq:
      type: object
      required:
      - prompt
      properties:
        prompt:
          type: string
        temperature:
          type:
          - number
          - 'null'
          format: double
        vote_k:
          type:
          - integer
          - 'null'
          format: int64
          minimum: 0
    ChatSendResp:
      type: object
      required:
      - ok
      - backend
      - reply
      - history
      properties:
        backend:
          type: string
        history:
          type: array
          items:
            $ref: '#/components/schemas/ChatMessage'
        ok:
          type: boolean
        reply:
          $ref: '#/components/schemas/ChatMessage'
    ChatStatusResp:
      type: object
      required:
      - ok
      - backend
      - messages
      properties:
        backend:
          type: string
        latency_ms:
          type:
          - integer
          - 'null'
          format: int64
          minimum: 0
        messages:
          type: integer
          format: int64
          minimum: 0
        ok:
          type: boolean
    ConcurrencyUpdate:
      type: object
      properties:
        block:
          type:
          - boolean
          - 'null'
        hard_cap:
          type:
          - integer
          - 'null'
          format: int64
          minimum: 0
        max:
          type:
          - integer
          - 'null'
          format: int64
          minimum: 0
    CoreAccept:
      type: object
      required:
      - child_id
      - parent_id
      - role
      - epoch
      properties:
        child_id:
          type: string
        epoch:
          type: integer
          format: int64
          minimum: 0
        parent_id:
          type: string
        role:
          $ref: '#/components/schemas/CoreRole'
    CoreHello:
      type: object
      required:
      - id
      - role
      - capabilities
      - scope_tags
      - epoch
      - nonce
      properties:
        capabilities:
          type: array
          items:
            type: string
        epoch:
          type: integer
          format: int64
          minimum: 0
        id:
          type: string
        nonce:
          type: string
        role:
          $ref: '#/components/schemas/CoreRole'
        scope_tags:
          type: array
          items:
            type: string
    CoreOffer:
      type: object
      required:
      - from_id
      - proposed_role
      - shard_ranges
      properties:
        capacity_hint:
          type:
          - integer
          - 'null'
          format: int32
          minimum: 0
        from_id:
          type: string
        parent_hint:
          type:
          - string
          - 'null'
        proposed_role:
          $ref: '#/components/schemas/CoreRole'
        shard_ranges:
          type: array
          items:
            type: string
    CoreRole:
      type: string
      enum:
      - root
      - regional
      - edge
      - connector
      - observer
    DownloadRequest:
      type: object
      required:
      - id
      - sha256
      properties:
        id:
          type: string
        provider:
          type:
          - string
          - 'null'
        sha256:
          type: string
        url:
          type:
          - string
          - 'null'
    EvalResultItem:
      type: object
      required:
      - id
      - ok
      - latency_ms
      properties:
        id:
          type: string
        latency_ms:
          type: integer
          format: int64
          minimum: 0
        note:
          type:
          - string
          - 'null'
        ok:
          type: boolean
    EvalSummary:
      type: object
      required:
      - total
      - passed
      - failed
      - avg_latency_ms
      - items
      properties:
        avg_ctx_items:
          type: integer
          format: int64
          minimum: 0
        avg_ctx_tokens:
          type: integer
          format: int64
          minimum: 0
        avg_latency_ms:
          type: integer
          format: int64
          minimum: 0
        failed:
          type: integer
          minimum: 0
        items:
          type: array
          items:
            $ref: '#/components/schemas/EvalResultItem'
        passed:
          type: integer
          minimum: 0
        total:
          type: integer
          minimum: 0
    EventsJournalResponse:
      type: object
      required:
      - limit
      - total_matched
      - truncated
      - skipped_lines
      - source_files
      - entries
      properties:
        entries:
          type: array
          items: {}
        limit:
          type: integer
          minimum: 0
        prefixes:
          type:
          - array
          - 'null'
          items:
            type: string
        skipped_lines:
          type: integer
          minimum: 0
        source_files:
          type: array
          items:
            type: string
        total_matched:
          type: integer
          minimum: 0
        truncated:
          type: boolean
    Experiment:
      type: object
      required:
      - id
      - name
      - variants
      properties:
        id:
          type: string
        name:
          type: string
        variants:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/VariantCfg'
          propertyNames:
            type: string
    ExperimentActivateRequest:
      type: object
      required:
      - id
      - variant
      properties:
        id:
          type: string
        variant:
          type: string
    ExperimentAssignRequest:
      type: object
      required:
      - id
      - variant
      properties:
        agent:
          type:
          - string
          - 'null'
        id:
          type: string
        variant:
          type: string
    ExperimentDefineRequest:
      type: object
      required:
      - id
      - name
      properties:
        id:
          type: string
        name:
          type: string
        variants:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/VariantCfg'
          propertyNames:
            type: string
    ExperimentRunRequest:
      type: object
      required:
      - id
      - proj
      - variants
      properties:
        budget_total_ms:
          type:
          - integer
          - 'null'
          format: int64
          minimum: 0
        id:
          type: string
        proj:
          type: string
        variants:
          type: array
          items:
            type: string
    ExperimentStartRequest:
      type: object
      required:
      - name
      properties:
        assignment: {}
        budgets: {}
        name:
          type: string
        variants:
          type: array
          items:
            type: string
    ExperimentStopRequest:
      type: object
      required:
      - id
      properties:
        id:
          type: string
    ExperimentsListResponse:
      type: object
      required:
      - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Experiment'
    ExperimentsScoreboardResponse:
      type: object
      required:
      - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ScoreRow'
    ExperimentsWinnersResponse:
      type: object
      required:
      - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/WinnerInfo'
    FeedbackApplyRequest:
      type: object
      required:
      - id
      properties:
        id:
          type: string
    FeedbackAutoRequest:
      type: object
      required:
      - enabled
      properties:
        enabled:
          type: boolean
    FeedbackChange:
      type: object
      required:
      - id
      - action
      - before
      - after
      properties:
        action:
          type: string
        after:
          $ref: '#/components/schemas/FeedbackSummary'
        before:
          $ref: '#/components/schemas/FeedbackSummary'
        id:
          type: string
    FeedbackDelta:
      type: object
      properties:
        added:
          type: array
          items:
            $ref: '#/components/schemas/FeedbackSummary'
        changed:
          type: array
          items:
            $ref: '#/components/schemas/FeedbackChange'
        generated:
          type: string
        removed:
          type: array
          items:
            $ref: '#/components/schemas/FeedbackSummary'
        version:
          type: integer
          format: int64
          minimum: 0
    FeedbackSignal:
      type: object
      required:
      - id
      - ts
      - kind
      - target
      - confidence
      - severity
      properties:
        confidence:
          type: number
          format: double
        id:
          type: string
        kind:
          type: string
        note:
          type:
          - string
          - 'null'
        severity:
          type: integer
          format: int32
          minimum: 0
        target:
          type: string
        ts:
          type: string
    FeedbackSignalRequest:
      type: object
      required:
      - kind
      - target
      - confidence
      - severity
      properties:
        confidence:
          type: number
          format: double
        kind:
          type: string
        note:
          type:
          - string
          - 'null'
        severity:
          type: integer
          format: int32
          minimum: 0
        target:
          type: string
    FeedbackState:
      type: object
      properties:
        auto_apply:
          type: boolean
        delta_log:
          type: array
          items:
            $ref: '#/components/schemas/FeedbackDelta'
        signals:
          type: array
          items:
            $ref: '#/components/schemas/FeedbackSignal'
        suggestions:
          type: array
          items:
            $ref: '#/components/schemas/Suggestion'
    FeedbackSummary:
      type: object
      required:
      - id
      - action
      properties:
        action:
          type: string
        confidence:
          type:
          - number
          - 'null'
          format: double
        id:
          type: string
        params: {}
        rationale:
          type:
          - string
          - 'null'
    GoldenItem:
      type: object
      required:
      - id
      - kind
      properties:
        expect: {}
        id:
          type: string
        input: {}
        kind:
          type: string
    GoldensAddRequest:
      type: object
      required:
      - proj
      - kind
      properties:
        expect: {}
        id:
          type:
          - string
          - 'null'
        input: {}
        kind:
          type: string
        proj:
          type: string
    GoldensListResponse:
      type: object
      required:
      - project
      - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/GoldenItem'
        project:
          type: string
    GoldensRunRequest:
      type: object
      required:
      - proj
      properties:
        compression_aggr:
          type:
          - number
          - 'null'
          format: double
        limit:
          type:
          - integer
          - 'null'
          minimum: 0
        mmr_lambda:
          type:
          - number
          - 'null'
          format: double
        proj:
          type: string
        retrieval_k:
          type:
          - integer
          - 'null'
          minimum: 0
        temperature:
          type:
          - number
          - 'null'
          format: double
        vote_k:
          type:
          - integer
          - 'null'
          minimum: 0
    GovernorHintsRequest:
      type: object
      properties:
        compression_aggr:
          type:
          - number
          - 'null'
          format: double
        context_budget_tokens:
          type:
          - integer
          - 'null'
          minimum: 0
        context_footer:
          type:
          - string
          - 'null'
        context_format:
          type:
          - string
          - 'null'
        context_header:
          type:
          - string
          - 'null'
        context_item_budget_tokens:
          type:
          - integer
          - 'null'
          minimum: 0
        context_item_template:
          type:
          - string
          - 'null'
        event_buffer:
          type:
          - integer
          - 'null'
          minimum: 0
        http_timeout_secs:
          type:
          - integer
          - 'null'
          format: int64
          minimum: 0
        include_provenance:
          type:
          - boolean
          - 'null'
        joiner:
          type:
          - string
          - 'null'
        max_concurrency:
          type:
          - integer
          - 'null'
          minimum: 0
        mmr_lambda:
          type:
          - number
          - 'null'
          format: double
        mode:
          type:
          - string
          - 'null'
        retrieval_div:
          type:
          - number
          - 'null'
          format: double
        retrieval_k:
          type:
          - integer
          - 'null'
          minimum: 0
        slo_ms:
          type:
          - integer
          - 'null'
          format: int64
          minimum: 0
        vote_k:
          type:
          - integer
          - 'null'
          format: int32
          minimum: 0
    GovernorProfileRequest:
      type: object
      required:
      - name
      properties:
        name:
          type: string
    GovernorProfileResponse:
      type: object
      required:
      - profile
      properties:
        profile:
          type: string
    HashItem:
      type: object
      required:
      - sha256
      - bytes
      - path
      - providers
      properties:
        bytes:
          type: integer
          format: int64
          minimum: 0
        models:
          type: array
          items:
            type: string
        path:
          type: string
        providers:
          type: array
          items:
            type: string
        sha256:
          type: string
    HashPage:
      type: object
      required:
      - items
      - total
      - count
      - limit
      - offset
      - page
      - pages
      - last_offset
      properties:
        count:
          type: integer
          minimum: 0
        items:
          type: array
          items:
            $ref: '#/components/schemas/HashItem'
        last_offset:
          type: integer
          minimum: 0
        limit:
          type: integer
          minimum: 0
        next_offset:
          type:
          - integer
          - 'null'
          minimum: 0
        offset:
          type: integer
          minimum: 0
        page:
          type: integer
          minimum: 0
        pages:
          type: integer
          minimum: 0
        prev_offset:
          type:
          - integer
          - 'null'
          minimum: 0
        total:
          type: integer
          minimum: 0
    HealthOk:
      type: object
      required:
      - ok
      properties:
        ok:
          type: boolean
    Hints:
      type: object
      properties:
        compression_aggr:
          type:
          - number
          - 'null'
          format: double
        context_budget_tokens:
          type:
          - integer
          - 'null'
          minimum: 0
        context_footer:
          type:
          - string
          - 'null'
        context_format:
          type:
          - string
          - 'null'
        context_header:
          type:
          - string
          - 'null'
        context_item_budget_tokens:
          type:
          - integer
          - 'null'
          minimum: 0
        context_item_template:
          type:
          - string
          - 'null'
        event_buffer:
          type:
          - integer
          - 'null'
          minimum: 0
        http_timeout_secs:
          type:
          - integer
          - 'null'
          format: int64
          minimum: 0
        include_provenance:
          type:
          - boolean
          - 'null'
        joiner:
          type:
          - string
          - 'null'
        max_concurrency:
          type:
          - integer
          - 'null'
          minimum: 0
        mmr_lambda:
          type:
          - number
          - 'null'
          format: double
        mode:
          type:
          - string
          - 'null'
        retrieval_div:
          type:
          - number
          - 'null'
          format: double
        retrieval_k:
          type:
          - integer
          - 'null'
          minimum: 0
        slo_ms:
          type:
          - integer
          - 'null'
          format: int64
          minimum: 0
        vote_k:
          type:
          - integer
          - 'null'
          format: int32
          minimum: 0
    HttpInfo:
      type: object
      required:
      - bind
      - port
      properties:
        bind:
          type: string
        port:
          type: integer
          format: int32
          minimum: 0
    MemoryApplyReq:
      type: object
      required:
      - lane
      - value
      properties:
        agent_id:
          type:
          - string
          - 'null'
        dedupe:
          type: boolean
        durability:
          type:
          - string
          - 'null'
        embedding:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/MemoryEmbeddingReq'
        entities: {}
        extra: {}
        key:
          type:
          - string
          - 'null'
        keywords:
          type: array
          items:
            type: string
        kind:
          type:
          - string
          - 'null'
        lane:
          type: string
        links: {}
        privacy:
          type:
          - string
          - 'null'
        prob:
          type:
          - number
          - 'null'
          format: double
        project_id:
          type:
          - string
          - 'null'
        score:
          type:
          - number
          - 'null'
          format: double
        source: {}
        tags:
          type: array
          items:
            type: string
        text:
          type:
          - string
          - 'null'
        trust:
          type:
          - number
          - 'null'
          format: double
        ttl_s:
          type:
          - integer
          - 'null'
          format: int64
        value: {}
    MemoryEmbeddingReq:
      type: object
      required:
      - vector
      properties:
        hint:
          type:
          - string
          - 'null'
        vector:
          type: array
          items:
            type: number
            format: float
    MemoryQuarantineAdmit:
      type: object
      required:
      - id
      properties:
        decision:
          type:
          - string
          - 'null'
        id:
          type: string
        note:
          type:
          - string
          - 'null'
        reviewed_by:
          type:
          - string
          - 'null'
    MemoryQuarantineAdmitResponse:
      type: object
      required:
      - removed
      properties:
        entry:
          type: object
        removed:
          type: integer
          minimum: 0
    MemoryQuarantineRequest:
      type: object
      properties:
        content_preview:
          type:
          - string
          - 'null'
        content_type:
          type:
          - string
          - 'null'
        corr_id:
          type:
          - string
          - 'null'
        episode_id:
          type:
          - string
          - 'null'
        evidence_score:
          type:
          - number
          - 'null'
          format: double
        extractor:
          type:
          - string
          - 'null'
        id:
          type:
          - string
          - 'null'
        project_id:
          type:
          - string
          - 'null'
        provenance:
          type:
          - string
          - 'null'
        risk_markers:
          type:
          - array
          - 'null'
          items:
            type: string
        source:
          type:
          - string
          - 'null'
    ModelEntry:
      type: object
      required:
      - id
      properties:
        id:
          type: string
        path:
          type:
          - string
          - 'null'
        provider:
          type:
          - string
          - 'null'
        sha256:
          type:
          - string
          - 'null'
        status:
          type:
          - string
          - 'null'
    ModelId:
      type: object
      required:
      - id
      properties:
        id:
          type: string
    ModelsCatalogResponse:
      type: object
      required:
      - items
      properties:
        items:
          type: array
          items: {}
    ModelsConcurrencySnapshot:
      type: object
      description: Concurrency limits reported to callers.
      required:
      - configured_max
      - available_permits
      - held_permits
      properties:
        available_permits:
          type: integer
          format: int64
          minimum: 0
        configured_max:
          type: integer
          format: int64
          minimum: 0
        hard_cap:
          type:
          - integer
          - 'null'
          format: int64
          minimum: 0
        held_permits:
          type: integer
          format: int64
          minimum: 0
        pending_shrink:
          type:
          - integer
          - 'null'
          format: int64
          minimum: 0
    ModelsInflightEntry:
      type: object
      description: Snapshot of inflight model downloads keyed by checksum.
      required:
      - sha256
      - primary
      - count
      properties:
        count:
          type: integer
          format: int64
          minimum: 0
        followers:
          type: array
          items:
            type: string
        primary:
          type: string
        sha256:
          type: string
    ModelsJobDestination:
      type: object
      description: Destination metadata for a model download job.
      required:
      - host
      - port
      - protocol
      properties:
        host:
          type: string
        port:
          type: integer
          format: int32
          minimum: 0
        protocol:
          type: string
    ModelsJobSnapshot:
      type: object
      description: Snapshot of an active download job.
      required:
      - model_id
      - job_id
      - url
      - corr_id
      - dest
      - started_at
      properties:
        corr_id:
          type: string
        dest:
          $ref: '#/components/schemas/ModelsJobDestination'
        job_id:
          type: string
        model_id:
          type: string
        started_at:
          type: integer
          format: int64
          minimum: 0
        url:
          type: string
    ModelsMetricsResponse:
      type: object
      description: Complete payload returned by the metrics endpoint.
      required:
      - started
      - queued
      - admitted
      - resumed
      - canceled
      - completed
      - completed_cached
      - errors
      - bytes_total
      - preflight_ok
      - preflight_denied
      - preflight_skipped
      - coalesced
      - concurrency
      properties:
        admitted:
          type: integer
          format: int64
          minimum: 0
        bytes_total:
          type: integer
          format: int64
          minimum: 0
        canceled:
          type: integer
          format: int64
          minimum: 0
        coalesced:
          type: integer
          format: int64
          minimum: 0
        completed:
          type: integer
          format: int64
          minimum: 0
        completed_cached:
          type: integer
          format: int64
          minimum: 0
        concurrency:
          $ref: '#/components/schemas/ModelsConcurrencySnapshot'
        errors:
          type: integer
          format: int64
          minimum: 0
        ewma_mbps:
          type:
          - number
          - 'null'
          format: double
        inflight:
          type: array
          items:
            $ref: '#/components/schemas/ModelsInflightEntry'
        jobs:
          type: array
          items:
            $ref: '#/components/schemas/ModelsJobSnapshot'
        preflight_denied:
          type: integer
          format: int64
          minimum: 0
        preflight_ok:
          type: integer
          format: int64
          minimum: 0
        preflight_skipped:
          type: integer
          format: int64
          minimum: 0
        queued:
          type: integer
          format: int64
          minimum: 0
        resumed:
          type: integer
          format: int64
          minimum: 0
        runtime:
          $ref: '#/components/schemas/ModelsRuntimeConfig'
        started:
          type: integer
          format: int64
          minimum: 0
    ModelsRuntimeConfig:
      type: object
      description: Runtime tuning knobs applied to download jobs.
      required:
      - send_retries
      - stream_retries
      - retry_backoff_ms
      - preflight_enabled
      properties:
        idle_timeout_secs:
          type:
          - integer
          - 'null'
          format: int64
          minimum: 0
        preflight_enabled:
          type: boolean
        retry_backoff_ms:
          type: integer
          format: int64
          minimum: 0
        send_retries:
          type: integer
          format: int32
          minimum: 0
        stream_retries:
          type: integer
          format: int32
          minimum: 0
    OrchestratorStartReq:
      type: object
      required:
      - goal
      properties:
        budget: {}
        data: {}
        goal:
          type: string
        id:
          type:
          - string
          - 'null'
    PerfPreset:
      type: object
      properties:
        actions_queue_max:
          type:
          - integer
          - 'null'
          format: int64
        http_max_conc:
          type:
          - integer
          - 'null'
          minimum: 0
        tier:
          type:
          - string
          - 'null'
    ProblemDetails:
      type: object
      description: RFC7807-style error payload used at service edges.
      required:
      - type
      - title
      - status
      properties:
        code:
          type:
          - string
          - 'null'
        detail:
          type:
          - string
          - 'null'
        instance:
          type:
          - string
          - 'null'
        status:
          type: integer
          format: int32
          minimum: 0
        title:
          type: string
        trace_id:
          type:
          - string
          - 'null'
        type:
          type: string
    ProjectCreateRequest:
      type: object
      required:
      - name
      properties:
        name:
          type: string
    ProjectFileWrite:
      type: object
      properties:
        content:
          type:
          - string
          - 'null'
        content_b64:
          type:
          - string
          - 'null'
        prev_sha256:
          type:
          - string
          - 'null'
    ProjectImportRequest:
      type: object
      required:
      - proj
      - dest
      - src_path
      properties:
        dest:
          type: string
        mode:
          type:
          - string
          - 'null'
        proj:
          type: string
        src_path:
          type: string
    ProjectNotesDocument:
      type: object
      required:
      - proj
      - content
      properties:
        bytes:
          type:
          - integer
          - 'null'
          format: int64
          minimum: 0
        content:
          type: string
        modified:
          type:
          - string
          - 'null'
        proj:
          type: string
        sha256:
          type:
          - string
          - 'null'
    ProjectNotesSaveResponse:
      type: object
      required:
      - ok
      - proj
      - sha256
      - bytes
      properties:
        bytes:
          type: integer
          format: int64
          minimum: 0
        corr_id:
          type:
          - string
          - 'null'
        modified:
          type:
          - string
          - 'null'
        ok:
          type: boolean
        proj:
          type: string
        sha256:
          type: string
    ProjectNotesWrite:
      type: object
      required:
      - content
      properties:
        content:
          type: string
        prev_sha256:
          type:
          - string
          - 'null'
    ProjectPatchRequest:
      type: object
      required:
      - mode
      - content
      properties:
        content:
          type: string
        mode:
          type: string
        prev_sha256:
          type:
          - string
          - 'null'
    RoleRequest:
      type: object
      required:
      - role
      properties:
        role:
          type: string
    RunOutcome:
      type: object
      required:
      - exp_id
      - proj
      - results
      properties:
        exp_id:
          type: string
        proj:
          type: string
        results:
          type: array
          items:
            $ref: '#/components/schemas/RunOutcomeVariant'
        winner:
          type:
          - string
          - 'null'
    RunOutcomeVariant:
      type: object
      required:
      - variant
      - total
      - passed
      - failed
      - avg_latency_ms
      properties:
        avg_ctx_items:
          type: integer
          format: int64
          minimum: 0
        avg_ctx_tokens:
          type: integer
          format: int64
          minimum: 0
        avg_latency_ms:
          type: integer
          format: int64
          minimum: 0
        failed:
          type: integer
          minimum: 0
        passed:
          type: integer
          minimum: 0
        total:
          type: integer
          minimum: 0
        variant:
          type: string
    RuntimeMatrixAcceleratorSummary:
      type: object
      required:
      - total
      properties:
        states:
          type:
          - object
          - 'null'
          additionalProperties:
            type: integer
            format: int64
            minimum: 0
          propertyNames:
            type: string
        total:
          type: integer
          format: int64
          minimum: 0
    RuntimeMatrixBus:
      type: object
      required:
      - published
      - delivered
      - receivers
      - lagged
      - no_receivers
      properties:
        delivered:
          type: integer
          format: int64
          minimum: 0
        lagged:
          type: integer
          format: int64
          minimum: 0
        no_receivers:
          type: integer
          format: int64
          minimum: 0
        published:
          type: integer
          format: int64
          minimum: 0
        receivers:
          type: integer
          format: int64
          minimum: 0
    RuntimeMatrixEntry:
      type: object
      required:
      - target
      - status
      - generated
      - kernel
      - bus
      - events
      - http
      - runtime
      properties:
        bus:
          $ref: '#/components/schemas/RuntimeMatrixBus'
        events:
          $ref: '#/components/schemas/RuntimeMatrixEvents'
        generated:
          type: string
        http:
          $ref: '#/components/schemas/RuntimeMatrixHttp'
        kernel:
          $ref: '#/components/schemas/RuntimeMatrixKernel'
        runtime:
          $ref: '#/components/schemas/RuntimeMatrixRuntimeSummary'
        status:
          $ref: '#/components/schemas/RuntimeMatrixStatus'
        target:
          type: string
    RuntimeMatrixEvents:
      type: object
      required:
      - total
      - kinds
      properties:
        kinds:
          type: integer
          format: int64
          minimum: 0
        total:
          type: integer
          format: int64
          minimum: 0
    RuntimeMatrixHttp:
      type: object
      required:
      - routes
      - hits
      - errors
      properties:
        avg_ewma_ms:
          type:
          - number
          - 'null'
          format: double
        error_rate:
          type:
          - number
          - 'null'
          format: double
        errors:
          type: integer
          format: int64
          minimum: 0
        hits:
          type: integer
          format: int64
          minimum: 0
        routes:
          type: integer
          format: int64
          minimum: 0
        slow_routes:
          type:
          - array
          - 'null'
          items:
            type: string
    RuntimeMatrixKernel:
      type: object
      required:
      - enabled
      properties:
        enabled:
          type: boolean
    RuntimeMatrixResponse:
      type: object
      required:
      - items
      - ttl_seconds
      properties:
        items:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/RuntimeMatrixEntry'
          propertyNames:
            type: string
        ttl_seconds:
          type: integer
          format: int64
          minimum: 0
    RuntimeMatrixRuntimeSummary:
      type: object
      required:
      - total
      - updated
      properties:
        alerts:
          type:
          - array
          - 'null'
          items:
            type: string
        by_accelerator:
          type:
          - object
          - 'null'
          additionalProperties:
            $ref: '#/components/schemas/RuntimeMatrixAcceleratorSummary'
          propertyNames:
            type: string
        restart_pressure:
          type:
          - array
          - 'null'
          items:
            type: string
        severity:
          type:
          - object
          - 'null'
          additionalProperties:
            type: integer
            format: int64
            minimum: 0
          propertyNames:
            type: string
        states:
          type:
          - object
          - 'null'
          additionalProperties:
            type: integer
            format: int64
            minimum: 0
          propertyNames:
            type: string
        total:
          type: integer
          format: int64
          minimum: 0
        updated:
          type: string
    RuntimeMatrixStatus:
      type: object
      required:
      - code
      - severity
      - severity_label
      - label
      - aria_hint
      properties:
        aria_hint:
          type: string
        code:
          type: string
        detail:
          type: array
          items:
            type: string
        label:
          type: string
        severity:
          type: string
        severity_label:
          type: string
    ScoreEntry:
      type: object
      required:
      - passed
      - total
      - failed
      - avg_latency_ms
      properties:
        avg_ctx_items:
          type: integer
          format: int64
          minimum: 0
        avg_ctx_tokens:
          type: integer
          format: int64
          minimum: 0
        avg_latency_ms:
          type: integer
          format: int64
          minimum: 0
        failed:
          type: integer
          minimum: 0
        passed:
          type: integer
          minimum: 0
        time:
          type: string
        total:
          type: integer
          minimum: 0
    ScoreRow:
      type: object
      required:
      - exp_id
      - proj
      - variant
      - score
      properties:
        exp_id:
          type: string
        proj:
          type: string
        score:
          $ref: '#/components/schemas/ScoreEntry'
        variant:
          type: string
    SelfModelApplyRequest:
      type: object
      required:
      - proposal_id
      properties:
        proposal_id:
          type: string
    SelfModelProposeRequest:
      type: object
      required:
      - agent
      properties:
        agent:
          type: string
        patch: {}
        rationale:
          type:
          - string
          - 'null'
    StagingDecision:
      type: object
      properties:
        decided_by:
          type:
          - string
          - 'null'
        reason:
          type:
          - string
          - 'null'
    Suggestion:
      type: object
      required:
      - id
      - action
      - params
      properties:
        action:
          type: string
        confidence:
          type: number
          format: double
        id:
          type: string
        params: {}
        rationale:
          type: string
    ToolRunRequest:
      type: object
      required:
      - id
      properties:
        id:
          type: string
        input: {}
    VariantCfg:
      type: object
      properties:
        compression_aggr:
          type:
          - number
          - 'null'
          format: double
        context_budget_tokens:
          type:
          - integer
          - 'null'
          minimum: 0
        context_footer:
          type:
          - string
          - 'null'
        context_format:
          type:
          - string
          - 'null'
        context_header:
          type:
          - string
          - 'null'
        context_item_budget_tokens:
          type:
          - integer
          - 'null'
          minimum: 0
        context_item_template:
          type:
          - string
          - 'null'
        include_provenance:
          type:
          - boolean
          - 'null'
        joiner:
          type:
          - string
          - 'null'
        mmr_lambda:
          type:
          - number
          - 'null'
          format: double
        retrieval_div:
          type:
          - number
          - 'null'
          format: double
        retrieval_k:
          type:
          - integer
          - 'null'
          minimum: 0
        temperature:
          type:
          - number
          - 'null'
          format: double
        vote_k:
          type:
          - integer
          - 'null'
          minimum: 0
    WatcherDecision:
      type: object
      properties:
        note:
          type:
          - string
          - 'null'
    WinnerInfo:
      type: object
      required:
      - exp_id
      - proj
      - variant
      - time
      - passed
      - total
      - failed
      - avg_latency_ms
      properties:
        avg_ctx_items:
          type: integer
          format: int64
          minimum: 0
        avg_ctx_tokens:
          type: integer
          format: int64
          minimum: 0
        avg_latency_ms:
          type: integer
          format: int64
          minimum: 0
        exp_id:
          type: string
        failed:
          type: integer
          minimum: 0
        passed:
          type: integer
          minimum: 0
        proj:
          type: string
        time:
          type: string
        total:
          type: integer
          minimum: 0
        variant:
          type: string
    WorldDiffDecision:
      type: object
      required:
      - id
      - decision
      properties:
        decision:
          type: string
        id:
          type: string
        note:
          type:
          - string
          - 'null'
    WorldDiffQueueRequest:
      type: object
      properties:
        changes: {}
        from_node:
          type:
          - string
          - 'null'
        id:
          type:
          - string
          - 'null'
        project_id:
          type:
          - string
          - 'null'
        summary:
          type:
          - string
          - 'null'
tags:
- name: Meta
  description: Service metadata and health
- name: State
  description: "Read\u2011models (actions, models, egress, episodes)"
- name: State/Projects
  description: Project tree and notes read-models
- name: Events
  description: "Server\u2011Sent Events stream"
- name: Models
  description: Model steward admin endpoints
- name: Projects
  description: Project workspace management
- name: Review
  description: World diff and memory review utilities
- name: Specs
  description: Specification document endpoints
- name: Distill
  description: Distillation endpoints
- name: Orchestrator
  description: Orchestrator endpoints
- name: Public
  description: Public endpoints
- name: Admin/Introspect
  description: Administrative probes and telemetry
- name: Admin/Hierarchy
  description: Hierarchy coordination endpoints
- name: Admin/SelfModel
  description: Self-model lifecycle endpoints
- name: Admin/Review
  description: Memory quarantine and world diff review queue
- name: Admin/Feedback
  description: Feedback engine signals and suggestions
- name: Admin/Tools
  description: Tool Forge and action cache
- name: Admin/Chat
  description: Administrative chat endpoints
- name: Admin/Experiments
  description: Administrative experiments endpoints
- name: Admin/Memory
  description: Administrative memory endpoints
- name: Research
  description: Research watcher workflow
- name: Staging
  description: Human-in-the-loop approvals queue
