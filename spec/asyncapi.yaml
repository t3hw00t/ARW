asyncapi: 2.6.0
info:
  title: "arw-svc events"
  version: "0.1.0"
defaultContentType: application/json
channels:
  Service.Start:
    subscribe:
      message:
        $ref: '#/components/messages/ServiceStart'
  Service.Health:
    subscribe:
      message:
        $ref: '#/components/messages/ServiceHealth'
  Service.Test:
    subscribe:
      message:
        $ref: '#/components/messages/ServiceTest'
  Governor.Changed:
    subscribe:
      message:
        $ref: '#/components/messages/GovernorChanged'
  Memory.Applied:
    subscribe:
      message:
        $ref: '#/components/messages/MemoryApplied'
  Models.Changed:
    subscribe:
      message:
        $ref: '#/components/messages/ModelsChanged'
  Models.DownloadProgress:
    subscribe:
      message:
        $ref: '#/components/messages/ModelsDownloadProgress'
  Models.ManifestWritten:
    subscribe:
      message:
        $ref: '#/components/messages/ModelsManifestWritten'
  Models.CasGc:
    subscribe:
      message:
        $ref: '#/components/messages/ModelsCasGc'
  Egress.Preview:
    subscribe:
      message:
        $ref: '#/components/messages/EgressPreview'
  Egress.Ledger.Appended:
    subscribe:
      message:
        $ref: '#/components/messages/EgressLedgerAppended'
  Tool.Ran:
    subscribe:
      message:
        $ref: '#/components/messages/ToolRan'
  Feedback.Signal:
    subscribe:
      message:
        $ref: '#/components/messages/FeedbackSignal'
  Feedback.Suggested:
    subscribe:
      message:
        $ref: '#/components/messages/FeedbackSuggested'
  Feedback.Applied:
    subscribe:
      message:
        $ref: '#/components/messages/FeedbackApplied'
components:
  messages:
    ServiceStart:
      name: Service.Start
      payload:
        type: object
        additionalProperties: true
    ServiceHealth:
      name: Service.Health
      payload:
        type: object
        properties:
          ok: { type: boolean }
    ServiceTest:
      name: Service.Test
      payload:
        type: object
        additionalProperties: true
    GovernorChanged:
      name: Governor.Changed
      payload:
        type: object
        properties:
          profile: { type: string }
    MemoryApplied:
      name: Memory.Applied
      payload:
        type: object
        additionalProperties: true
    ModelsChanged:
      name: Models.Changed
      payload:
        type: object
        additionalProperties: true
    ModelsDownloadProgress:
      name: Models.DownloadProgress
      payload:
        type: object
        properties:
          id: { type: string }
          status: { type: string }
          code: { type: string }
          error: { type: string }
          progress: { type: integer }
          downloaded: { type: integer }
          total: { type: integer }
          file: { type: string }
          provider: { type: string }
          cas_file: { type: string }
          budget:
            type: object
            properties:
              soft_ms: { type: integer }
              hard_ms: { type: integer }
              spent_ms: { type: integer }
              remaining_soft_ms: { type: integer }
              remaining_hard_ms: { type: integer }
          disk:
            type: object
            properties:
              available: { type: integer }
              total: { type: integer }
              reserve: { type: integer }
        additionalProperties: true
    ModelsManifestWritten:
      name: Models.ManifestWritten
      payload:
        type: object
        properties:
          id: { type: string }
          manifest_path: { type: string }
          sha256: { type: ["string","null"] }
          cas: { type: ["string","null"] }
    ModelsCasGc:
      name: Models.CasGc
      payload:
        type: object
        properties:
          scanned: { type: integer }
          kept: { type: integer }
          deleted: { type: integer }
          deleted_bytes: { type: integer }
          ttl_days: { type: integer }
    EgressPreview:
      name: Egress.Preview
      payload:
        type: object
        properties:
          id: { type: string }
          url: { type: string }
          dest:
            type: object
            properties:
              host: { type: string }
              port: { type: integer }
              protocol: { type: string }
          provider: { type: string }
          corr_id: { type: string }
        additionalProperties: true
    EgressLedgerAppended:
      name: Egress.Ledger.Appended
      payload:
        type: object
        properties:
          decision: { type: string }
          reason_code: { type: string }
          posture: { type: string }
          project_id: { type: string }
          episode_id: { type: ["string","null"] }
          corr_id: { type: string }
          node_id: { type: ["string","null"] }
          tool_id: { type: string }
          dest:
            type: object
            properties:
              host: { type: string }
              port: { type: integer }
              protocol: { type: string }
          bytes_out: { type: integer }
          bytes_in: { type: integer }
          duration_ms: { type: integer }
    ToolRan:
      name: Tool.Ran
      payload:
        type: object
        properties:
          id: { type: string }
          output: { type: object }
    FeedbackSignal:
      name: Feedback.Signal
      payload:
        type: object
        properties:
          signal:
            type: object
            properties:
              id: { type: string }
              kind: { type: string }
              target: { type: string }
              confidence: { type: number }
              severity: { type: integer }
    FeedbackSuggested:
      name: Feedback.Suggested
      payload:
        type: object
        properties:
          version: { type: integer }
          suggestions:
            type: array
            items:
              type: object
              properties:
                id: { type: string }
                action: { type: string }
                params: { type: object }
                rationale: { type: string }
                confidence: { type: number }
    FeedbackApplied:
      name: Feedback.Applied
      payload:
        type: object
        properties:
          id: { type: string }
          action: { type: string }
          params: { type: object }
