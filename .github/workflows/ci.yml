name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test-docs:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
      actions: write
    env:
      CARGO_TERM_COLOR: always
      REPRO_NOW: 1970-01-01T00:00:00Z
      NEXTEST_VERSION: 0.9.67
      PIP_VERSION: 24.2
      ARW_ENV_MODE_FORCE: linux
      ARW_ENV_CACHE_KEY: linux
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Select environment mode
        run: bash scripts/env/switch.sh linux

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@5d458579430fc14a04a08a1e7d3694f545e91ce6 # stable
        with:
            components: rustfmt, clippy

      - name: Restore Rust cache
        uses: Swatinem/rust-cache@7939da402645ba29a2df566723491a2c856e8f8a # v2
        with:
          workspaces: |
            . -> target
          shared-key: ${{ env.ARW_ENV_CACHE_KEY }}

      - name: Install nextest
        uses: taiki-e/install-action@7ec692fc37da04f8da31c22ba9f3b71ef267e650 # v2
        with:
          tool: nextest
          version: ${{ env.NEXTEST_VERSION }}

      - name: Setup Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5
        with:
          python-version: '3.x'

      - name: Cache pip (docs)
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-docs-${{ hashFiles('requirements/docs.txt') }}

      - name: Install MkDocs deps
        run: |
          python -m pip install "pip==${PIP_VERSION}"
          python -m pip install -r requirements/docs.txt

      - name: Validate feature registry
        run: python3 scripts/check_feature_integrity.py

      - name: Validate system components registry
        run: python3 scripts/check_system_components_integrity.py

      - name: Validate runtime bundle consent metadata
        run: python3 scripts/validate_runtime_consent.py

      - name: Generate docs from registries
        run: |
          python3 scripts/gen_feature_matrix.py
          python3 scripts/gen_feature_catalog.py
          python3 scripts/gen_system_components.py

      - name: Ensure generated docs are committed
        run: |
          git add -A
          git diff --cached --name-only
          git diff --cached --quiet || (echo 'error: uncommitted generated docs' && exit 1)

      - name: Build docs (strict)
        run: mkdocs build --strict

      - name: Universal access kit smoke
        run: python3 scripts/universal_access_kit.py --force --zip

      - name: Upload universal access kit artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: universal-access-kit
          path: |
            dist/universal-access-kit
            dist/universal-access-kit.zip

      - name: Upload docs artifact (PR preview)
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: mkdocs-site
          path: site/

      - name: Rust format
        run: cargo fmt --all --check

      - name: Clippy (workspace)
        run: cargo clippy --workspace --all-targets -- -D warnings

      - name: EnvGuard style check
        env:
          ENFORCE_ENV_GUARD: 1
        run: bash scripts/check_env_guard.sh

      - name: Event kind lint
        run: python3 scripts/lint_event_names.py

      - name: Ensure OpenAPI summaries
        run: python3 scripts/check_operation_docs_sync.py

      - name: Tests (workspace)
        run: cargo nextest run --locked --profile ci --workspace

      - name: Snappy bench (sanity)
        run: python3 scripts/ci_snappy_bench.py

      - name: Upload snappy bench summary
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: snappy-bench-summary
          path: ${{ runner.temp }}/snappy-bench-*.json

      - name: Trial triad smoke
        run: bash scripts/triad_smoke.sh

      - name: Trial context telemetry check
        run: bash scripts/context_ci.sh

      - name: Runtime llama smoke (stub)
        env:
          MODE: stub
        run: bash scripts/runtime_llama_smoke.sh

      - name: Legacy surface guard
        env:
          ARW_LEGACY_CHECK_WAIT_SECS: 120
        run: bash scripts/check_legacy_surface.sh

  mise-guardrails:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    permissions:
      contents: read
    env:
      ARW_ENV_MODE_FORCE: linux
      ARW_ENV_CACHE_KEY: linux
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Select environment mode
        run: bash scripts/env/switch.sh linux

      - name: Restore mise cache
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4
        with:
          path: |
            ~/.local/share/mise
            ~/.cache/mise
          key: ${{ runner.os }}-mise-${{ hashFiles('.mise.toml') }}

      - name: Install mise
        shell: bash
        env:
          MISE_INSTALL_URL: https://mise.jdx.dev/install.sh
          MISE_INSTALL_SHA256: a4ac4fea7ec3c16046e38860bdf5e01ed534af3e55173996c4a9c7194393bfd4
        run: |
          set -euo pipefail
          install_dir="$HOME/.local/share/mise"
          bin_path="$install_dir/bin/mise"
          if [ ! -x "$bin_path" ]; then
            tmp="$(mktemp)"
            curl -fsSL "$MISE_INSTALL_URL" -o "$tmp"
            echo "$MISE_INSTALL_SHA256  $tmp" | shasum -a 256 -c -
            sh "$tmp"
            rm -f "$tmp"
          fi
          echo "$install_dir/bin" >> "$GITHUB_PATH"

      - name: Setup toolchain via mise
        run: |
          set -euo pipefail
          mise install
          mkdir -p dist/docs-wheels
          if [ -f dist/docs-wheels.tar.gz ]; then
            tar -C dist/docs-wheels -xzf dist/docs-wheels.tar.gz
          fi

      - name: Bootstrap docs deps (fast lane)
        run: mise run bootstrap:docs -- --upgrade --wheel-dir dist/docs-wheels

      - name: Guardrail verify (fast)
        run: mise run verify:fast

      - name: Docs lint (fast)
        run: mise run docs:check:fast

      - name: Paths filter for SSE smokes
        id: filter
        uses: dorny/paths-filter@0bc4621f580ce0098cd1f0e4ef39b9f2d0b58a65 # v3
        with:
          filters: |
            sse:
              - 'apps/arw-server/**'
              - 'clients/typescript/**'
              - 'docs/guide/economy_ledger.md'
              - 'docs/guide/daily_brief.md'
              - '.mise.toml'
              - 'Justfile'
              - '.github/workflows/ci.yml'
            daily_brief:
              - 'apps/arw-server/src/daily_brief.rs'
              - 'apps/arw-server/src/api/state/misc.rs'
              - 'clients/typescript/arw-client.ts'
              - 'clients/typescript/examples/daily_brief.ts'
              - 'docs/guide/daily_brief.md'
              - 'apps/arw-launcher/src-tauri/ui/hub.js'
              - 'apps/arw-launcher/src-tauri/ui/hub.html'
              - '.mise.toml'
              - '.github/workflows/ci.yml'
            adapters:
              - 'adapters/**'
              - 'scripts/lint_adapters.sh'
              - 'apps/arw-cli/src/commands/adapters.rs'
              - 'spec/schemas/runtime_adapter_manifest.schema.json'
              - 'docs/guide/adapter_sdk.md'
              - 'docs/guide/adapters_validate.md'

      - name: Build arw-server (debug)
        if: ${{ steps.filter.outputs.sse == 'true' || steps.filter.outputs.daily_brief == 'true' }}
        run: mise exec cargo -- cargo build -p arw-server

      - name: Build arw-cli (debug)
        if: ${{ steps.filter.outputs.sse == 'true' || steps.filter.outputs.daily_brief == 'true' }}
        run: mise exec cargo -- cargo build -p arw-cli

      - name: Start arw-server (background)
        if: ${{ steps.filter.outputs.sse == 'true' || steps.filter.outputs.daily_brief == 'true' }}
        env:
          ARW_ADMIN_TOKEN: ${{ secrets.CI_ARW_ADMIN_TOKEN || 'test-admin-token' }}
          ARW_DEBUG: "1"
          ARW_PORT: "8099"
        run: |
          set -euo pipefail
          nohup target/debug/arw-server >/tmp/arw-svc.log 2>&1 &
          echo $! > /tmp/arw-svc.pid
          for i in $(seq 1 60); do
            if curl -fsS -m 2 http://127.0.0.1:8099/healthz >/dev/null; then
              echo "server healthy"; break; fi; sleep 1; done
          curl -fsS http://127.0.0.1:8099/about || true

      - name: Economy SSE smoke (ts:economy:smoke)
        if: steps.filter.outputs.sse == 'true'
        env:
          BASE: http://127.0.0.1:8099
          ARW_ADMIN_TOKEN: ${{ secrets.CI_ARW_ADMIN_TOKEN || 'test-admin-token' }}
          TIMEOUT: "20000"
          TRIGGER: "1"
          REQUIRE_UPDATE: "1"
        run: mise run ts:economy:smoke

      - name: CLI economy ledger (JSON/CSV)
        if: steps.filter.outputs.sse == 'true'
        env:
          ARW_ADMIN_TOKEN: ${{ secrets.CI_ARW_ADMIN_TOKEN || 'test-admin-token' }}
        run: |
          target/debug/arw-cli state economy-ledger --base http://127.0.0.1:8099 --limit 5 --json --pretty
          target/debug/arw-cli state economy-ledger --base http://127.0.0.1:8099 --limit 5 --csv > /tmp/ledger.csv
          test -s /tmp/ledger.csv

      - name: CLI economy ledger watch (brief)
        if: steps.filter.outputs.sse == 'true'
        env:
          ARW_ADMIN_TOKEN: ${{ secrets.CI_ARW_ADMIN_TOKEN || 'test-admin-token' }}
        run: |
          timeout 8s target/debug/arw-cli state economy-ledger --base http://127.0.0.1:8099 --limit 5 --watch || true

      - name: Daily Brief smoke (TS)
        if: steps.filter.outputs.daily_brief == 'true'
        env:
          BASE: http://127.0.0.1:8099
          ARW_ADMIN_TOKEN: ${{ secrets.CI_ARW_ADMIN_TOKEN || 'test-admin-token' }}
          TIMEOUT: "6000"
        run: mise run ts:daily:brief

      - name: Read-model watch smoke (projects)
        env:
          BASE: http://127.0.0.1:8099
          ARW_ADMIN_TOKEN: ${{ secrets.CI_ARW_ADMIN_TOKEN || 'test-admin-token' }}
          ID: projects
          TIMEOUT: "5000"
          REQUIRE_KEY: items
          REQUIRE_VERSION: "1"
        run: mise run ts:readmodel:watch

      - name: Dump server log on failure
        if: failure()
        run: |
          echo '--- arw-server log (tail) ---'
          tail -n 200 /tmp/arw-svc.log || true

      - name: Stop arw-server
        if: always() && (steps.filter.outputs.sse == 'true' || steps.filter.outputs.daily_brief == 'true')
        run: |
          if [ -f /tmp/arw-svc.pid ]; then kill "$(cat /tmp/arw-svc.pid)" || true; fi

      - name: Adapter manifests lint (strict)
        if: steps.filter.outputs.adapters == 'true'
        run: |
          bash scripts/lint_adapters.sh
          ADAPTERS_LINT_STRICT_WARNINGS=1 bash scripts/lint_adapters.sh

      - name: Build mock adapter health server
        if: steps.filter.outputs.adapters == 'true'
        run: |
          cargo build -p arw-mock-adapter

      - name: Start mock adapter health (background)
        if: steps.filter.outputs.adapters == 'true'
        run: |
          set -euo pipefail
          nohup target/debug/mock-adapter-health >/tmp/mock-adapter.log 2>&1 &
          echo $! > /tmp/mock-adapter.pid
          for i in $(seq 1 30); do if curl -fsS -m 2 http://127.0.0.1:8081/healthz >/dev/null; then echo 'mock adapter up'; break; fi; sleep 1; done

      - name: Adapter smoke harness
        if: steps.filter.outputs.adapters == 'true'
        env:
          ADAPTER_SMOKE_HEALTH: "1"
        run: |
          ADAPTER_SMOKE_OUT=/tmp/adapter-smoke.json bash scripts/adapter_smoke.sh

      - name: Upload adapters smoke artifact
        if: steps.filter.outputs.adapters == 'true'
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: adapters-smoke
          path: /tmp/adapter-smoke.json

      - name: Stop mock adapter health
        if: always() && steps.filter.outputs.adapters == 'true'
        run: |
          if [ -f /tmp/mock-adapter.pid ]; then kill "$(cat /tmp/mock-adapter.pid)" || true; fi
