name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ "**" ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint_and_test:
    name: Lint and Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
    defaults:
      run:
        working-directory: Agent_Hub
    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            Agent_Hub/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('Agent_Hub/Cargo.lock') }}

      - name: rustfmt
        run: |
          set +e
          cargo fmt -- --version || true
          if ! cargo fmt --all -- --check; then
            echo "Rustfmt found differences (advisory)"
          fi

      - name: clippy
        run: cargo clippy --workspace --all-targets -- -D warnings

      - name: tests (exclude desktop crates)
        run: cargo test --workspace --locked --exclude arw-tauri --exclude arw-launcher

  audit_and_licenses:
    name: Audit and Licenses (ubuntu)
    runs-on: ubuntu-latest
    needs: [lint_and_test]
    defaults:
      run:
        working-directory: Agent_Hub
    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            Agent_Hub/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('Agent_Hub/Cargo.lock') }}

      - name: Install cargo-audit and cargo-deny
        run: |
          cargo install cargo-audit --locked || true
          cargo install cargo-deny --locked || true

      - name: cargo-audit
        run: cargo audit --db ~/.cache/cargo-audit

      - name: cargo-deny (advisories)
        run: cargo deny check advisories

      - name: cargo-deny (bans)
        run: cargo deny check bans

      - name: cargo-deny (licenses)
        run: cargo deny check licenses

  shellcheck:
    name: ShellCheck (ubuntu)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install shellcheck
        run: sudo apt-get update && sudo apt-get install -y shellcheck
      - name: Run ShellCheck
        run: |
          set -e
          files=$(git ls-files "*.sh")
          if [ -n "$files" ]; then
            shellcheck --version
            # Exclude a handful of noisy style infos for our interactive scripts
            shellcheck -S style -x \
              -e SC1091 -e SC2015 -e SC2034 -e SC2046 -e SC2012 -e SC2295 -e SC2140 -e SC1010 \
              $files || {
                echo "ShellCheck had excluded-style findings only (ignored)";
                exit 0;
              }
          else
            echo "No shell scripts found."
          fi

  cross-build:
    name: Cross Build (linux targets)
    runs-on: ubuntu-latest
    needs: [lint_and_test]
    defaults:
      run:
        working-directory: Agent_Hub
    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cross
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Cross build aarch64-unknown-linux-gnu (svc/cli)
        run: |
          cross build --locked --target aarch64-unknown-linux-gnu -p arw-svc -p arw-cli

      - name: Cross build x86_64-unknown-linux-musl (svc/cli)
        run: |
          cross build --locked --target x86_64-unknown-linux-musl -p arw-svc -p arw-cli

  launcher-linux-build:
    name: Launcher Build (linux)
    runs-on: ubuntu-latest
    needs: [lint_and_test]
    defaults:
      run:
        working-directory: Agent_Hub
    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install Tauri desktop deps
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential pkg-config curl file libgtk-3-dev \
            libwebkit2gtk-4.1-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            Agent_Hub/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('Agent_Hub/Cargo.lock') }}

      - name: Build launcher (compile-only)
        run: cargo build -p arw-launcher --locked

      # Optional smoke: enable if desired; disabled by default to avoid flakiness
      # - name: Smoke run under Xvfb (5s)
      #   run: |
      #     sudo apt-get install -y xvfb
      #     timeout 5 xvfb-run -a cargo run -p arw-launcher || true
