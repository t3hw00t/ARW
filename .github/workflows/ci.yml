name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
  workflow_dispatch:

jobs:
  build-test:
    name: build-test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            Agent_Hub

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable

      - name: Rustfmt check
        run: |
          cd Agent_Hub
          cargo fmt --all -- --check

      - name: Clippy
        run: |
          cd Agent_Hub
          cargo clippy --workspace --all-targets -- -D warnings

      - name: Build
        run: |
          cd Agent_Hub
          cargo build --workspace --locked
      - name: Build (arw-svc with grpc feature)
        run: |
          cd Agent_Hub
          cargo build -p arw-svc --features grpc --locked

      - name: Test
        run: |
          cd Agent_Hub
          cargo test --workspace --locked

  nix-build-test:
    name: nix-build-test (ubuntu)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Install Nix
        uses: cachix/install-nix-action@v25
      - name: Build in Nix
        run: |
          cd Agent_Hub
          nix develop --command cargo build --workspace --all-targets --locked
      - name: Test in Nix
        run: |
          cd Agent_Hub
          nix develop --command cargo test --workspace --locked

  lint-extra:
    name: lint-extra (udeps+msrv)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Install cargo-udeps
        run: |
          rustup toolchain install nightly --profile minimal --no-self-update
          cargo +nightly install cargo-udeps --locked
      - name: Unused dependencies (deny)
        run: |
          cd Agent_Hub
          cargo +nightly udeps --workspace --all-targets
      - name: Install cargo-msrv
        run: cargo install cargo-msrv --locked
      - name: MSRV verify
        run: |
          cd Agent_Hub
          cargo msrv --output-format minimal verify

  windows-scripts-tests:
    name: windows-scripts-tests (windows)
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Run Pester tests
        shell: pwsh
        run: |
          Set-Location Agent_Hub
          ./scripts/tests/Run-WindowsScriptTests.ps1 -VerboseOutput:$false

  security-audit:
    name: security-audit (cargo-audit)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Install cargo-audit
        run: cargo install cargo-audit --locked
      - name: Audit
        run: |
          cd Agent_Hub
          cargo audit --db-urls https://github.com/RustSec/advisory-db

  docs:
    name: docs (ubuntu)
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.x'
      - name: Install mkdocs deps
        run: |
          pip install --upgrade pip
          pip install mkdocs mkdocs-material mkdocs-git-revision-date-localized-plugin
      - name: Docgen
        run: |
          cd Agent_Hub
          bash scripts/docgen.sh
      - name: Generate OpenAPI + gating docs
        run: |
          cd Agent_Hub
          OPENAPI_OUT=spec/openapi.yaml cargo run -q -p arw-svc --features ""
      - name: Build docs
        run: |
          cd Agent_Hub
          mkdocs build --strict
      - name: Publish docs to gh-pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: Agent_Hub/site

  link-check:
    name: link-check (docs+README)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.x'
      - name: Build docs
        run: |
          pip install --upgrade pip
          pip install mkdocs mkdocs-material mkdocs-git-revision-date-localized-plugin
          cd Agent_Hub
          bash scripts/docgen.sh
          mkdocs build --strict
      - name: Link check
        uses: lycheeverse/lychee-action@v1
        with:
          args: >-
            --verbose
            --accept 200,206,429
            Agent_Hub/site/**/*.html Agent_Hub/README.md Agent_Hub/docs/**/*.md
          fail: true
