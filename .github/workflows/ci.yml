name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test-docs:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
      actions: write
    env:
      CARGO_TERM_COLOR: always
      REPRO_NOW: 1970-01-01T00:00:00Z
      NEXTEST_VERSION: 0.9.67
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@5d458579430fc14a04a08a1e7d3694f545e91ce6 # stable
        with:
            components: rustfmt, clippy

      - name: Restore Rust cache
        uses: Swatinem/rust-cache@7939da402645ba29a2df566723491a2c856e8f8a # v2
        with:
          workspaces: |
            . -> target

      - name: Install nextest
        uses: taiki-e/install-action@7ec692fc37da04f8da31c22ba9f3b71ef267e650 # v2
        with:
          tool: nextest
          version: ${{ env.NEXTEST_VERSION }}

      - name: Setup Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5
        with:
          python-version: '3.x'

      - name: Cache pip (docs)
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-docs-${{ hashFiles('requirements/docs.txt') }}

      - name: Install MkDocs deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/docs.txt

      - name: Validate feature registry
        run: python3 scripts/check_feature_integrity.py

      - name: Validate system components registry
        run: python3 scripts/check_system_components_integrity.py

      - name: Generate docs from registries
        run: |
          python3 scripts/gen_feature_matrix.py
          python3 scripts/gen_feature_catalog.py
          python3 scripts/gen_system_components.py

      - name: Ensure generated docs are committed
        run: |
          git add -A
          git diff --cached --name-only
          git diff --cached --quiet || (echo 'error: uncommitted generated docs' && exit 1)

      - name: Build docs (strict)
        run: mkdocs build --strict

      - name: Upload docs artifact (PR preview)
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: mkdocs-site
          path: site/

      - name: Rust format
        run: cargo fmt --all --check

      - name: Clippy (workspace)
        run: cargo clippy --workspace --all-targets -- -D warnings

      - name: EnvGuard style check
        env:
          ENFORCE_ENV_GUARD: 1
        run: bash scripts/check_env_guard.sh

      - name: Event kind lint
        run: python3 scripts/lint_event_names.py

      - name: Ensure OpenAPI summaries
        run: python3 scripts/check_operation_docs_sync.py

      - name: Tests (workspace)
        run: cargo nextest run --workspace

      - name: Snappy bench (sanity)
        run: bash scripts/ci_snappy_bench.sh

      - name: Trial triad smoke
        run: bash scripts/triad_smoke.sh

      - name: Trial context telemetry check
        run: bash scripts/context_ci.sh

      - name: Runtime llama smoke (stub)
        env:
          MODE: stub
        run: bash scripts/runtime_llama_smoke.sh

      - name: Legacy surface guard
        env:
          ARW_LEGACY_CHECK_WAIT_SECS: 120
        run: bash scripts/check_legacy_surface.sh
