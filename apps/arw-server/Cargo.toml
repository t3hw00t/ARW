[package]
name = "arw-server"
version = "0.2.0-dev"
edition = "2021"
license.workspace = true

[dependencies]
anyhow = "1"
axum = "0.8"
tokio = { version = "1", features = ["rt-multi-thread","macros","signal","fs","sync","io-util","time","process"] }
tokio-util = { version = "0.7", features = ["io"] }
tower-http = { version = "0.6", features = ["trace","cors","compression-br","compression-gzip"] }
serde = { version = "1", features = ["derive"] }
serde_json = "1"
chrono = { version = "0.4", features = ["serde"] }
tracing = "0.1"
metrics = "0.24"
arw-kernel = { path = "../../crates/arw-kernel", version = "0.2.0-dev", features = ["metrics"] }
arw-events = { path = "../../crates/arw-events", version = "0.2.0-dev" }
arw-policy = { path = "../../crates/arw-policy", version = "0.2.0-dev" }
arw-wasi = { path = "../../crates/arw-wasi", version = "0.2.0-dev" }
arw-otel = { path = "../../crates/arw-otel", version = "0.2.0-dev" }
arw-core = { path = "../../crates/arw-core", version = "0.2.0-dev" }
arw-macros = { path = "../../crates/arw-macros", version = "0.2.0-dev" }
arw-topics = { path = "../../crates/arw-topics", version = "0.2.0-dev" }
arw-protocol = { path = "../../crates/arw-protocol", version = "0.2.0-dev" }
arw-heuristics = { path = "../../crates/arw-heuristics", version = "0.2.0-dev" }
arw-memory-core = { path = "../../crates/arw-memory-core", version = "0.2.0-dev" }
arw-runtime = { path = "../../crates/arw-runtime", version = "0.2.0-dev" }
uuid = { version = "1", features = ["v4"] }
tokio-stream = { version = "0.1", features = ["sync"] }
tracing-subscriber = { version = "0.3", features = ["env-filter"] }
reqwest = { workspace = true }
url = "2.5"
base64 = { workspace = true }
futures-util = { workspace = true }
sha2 = "0.10"
hex = "0.4"
jsonschema = { workspace = true }
inventory = { workspace = true }
schemars = { workspace = true }
utoipa = { workspace = true }
thiserror = { workspace = true }
async-trait = { workspace = true }
tower = { version = "0.5", features = ["limit","util"] }
hyper = { version = "1", features = ["server","http1","http2"] }
http-body-util = "0.1"
bytes = "1"
hyper-util = { version = "0.1", features = ["server","tokio"] }
once_cell = { workspace = true }
json-patch = "3"
httpdate = "1.0"
moka = { version = "0.12", features = ["future"] }
sysinfo = { workspace = true }
os_info = { workspace = true }
fs2 = { workspace = true }
toml = { workspace = true }
regex = { workspace = true }
ipnet = { workspace = true }
walkdir = "2"
pathdiff = "0.2"
rand = "0.9"
rustc-hash = "1.1"
screenshots = { version = "0.8", optional = true }
image = { version = "0.25", default-features = false, features = ["png","jpeg"], optional = true }
leptess = { version = "0.14", optional = true }
nvml-wrapper = { version = "0.11", optional = true }
wgpu = { version = "0.19", optional = true }
tonic = { version = "0.14", optional = true, features = ["transport"] }
prost = { version = "0.14", optional = true }
prost-types = { version = "0.14", optional = true }
tonic-prost = { version = "0.14", optional = true }

[dev-dependencies]
async-trait = "0.1"
criterion = { version = "0.7", features = ["async_tokio"] }
ed25519-dalek = "2"
tempfile = "3"
parking_lot = "0.12"
proptest = "1"
loom = { version = "0.7", default-features = false, features = ["futures"] }
serde_yaml = "0.9"

[features]
default = []
tool_screenshots = ["dep:screenshots", "dep:image"]
gpu_nvml = ["dep:nvml-wrapper"]
gpu_wgpu = ["dep:wgpu"]
npu_dxcore = []
ocr_tesseract = ["dep:leptess"]
docgen = []
grpc = ["dep:tonic", "dep:prost", "dep:prost-types", "dep:tonic-prost"]
context_harness = []

[target.'cfg(target_os = "windows")'.dependencies]
windows = { version = "0.62", features = ["Win32_Graphics_DXCore","Win32_Graphics_Dxgi"] }

[build-dependencies]
tonic-prost-build = "0.14"
